Trace file /opt/oracle/diag/rdbms/orclcdb/ORCLCDB/trace/ORCLCDB_ora_9543.trc
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0
Build label:    RDBMS_19.3.0.0.0DBRU_LINUX.X64_190417
ORACLE_HOME:    /opt/oracle/product/19c/dbhome_1
System name:	Linux
Node name:	9b5b0be11923
Release:	4.19.128-microsoft-standard
Version:	#1 SMP Tue Jun 23 12:58:10 UTC 2020
Machine:	x86_64
Instance name: ORCLCDB
Redo thread mounted by this instance: 1
Oracle process number: 72
Unix process pid: 9543, image: oracle@9b5b0be11923


*** 2021-01-17T09:46:47.907782+00:00 (ORCLPDB1(3))
*** SESSION ID:(10.35645) 2021-01-17T09:46:47.907839+00:00
*** CLIENT ID:() 2021-01-17T09:46:47.907855+00:00
*** SERVICE NAME:(orclpdb1) 2021-01-17T09:46:47.907869+00:00
*** MODULE NAME:(SQLcl) 2021-01-17T09:46:47.907883+00:00
*** ACTION NAME:() 2021-01-17T09:46:47.907897+00:00
*** CLIENT DRIVER:(jdbcthin : 21.1.0.0.0) 2021-01-17T09:46:47.907910+00:00
*** CONTAINER ID:(3) 2021-01-17T09:46:47.907924+00:00
 
Registered qb: SEL$1 0x657ca0e8 (PARSER)
---------------------
QUERY BLOCK SIGNATURE
---------------------
  signature (): qb_name=SEL$1 nbfros=3 flg=0
    fro(0): flg=4 objn=73644 hint_alias="L"@"SEL$1"
    fro(1): flg=4 objn=73646 hint_alias="T1"@"SEL$1"
    fro(2): flg=4 objn=73648 hint_alias="T2"@"SEL$1"

SPM: statement not found in SMB
SPM: capture of plan baseline is OFF

**************************
Automatic degree of parallelism (AUTODOP)
**************************
Automatic degree of parallelism is disabled: Parameter.
kkopqSetForceParallelProperties: Hint:no
Query: compute:yes forced:no forceDop:0
Global Manual Dop: 1 - Rounded?: no

PM: Considering predicate move-around in query block SEL$1 (#0)
**************************
Predicate Move-Around (PM)
**************************
OPTIMIZER INFORMATION

******************************************
----- Current SQL Statement for this session (sql_id=2zdcf8df6cnzj) -----
explain plan for SELECT /*+ OPT_PARAM('_optimizer_cbqt_or_expansion' 'off') */ null FROM l, t1, t2 WHERE  
(  ( t1.m = :v1 AND t2.c1 BETWEEN 11 AND 12)       OR 
   ( t1.m = :v2 AND t2.c1 = 103 AND t2.c2 = 13  )   )  AND 
    ( l.id = t1.id AND l.id2 = t2.id )
*******************************************
Legend
The following abbreviations are used by optimizer trace.
CBQT - cost-based query transformation
JPPD - join predicate push-down
OJPPD - old-style (non-cost-based) JPPD
FPD - filter push-down
PM - predicate move-around
CVM - complex view merging
SPJ - select-project-join
SJC - set join conversion
SU - subquery unnesting
OBYE - order by elimination
OST - old style star transformation
ST - new (cbqt) star transformation
CNT - count(col) to count(*) transformation
JE - Join Elimination
JF - join factorization
CBY - connect by
SLP - select list pruning
DP - distinct placement
VT - vector transformation
AAT - Approximate Aggregate Transformation
ORE - CBQT OR-Expansion
LORE - Legacy OR-Expansion
qb - query block
LB - leaf blocks
DK - distinct keys
LB/K - average number of leaf blocks per key
DB/K - average number of data blocks per key
CLUF - clustering factor
NDV - number of distinct values
Resp - response cost
Card - cardinality
Resc - resource cost
NL - nested loops (join)
SM - sort merge (join)
HA - hash (join)
CPUSPEED - CPU Speed 
IOTFRSPEED - I/O transfer speed
IOSEEKTIM - I/O seek time
SREADTIM - average single block read time
MREADTIM - average multiblock read time
MBRC - average multiblock read count
MAXTHR - maximum I/O system throughput
SLAVETHR - average slave I/O throughput
dmeth - distribution method
  1: no partitioning required
  2: value partitioned
  4: right is random (round-robin)
  128: left is random (round-robin)
  8: broadcast right and partition left
  16: broadcast left and partition right
  32: partition left using partitioning of right
  64: partition right using partitioning of left
  256: run the join in serial
  0: invalid distribution method
sel - selectivity
ptn - partition
AP - adaptive plans
***************************************
PARAMETERS USED BY THE OPTIMIZER
********************************
  *************************************
  PARAMETERS WITH ALTERED VALUES
  ******************************
Compilation Environment Dump
Bug Fix Control Environment


  *************************************
  PARAMETERS WITH DEFAULT VALUES
  ******************************
Compilation Environment Dump
optimizer_mode_hinted               = false
optimizer_features_hinted           = 0.0.0
parallel_execution_enabled          = true
parallel_query_forced_dop           = 0
parallel_dml_forced_dop             = 0
parallel_ddl_forced_degree          = 0
parallel_ddl_forced_instances       = 0
_query_rewrite_fudge                = 90
optimizer_features_enable           = 19.1.0
_optimizer_search_limit             = 5
cpu_count                           = 8
active_instance_count               = 1
parallel_threads_per_cpu            = 1
hash_area_size                      = 131072
bitmap_merge_area_size              = 1048576
sort_area_size                      = 65536
sort_area_retained_size             = 0
_sort_elimination_cost_ratio        = 0
_optimizer_block_size               = 8192
_sort_multiblock_read_count         = 2
_hash_multiblock_io_count           = 0
_db_file_optimizer_read_count       = 8
_optimizer_max_permutations         = 2000
pga_aggregate_target                = 524288 KB
_pga_max_size                       = 204800 KB
_query_rewrite_maxdisjunct          = 257
_smm_auto_min_io_size               = 56 KB
_smm_auto_max_io_size               = 248 KB
_smm_min_size                       = 524 KB
_smm_max_size_static                = 102400 KB
_smm_px_max_size_static             = 262144 KB
_cpu_to_io                          = 0
_optimizer_undo_cost_change         = 19.1.0
parallel_query_mode                 = enabled
_enable_parallel_dml                = disabled
parallel_ddl_mode                   = enabled
optimizer_mode                      = all_rows
sqlstat_enabled                     = false
_optimizer_percent_parallel         = 101
_always_anti_join                   = choose
_always_semi_join                   = choose
_optimizer_mode_force               = true
_partition_view_enabled             = true
_always_star_transformation         = false
_query_rewrite_or_error             = false
_hash_join_enabled                  = true
cursor_sharing                      = exact
_b_tree_bitmap_plans                = true
star_transformation_enabled         = false
_optimizer_cost_model               = choose
_new_sort_cost_estimate             = true
_complex_view_merging               = true
_unnest_subquery                    = true
_eliminate_common_subexpr           = true
_pred_move_around                   = true
_convert_set_to_join                = false
_push_join_predicate                = true
_push_join_union_view               = true
_fast_full_scan_enabled             = true
_optim_enhance_nnull_detection      = true
_parallel_broadcast_enabled         = true
_px_broadcast_fudge_factor          = 100
_ordered_nested_loop                = true
_no_or_expansion                    = false
optimizer_index_cost_adj            = 100
optimizer_index_caching             = 0
_system_index_caching               = 0
_disable_datalayer_sampling         = false
query_rewrite_enabled               = true
query_rewrite_integrity             = enforced
_query_cost_rewrite                 = true
_query_rewrite_2                    = true
_query_rewrite_1                    = true
_query_rewrite_expression           = true
_query_rewrite_jgmigrate            = true
_query_rewrite_fpc                  = true
_query_rewrite_drj                  = false
_full_pwise_join_enabled            = true
_partial_pwise_join_enabled         = true
_left_nested_loops_random           = true
_improved_row_length_enabled        = true
_index_join_enabled                 = true
_enable_type_dep_selectivity        = true
_improved_outerjoin_card            = true
_optimizer_adjust_for_nulls         = true
_optimizer_degree                   = 0
_use_column_stats_for_function      = true
_subquery_pruning_enabled           = true
_subquery_pruning_mv_enabled        = false
_or_expand_nvl_predicate            = true
_like_with_bind_as_equality         = false
_table_scan_cost_plus_one           = true
_cost_equality_semi_join            = true
_default_non_equality_sel_check     = true
_new_initial_join_orders            = true
_oneside_colstat_for_equijoins      = true
_optim_peek_user_binds              = true
_minimal_stats_aggregation          = true
_force_temptables_for_gsets         = false
workarea_size_policy                = auto
_smm_auto_cost_enabled              = true
_gs_anti_semi_join_allowed          = true
_optim_new_default_join_sel         = true
optimizer_dynamic_sampling          = 2
_pre_rewrite_push_pred              = true
_optimizer_new_join_card_computation = true
_union_rewrite_for_gs               = yes_gset_mvs
_generalized_pruning_enabled        = true
_optim_adjust_for_part_skews        = true
_force_datefold_trunc               = false
statistics_level                    = typical
_optimizer_system_stats_usage       = true
skip_unusable_indexes               = true
_remove_aggr_subquery               = true
_optimizer_push_down_distinct       = 0
_dml_monitoring_enabled             = true
_optimizer_undo_changes             = false
_predicate_elimination_enabled      = true
_nested_loop_fudge                  = 100
_project_view_columns               = true
_local_communication_costing_enabled = true
_local_communication_ratio          = 50
_query_rewrite_vop_cleanup          = true
_slave_mapping_enabled              = true
_optimizer_cost_based_transformation = linear
_optimizer_mjc_enabled              = true
_right_outer_hash_enable            = true
_spr_push_pred_refspr               = true
_optimizer_cache_stats              = false
_optimizer_cbqt_factor              = 50
_optimizer_squ_bottomup             = true
_fic_area_size                      = 131072
_optimizer_skip_scan_enabled        = true
_optimizer_cost_filter_pred         = false
_optimizer_sortmerge_join_enabled   = true
_optimizer_join_sel_sanity_check    = true
_mmv_query_rewrite_enabled          = true
_bt_mmv_query_rewrite_enabled       = true
_add_stale_mv_to_dependency_list    = true
_distinct_view_unnesting            = false
_optimizer_dim_subq_join_sel        = true
_optimizer_disable_strans_sanity_checks = 0
_optimizer_compute_index_stats      = true
_push_join_union_view2              = true
optimizer_ignore_hints              = false
_optimizer_random_plan              = 0
_query_rewrite_setopgrw_enable      = true
_optimizer_correct_sq_selectivity   = true
_disable_function_based_index       = false
_optimizer_join_order_control       = 3
_optimizer_cartesian_enabled        = true
_optimizer_starplan_enabled         = true
_extended_pruning_enabled           = true
_optimizer_push_pred_cost_based     = true
_optimizer_null_aware_antijoin      = true
_optimizer_extend_jppd_view_types   = true
_sql_model_unfold_forloops          = run_time
_enable_dml_lock_escalation         = false
_bloom_filter_enabled               = true
_update_bji_ipdml_enabled           = 0
_optimizer_extended_cursor_sharing  = udo
_dm_max_shared_pool_pct             = 1
_optimizer_cost_hjsmj_multimatch    = true
_optimizer_transitivity_retain      = true
_px_pwg_enabled                     = true
optimizer_secure_view_merging       = true
_optimizer_join_elimination_enabled = true
flashback_table_rpi                 = non_fbt
_optimizer_cbqt_no_size_restriction = true
_optimizer_enhanced_filter_push     = true
_optimizer_filter_pred_pullup       = true
_rowsrc_trace_level                 = 0
_simple_view_merging                = true
_optimizer_rownum_pred_based_fkr    = true
_optimizer_better_inlist_costing    = all
_optimizer_self_induced_cache_cost  = false
_optimizer_min_cache_blocks         = 10
_optimizer_or_expansion             = depth
_optimizer_order_by_elimination_enabled = true
_optimizer_outer_to_anti_enabled    = true
_selfjoin_mv_duplicates             = true
_dimension_skip_null                = true
_force_rewrite_enable               = false
_optimizer_star_tran_in_with_clause = true
_optimizer_complex_pred_selectivity = true
_optimizer_connect_by_cost_based    = true
_gby_hash_aggregation_enabled       = true
_globalindex_pnum_filter_enabled    = true
_px_minus_intersect                 = true
_fix_control_key                    = 0
_force_slave_mapping_intra_part_loads = false
_force_tmp_segment_loads            = false
_query_mmvrewrite_maxpreds          = 10
_query_mmvrewrite_maxintervals      = 5
_query_mmvrewrite_maxinlists        = 5
_query_mmvrewrite_maxdmaps          = 10
_query_mmvrewrite_maxcmaps          = 20
_query_mmvrewrite_maxregperm        = 512
_query_mmvrewrite_maxqryinlistvals  = 500
_disable_parallel_conventional_load = false
_trace_virtual_columns              = false
_replace_virtual_columns            = true
_virtual_column_overload_allowed    = true
_kdt_buffering                      = true
_first_k_rows_dynamic_proration     = true
_optimizer_sortmerge_join_inequality = true
_optimizer_aw_stats_enabled         = true
_bloom_pruning_enabled              = true
result_cache_mode                   = MANUAL
_px_ual_serial_input                = true
_optimizer_skip_scan_guess          = false
_enable_row_shipping                = true
_row_shipping_threshold             = 100
_row_shipping_explain               = false
transaction_isolation_level         = read_commited
_optimizer_distinct_elimination     = true
_optimizer_multi_level_push_pred    = true
_optimizer_group_by_placement       = true
_optimizer_rownum_bind_default      = 10
_enable_query_rewrite_on_remote_objs = true
_optimizer_extended_cursor_sharing_rel = simple
_optimizer_adaptive_cursor_sharing  = true
_direct_path_insert_features        = 0
_optimizer_improve_selectivity      = true
optimizer_use_pending_statistics    = false
_optimizer_enable_density_improvements = true
_optimizer_aw_join_push_enabled     = true
_optimizer_connect_by_combine_sw    = true
_enable_pmo_ctas                    = 0
_optimizer_native_full_outer_join   = force
_bloom_predicate_enabled            = true
_optimizer_enable_extended_stats    = true
_is_lock_table_for_ddl_wait_lock    = 0
_pivot_implementation_method        = choose
optimizer_capture_sql_plan_baselines = false
optimizer_use_sql_plan_baselines    = true
_optimizer_star_trans_min_cost      = 0
_optimizer_star_trans_min_ratio     = 0
_with_subquery                      = OPTIMIZER
_optimizer_fkr_index_cost_bias      = 10
_optimizer_use_subheap              = true
parallel_degree_policy              = manual
parallel_degree                     = 0
parallel_min_time_threshold         = 10
_parallel_time_unit                 = 10
_optimizer_or_expansion_subheap     = true
_optimizer_free_transformation_heap = true
_optimizer_reuse_cost_annotations   = true
_result_cache_auto_size_threshold   = 100
_result_cache_auto_time_threshold   = 1000
_optimizer_nested_rollup_for_gset   = 100
_nlj_batching_enabled               = 1
parallel_query_default_dop          = 0
is_recur_flags                      = 0
optimizer_use_invisible_indexes     = false
flashback_data_archive_internal_cursor = 0
_optimizer_extended_stats_usage_control = 192
_parallel_syspls_obey_force         = true
cell_offload_processing             = true
_rdbms_internal_fplib_enabled       = false
db_file_multiblock_read_count       = 128
_bloom_folding_enabled              = true
_mv_generalized_oj_refresh_opt      = true
cell_offload_compaction             = ADAPTIVE
cell_offload_plan_display           = AUTO
_bloom_predicate_offload            = true
_bloom_filter_size                  = 0
_bloom_pushing_max                  = 512
parallel_degree_limit               = 65535
parallel_force_local                = false
parallel_max_degree                 = 8
total_cpu_count                     = 8
_optimizer_coalesce_subqueries      = true
_optimizer_fast_pred_transitivity   = true
_optimizer_fast_access_pred_analysis = true
_optimizer_unnest_disjunctive_subq  = true
_optimizer_unnest_corr_set_subq     = true
_optimizer_distinct_agg_transform   = true
_aggregation_optimization_settings  = 0
_optimizer_connect_by_elim_dups     = true
_optimizer_eliminate_filtering_join = true
_connect_by_use_union_all           = true
dst_upgrade_insert_conv             = true
advanced_queuing_internal_cursor    = 0
_optimizer_unnest_all_subqueries    = true
parallel_autodop                    = 0
parallel_ddldml                     = 0
_parallel_cluster_cache_policy      = adaptive
_parallel_scalability               = 50
iot_internal_cursor                 = 0
_optimizer_instance_count           = 0
_optimizer_connect_by_cb_whr_only   = false
_suppress_scn_chk_for_cqn           = nosuppress_1466
_optimizer_join_factorization       = true
_optimizer_use_cbqt_star_transformation = true
_optimizer_table_expansion          = true
_and_pruning_enabled                = true
_deferred_constant_folding_mode     = DEFAULT
_optimizer_distinct_placement       = true
partition_pruning_internal_cursor   = 0
parallel_hinted                     = none
_sql_compatibility                  = 0
_optimizer_use_feedback             = true
_optimizer_try_st_before_jppd       = true
_dml_frequency_tracking             = false
_optimizer_interleave_jppd          = true
kkb_drop_empty_segments             = 0
_px_partition_scan_enabled          = true
_px_partition_scan_threshold        = 64
_optimizer_false_filter_pred_pullup = true
_bloom_minmax_enabled               = true
only_move_row                       = 0
_optimizer_enable_table_lookup_by_nl = true
parallel_execution_message_size     = 16384
_px_loc_msg_cost                    = 1000
_px_net_msg_cost                    = 10000
_optimizer_generate_transitive_pred = true
_optimizer_cube_join_enabled        = true
_optimizer_filter_pushdown          = true
deferred_segment_creation           = true
_optimizer_outer_join_to_inner      = true
_allow_level_without_connect_by     = false
_max_rwgs_groupings                 = 8192
_optimizer_hybrid_fpwj_enabled      = true
_px_replication_enabled             = true
ilm_filter                          = 0
_optimizer_partial_join_eval        = true
_px_concurrent                      = true
_px_object_sampling_enabled         = true
_px_back_to_parallel                = OFF
_optimizer_unnest_scalar_sq         = true
_optimizer_full_outer_join_to_outer = true
_px_filter_parallelized             = true
_px_filter_skew_handling            = true
_zonemap_use_enabled                = true
_zonemap_control                    = 0
_optimizer_multi_table_outerjoin    = true
_px_groupby_pushdown                = force
_partition_advisor_srs_active       = true
_optimizer_ansi_join_lateral_enhance = true
_px_parallelize_expression          = true
_fast_index_maintenance             = true
_optimizer_ansi_rearchitecture      = true
_optimizer_gather_stats_on_load     = true
ilm_access_tracking                 = 0
ilm_dml_timestamp                   = 0
_px_adaptive_dist_method            = choose
_px_adaptive_dist_method_threshold  = 0
_optimizer_batch_table_access_by_rowid = true
optimizer_adaptive_reporting_only   = false
_optimizer_ads_max_table_count      = 0
_optimizer_ads_time_limit           = 0
_optimizer_ads_use_result_cache     = true
_px_wif_dfo_declumping              = choose
_px_wif_extend_distribution_keys    = true
_px_join_skew_handling              = true
_px_join_skew_ratio                 = 10
_px_join_skew_minfreq               = 30
CLI_internal_cursor                 = 0
_parallel_fault_tolerance_enabled   = false
_parallel_fault_tolerance_threshold = 3
_px_partial_rollup_pushdown         = adaptive
_px_single_server_enabled           = true
_optimizer_dsdir_usage_control      = 0
_px_cpu_autodop_enabled             = true
_px_cpu_process_bandwidth           = 200
_sql_hvshare_threshold              = 0
_px_tq_rowhvs                       = true
_optimizer_use_gtt_session_stats    = true
_optimizer_proc_rate_level          = basic
_px_hybrid_TSM_HWMB_load            = true
_optimizer_use_histograms           = true
PMO_altidx_rebuild                  = 0
_cell_offload_expressions           = true
_cell_materialize_virtual_columns   = true
_cell_materialize_all_expressions   = false
_rowsets_enabled                    = true
_rowsets_target_maxsize             = 524288
_rowsets_max_rows                   = 256
_use_hidden_partitions              = 0
_px_load_monitor_threshold          = 10000
_px_numa_support_enabled            = false
total_processor_group_count         = 1
_adaptive_window_consolidator_enabled = true
_optimizer_strans_adaptive_pruning  = true
_bloom_rm_filter                    = false
_optimizer_null_accepting_semijoin  = true
_long_varchar_allow_IOT             = 0
_parallel_ctas_enabled              = true
_cell_offload_complex_processing    = true
_optimizer_performance_feedback     = off
_optimizer_proc_rate_source         = DEFAULT
_hashops_prefetch_size              = 4
_cell_offload_sys_context           = true
_multi_commit_global_index_maint    = 0
_stat_aggs_one_pass_algorithm       = false
_dbg_scan                           = 0
_oltp_comp_dbg_scan                 = 0
_arch_comp_dbg_scan                 = 0
_optimizer_gather_feedback          = true
_upddel_dba_hash_mask_bits          = 0
_px_pwmr_enabled                    = true
_px_cdb_view_enabled                = true
_bloom_sm_enabled                   = true
_optimizer_cluster_by_rowid         = true
_optimizer_cluster_by_rowid_control = 129
_partition_cdb_view_enabled         = true
_common_data_view_enabled           = true
_pred_push_cdb_view_enabled         = true
_rowsets_cdb_view_enabled           = true
_distinct_agg_optimization_gsets    = choose
_array_cdb_view_enabled             = true
_optimizer_adaptive_plan_control    = 0
_optimizer_adaptive_random_seed     = 0
_optimizer_cbqt_or_expansion        = on
_inmemory_dbg_scan                  = 0
_gby_vector_aggregation_enabled     = true
_optimizer_vector_transformation    = true
_optimizer_vector_fact_dim_ratio    = 10
_key_vector_max_size                = 0
_key_vector_predicate_enabled       = true
_key_vector_predicate_threshold     = 0
_vector_operations_control          = 0
_optimizer_vector_min_fact_rows     = 10000000
parallel_dblink                     = 0
_px_scalable_invdist                = true
_key_vector_offload                 = predicate
_optimizer_aggr_groupby_elim        = true
_optimizer_reduce_groupby_key       = true
_vector_serialize_temp_threshold    = 1000
_always_vector_transformation       = false
_optimizer_cluster_by_rowid_batched = true
_object_link_fixed_enabled          = true
optimizer_inmemory_aware            = true
_optimizer_inmemory_table_expansion = true
_optimizer_inmemory_gen_pushable_preds = true
_optimizer_inmemory_autodop         = true
_optimizer_inmemory_access_path     = true
_optimizer_inmemory_bloom_filter    = true
_parallel_inmemory_min_time_threshold = 1
_parallel_inmemory_time_unit        = 1
_rc_sys_obj_enabled                 = true
_optimizer_nlj_hj_adaptive_join     = true
_indexable_con_id                   = true
_bloom_serial_filter                = on
inmemory_force                      = default
inmemory_query                      = enable
_inmemory_query_scan                = true
_inmemory_query_fetch_by_rowid      = false
_inmemory_pruning                   = on
_px_autodop_pq_overhead             = true
_px_external_table_default_stats    = true
_optimizer_key_vector_aggr_factor   = 75
_optimizer_vector_cost_adj          = 100
_cdb_cross_container                = 65535
_cdb_view_parallel_degree           = 65535
_optimizer_hll_entry                = 4096
_px_cdb_view_join_enabled           = true
inmemory_size                       = 0
_external_table_smart_scan          = hadoop_only
_optimizer_inmemory_minmax_pruning  = true
_approx_cnt_distinct_gby_pushdown   = choose
_approx_cnt_distinct_optimization   = 0
_optimizer_ads_use_partial_results  = true
_query_execution_time_limit         = 0
_optimizer_inmemory_cluster_aware_dop = true
_optimizer_db_blocks_buffers        = 0 KB
_query_rewrite_use_on_query_computation = true
_px_scalable_invdist_mcol           = true
_optimizer_bushy_join               = off
_optimizer_bushy_fact_dim_ratio     = 20
_optimizer_bushy_fact_min_size      = 100000
_optimizer_bushy_cost_factor        = 100
_rmt_for_table_redef_enabled        = true
_optimizer_eliminate_subquery       = true
_sqlexec_cache_aware_hash_join_enabled = true
_zonemap_usage_tracking             = true
_sqlexec_hash_based_distagg_enabled = false
_sqlexec_disable_hash_based_distagg_tiv = false
_sqlexec_hash_based_distagg_ssf_enabled = true
_sqlexec_distagg_optimization_settings = 0
approx_for_aggregation              = false
approx_for_count_distinct           = false
_optimizer_union_all_gsets          = true
_rowsets_use_encoding               = true
_rowsets_max_enc_rows               = 64
_optimizer_enhanced_join_elimination = true
_optimizer_multicol_join_elimination = true
_key_vector_create_pushdown_threshold = 20000
_optimizer_enable_plsql_stats       = true
_recursive_with_parallel            = true
_recursive_with_branch_iterations   = 7
_px_dist_agg_partial_rollup_pushdown = adaptive
_px_adaptive_dist_bypass_enabled    = true
_enable_view_pdb                    = true
_optimizer_key_vector_pruning_enabled = true
_pwise_distinct_enabled             = true
_recursive_with_using_temp_table    = false
_partition_read_only                = true
_sql_alias_scope                    = true
_cdb_view_no_skip_migrate           = false
_approx_perc_sampling_err_rate      = 2
_sqlexec_encoding_aware_hj_enabled  = true
rim_node_exist                      = 0
_enable_containers_subquery         = true
_force_containers_subquery          = false
_cell_offload_vector_groupby        = true
_vector_encoding_mode               = manual
_ds_xt_split_count                  = 1
_ds_sampling_method                 = PROGRESSIVE
_optimizer_ads_use_spd_cache        = true
_optimizer_use_table_scanrate       = HADOOP_ONLY
_optimizer_use_xt_rowid             = true
_xt_sampling_scan_granules          = on
_recursive_with_control             = 0
_sqlexec_use_rwo_aware_expr_analysis = true
_optimizer_band_join_aware          = true
_optimizer_vector_base_dim_fact_factor = 200
approx_for_percentile               = none
_approx_percentile_optimization     = 0
_projection_pushdown                = true
_px_object_sampling                 = 200
_optimizer_adaptive_plans_continuous = false
_optimizer_adaptive_plans_iterative = false
_ds_enable_view_sampling            = true
_optimizer_generate_ptf_implied_preds = true
_optimizer_inmemory_use_stored_stats = AUTO
_cdb_special_old_xplan              = true
uniaud_internal_cursor              = 0
_kd_dbg_control                     = 0
_mv_access_compute_fresh_data       = on
_bloom_filter_ratio                 = 35
_optimizer_control_shard_qry_processing = 65528
containers_parallel_degree          = 65535
sql_from_coordinator                = 0
_xt_sampling_scan_granules_min_granules = 1
_in_memory_cdt                      = LIMITED
_in_memory_cdt_maxpx                = 4
_px_partition_load_dist_threshold   = 64
_px_adaptive_dist_bypass_optimization = 1
_optimizer_interleave_or_expansion  = true
optimizer_adaptive_plans            = true
optimizer_adaptive_statistics       = false
_optimizer_use_feedback_for_join    = false
_optimizer_ads_for_pq               = false
_px_join_skewed_values_count        = 0
optimizer_ignore_parallel_hints     = false
parallel_min_degree                 = 1
_px_nlj_bcast_rr_threshold          = 10
_optimizer_gather_stats_on_load_all = false
_optimizer_gather_stats_on_load_hist = false
_optimizer_allow_all_access_paths   = true
_key_vector_double_enabled          = true
_key_vector_timestamp_enabled       = true
_optimizer_answering_query_using_stats = false
_disable_dblink_optim               = true
_cell_offload_hybrid_processing     = true
_read_optimized_table_lookup        = true
_optimizer_key_vector_payload       = true
_optimizer_vector_fact_payload_ratio = 20
_bloom_pruning_setops_enabled       = true
_bloom_filter_setops_enabled        = true
_key_vector_shared_dgk_ht           = true
_px_pwise_wif_enabled               = true
_sqlexec_reorder_wif_enabled        = true
_px_partition_skew_threshold        = 80
_sqlexec_pwiseops_with_sqlfuncs_enabled = true
_sqlexec_pwiseops_with_binds_enabled = true
_px_shared_hash_join                = false
_px_reuse_server_groups             = multi
_px_join_skew_null_handling         = true
_px_join_skew_use_histogram         = true
_px_join_skew_sampling_time_limit   = 50
_px_join_skew_sampling_percent      = 0
_cdb_view_no_skip_restricted        = false
_inmemory_external_table            = true
_sqlexec_use_kgghash3               = true
_cell_offload_vector_groupby_force  = false
_hcs_enable_pred_push               = true
parallel_dop_doubled                = 0
_optimizer_gather_stats_on_load_index = true
_con_map_sql_enforcement            = true
_uniq_cons_sql_enforcement          = true
_ref_cons_sql_enforcement           = true
_is_lock_table_for_split_merge      = 0
_cell_offload_vector_groupby_fact_key = true
_px_scalable_gby_invdist            = true
_px_dynamic_granules                = true
_px_dynamic_granules_adjust         = 10
_px_hybrid_partition_execution_enabled = true
_px_hybrid_partition_skew_threshold = 10
_optimizer_key_vector_use_max_size  = 1048576
_cell_offload_vector_groupby_withnojoin = true
_key_vector_join_pushdown_enabled   = true
_cell_offload_grand_total           = true
_optimizer_key_vector_payload_dim_aggs = false
_optimizer_use_auto_indexes         = AUTO
_optimizer_use_stats_on_conventional_dml = true
_optimizer_gather_stats_on_conventional_dml = true
_optimizer_use_stats_on_conventional_config = 0
_skip_pset_col_chk                  = 0
_nls_binary                         = false
_optimizer_quarantine_sql           = true
_optimizer_gather_stats_on_conventional_config = 0
_nls_forced_binary                  = 0
_utl32k_mv_query                    = false
_optimizer_auto_index_allow         = AUTO

  ***************************************
  PARAMETERS IN OPT_PARAM HINT
  ****************************
  _optimizer_cbqt_or_expansion        = 'off'
***************************************
Column Usage Monitoring is ON: tracking level = 53
***************************************

Considering Query Transformations on query block SEL$1 (#0)
**************************
Query transformations (QT)
**************************
JF: Checking validity of join factorization for query block SEL$1 (#0)
JF: Bypassed: not a UNION or UNION-ALL query block.
ST: not valid since star transformation parameter is FALSE
TE: Checking validity of table expansion for query block SEL$1 (#0)
TE: Bypassed: No partitioned table in query block.
ORE: Checking validity of OR Expansion for query block SEL$1 (#0)
ORE: Predicate chain before QB validity check - SEL$1
("T1"."M"=:B1 AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=:B2 AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
ORE: Predicate chain after QB validity check - SEL$1
("T1"."M"=:B1 AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=:B2 AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
ORE: bypassed - Disabled by parameter.
VT: Initial VT validity check for query block SEL$1 (#0)
VT: Bypassed: inmemory is disabled.
BJ: Checking validity for bushy join for query block SEL$1 (#0)
invalid because Not enabled by hint/parameter
BJ: Bypassed: Not enabled by hint/parameter.
CBQT bypassed for query block SEL$1 (#0): no complex view, sub-queries or UNION (ALL) queries.
CBQT: Validity checks failed for 2zdcf8df6cnzj.
CSE: Considering common sub-expression elimination in query block SEL$1 (#0)
*************************
Common Subexpression elimination (CSE)
*************************
CSE:     CSE not performed on query block SEL$1 (#0).
OBYE:   Considering Order-by Elimination from view SEL$1 (#0)
***************************
Order-by elimination (OBYE)
***************************
OBYE:     OBYE bypassed: no order by to eliminate.
JE:[V2]   Considering Join Elimination on query block SEL$1 (#0)
*************************
Join Elimination [JE:R 12.2]    
*************************
SQL:******* UNPARSED QUERY IS *******
SELECT NULL "NULL" FROM "PDBADMIN"."L" "L","PDBADMIN"."T1" "T1","PDBADMIN"."T2" "T2" WHERE ("T1"."M"=:B1 AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=:B2 AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
JE:[V2] Query block (0x657ca0e8) before join elimination:
SQL:******* UNPARSED QUERY IS *******
SELECT NULL "NULL" FROM "PDBADMIN"."L" "L","PDBADMIN"."T1" "T1","PDBADMIN"."T2" "T2" WHERE ("T1"."M"=:B1 AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=:B2 AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
JE:[V2]: Try to eliminate T2 by ref. join elim using NTSID
JE:[V2]: Cannot eliminate T2 by ref. join elim - no constr. based join pred(s)
JE:[V2]: Try to eliminate T2 by ref. join elim using NTSID
JE:[V2]: Cannot eliminate T2 by ref. join elim - no constr. based join pred(s)
JE:[V2]: Try to eliminate T1 by ref. join elim using NTSID
JE:[V2]: Cannot eliminate T1 by ref. join elim - no constr. based join pred(s)
JE:[V2]: Try to eliminate T1 by ref. join elim using NTSID
JE:[V2]: Cannot eliminate T1 by ref. join elim - no constr. based join pred(s)
JE:[V2]: Try to eliminate L by ref. join elim using NTSID
JE:[V2]: Cannot eliminate L by ref. join elim - no constr. based join pred(s)
JE:[V2]: Try to eliminate L by ref. join elim using NTSID
JE:[V2]: Cannot eliminate L by ref. join elim - no constr. based join pred(s)
JE:[V2] Query block (0x657ca0e8) after join elimination:
SQL:******* UNPARSED QUERY IS *******
SELECT NULL "NULL" FROM "PDBADMIN"."L" "L","PDBADMIN"."T1" "T1","PDBADMIN"."T2" "T2" WHERE ("T1"."M"=:B1 AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=:B2 AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"

CVM: Considering view merge in query block SEL$1 (#0)
OJE: Begin: find best directive for query block SEL$1 (#0)
OJE: End: finding best directive for query block SEL$1 (#0)
JE:[V2]   Considering Join Elimination on query block SEL$1 (#0)
*************************
Join Elimination [JE:R 12.2]    
*************************
SQL:******* UNPARSED QUERY IS *******
SELECT NULL "NULL" FROM "PDBADMIN"."L" "L","PDBADMIN"."T1" "T1","PDBADMIN"."T2" "T2" WHERE ("T1"."M"=:B1 AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=:B2 AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
JE:[V2] Query block (0x657ca0e8) before join elimination:
SQL:******* UNPARSED QUERY IS *******
SELECT NULL "NULL" FROM "PDBADMIN"."L" "L","PDBADMIN"."T1" "T1","PDBADMIN"."T2" "T2" WHERE ("T1"."M"=:B1 AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=:B2 AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
JE:[V2]: Try to eliminate T2 by ref. join elim using NTSID
JE:[V2]: Cannot eliminate T2 by ref. join elim - no constr. based join pred(s)
JE:[V2]: Try to eliminate T2 by ref. join elim using NTSID
JE:[V2]: Cannot eliminate T2 by ref. join elim - no constr. based join pred(s)
JE:[V2]: Try to eliminate T1 by ref. join elim using NTSID
JE:[V2]: Cannot eliminate T1 by ref. join elim - no constr. based join pred(s)
JE:[V2]: Try to eliminate T1 by ref. join elim using NTSID
JE:[V2]: Cannot eliminate T1 by ref. join elim - no constr. based join pred(s)
JE:[V2]: Try to eliminate L by ref. join elim using NTSID
JE:[V2]: Cannot eliminate L by ref. join elim - no constr. based join pred(s)
JE:[V2]: Try to eliminate L by ref. join elim using NTSID
JE:[V2]: Cannot eliminate L by ref. join elim - no constr. based join pred(s)
JE:[V2] Query block (0x657ca0e8) after join elimination:
SQL:******* UNPARSED QUERY IS *******
SELECT NULL "NULL" FROM "PDBADMIN"."L" "L","PDBADMIN"."T1" "T1","PDBADMIN"."T2" "T2" WHERE ("T1"."M"=:B1 AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=:B2 AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"

query block SEL$1 (#0) unchanged
Considering Query Transformations on query block SEL$1 (#0)
**************************
Query transformations (QT)
**************************
JF: Checking validity of join factorization for query block SEL$1 (#0)
JF: Bypassed: not a UNION or UNION-ALL query block.
ST: not valid since star transformation parameter is FALSE
TE: Checking validity of table expansion for query block SEL$1 (#0)
TE: Bypassed: No partitioned table in query block.
ORE: Checking validity of OR Expansion for query block SEL$1 (#0)
ORE: Predicate chain before QB validity check - SEL$1
("T1"."M"=:B1 AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=:B2 AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
ORE: Predicate chain after QB validity check - SEL$1
("T1"."M"=:B1 AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=:B2 AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
ORE: bypassed - Disabled by parameter.
VT: Initial VT validity check for query block SEL$1 (#0)
VT: Bypassed: inmemory is disabled.
BJ: Checking validity for bushy join for query block SEL$1 (#0)
invalid because Not enabled by hint/parameter
BJ: Bypassed: Not enabled by hint/parameter.
CBQT bypassed for query block SEL$1 (#0): no complex view, sub-queries or UNION (ALL) queries.
CBQT: Validity checks failed for 2zdcf8df6cnzj.
CSE: Considering common sub-expression elimination in query block SEL$1 (#0)
*************************
Common Subexpression elimination (CSE)
*************************
CSE:     CSE not performed on query block SEL$1 (#0).
AAT:   Considering Approximate Aggregate Transformation on query block SEL$1 (#0) 
*******************************************
Approximate Aggregate Transformation (AAT) 
*******************************************
AAT: no exact aggregates transformed
SQE: Trying SQ elimination.
Query after View Removal
******* UNPARSED QUERY IS *******
SELECT NULL "NULL" FROM "PDBADMIN"."L" "L","PDBADMIN"."T1" "T1","PDBADMIN"."T2" "T2" WHERE ("T1"."M"=:B1 AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=:B2 AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
SU: Considering subquery unnesting in query block SEL$1 (#0)
********************
Subquery Unnest (SU)
********************
SJC: Considering set-join conversion in query block SEL$1 (#0)
*************************
Set-Join Conversion (SJC)
*************************
SJC: not performed
DCL: Checking validity of group-by elimination SEL$1 (#0)
DCL: Result of group-by elimination: Invalid
JE:[V2]   Considering Join Elimination on query block SEL$1 (#0)
*************************
Join Elimination [JE:R 12.2]    
*************************
SQL:******* UNPARSED QUERY IS *******
SELECT NULL "NULL" FROM "PDBADMIN"."L" "L","PDBADMIN"."T1" "T1","PDBADMIN"."T2" "T2" WHERE ("T1"."M"=:B1 AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=:B2 AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
JE:[V2] Query block (0x657ca0e8) before join elimination:
SQL:******* UNPARSED QUERY IS *******
SELECT NULL "NULL" FROM "PDBADMIN"."L" "L","PDBADMIN"."T1" "T1","PDBADMIN"."T2" "T2" WHERE ("T1"."M"=:B1 AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=:B2 AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
JE:[V2]: Try to eliminate T2 by ref. join elim using NTSID
JE:[V2]: Cannot eliminate T2 by ref. join elim - no constr. based join pred(s)
JE:[V2]: Try to eliminate T2 by ref. join elim using NTSID
JE:[V2]: Cannot eliminate T2 by ref. join elim - no constr. based join pred(s)
JE:[V2]: Try to eliminate T1 by ref. join elim using NTSID
JE:[V2]: Cannot eliminate T1 by ref. join elim - no constr. based join pred(s)
JE:[V2]: Try to eliminate T1 by ref. join elim using NTSID
JE:[V2]: Cannot eliminate T1 by ref. join elim - no constr. based join pred(s)
JE:[V2]: Try to eliminate L by ref. join elim using NTSID
JE:[V2]: Cannot eliminate L by ref. join elim - no constr. based join pred(s)
JE:[V2]: Try to eliminate L by ref. join elim using NTSID
JE:[V2]: Cannot eliminate L by ref. join elim - no constr. based join pred(s)
JE:[V2] Query block (0x657ca0e8) after join elimination:
SQL:******* UNPARSED QUERY IS *******
SELECT NULL "NULL" FROM "PDBADMIN"."L" "L","PDBADMIN"."T1" "T1","PDBADMIN"."T2" "T2" WHERE ("T1"."M"=:B1 AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=:B2 AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"

PM: Considering predicate move-around in query block SEL$1 (#0)
**************************
Predicate Move-Around (PM)
**************************
PM:     PM bypassed: Outer query contains no views.
PM:     PM bypassed: Outer query contains no views.
isReduceGrByValid:   Group By Validation (Failed).
isReduceGrByValid:   Group By Validation (Failed).
SQT:    SQT bypassed: in a transaction.
query block SEL$1 (#0) unchanged
FPD: Considering simple filter push in query block SEL$1 (#0)
("T1"."M"=TO_NUMBER(:B1) AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=TO_NUMBER(:B2) AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
try to generate transitive predicate from check constraints for query block SEL$1 (#0)
finally: ("T1"."M"=TO_NUMBER(:B1) AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=TO_NUMBER(:B2) AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"

apadrv-start sqlid=3437810310531404785
CSE: Considering common sub-expression elimination in query block SEL$1 (#0)
*************************
Common Subexpression elimination (CSE)
*************************
CSE:     CSE not performed on query block SEL$1 (#0).
  :
    call(in-use=13000, alloc=32712), compile(in-use=239080, alloc=241416), execution(in-use=283520, alloc=284376)

*******************************************
Peeked values of the binds in SQL statement
*******************************************

----- Bind Info (kkscoacd) -----
 Bind#0
  oacdty=01 mxl=32(00) mxlc=00 mal=00 scl=00 pre=00
  oacflg=00 fl2=1010000 frm=01 csi=873 siz=64 off=0
  kxsbbbfp=7f2bac0a56f8  bln=32  avl=00  flg=05
 Bind#1
  oacdty=01 mxl=32(00) mxlc=00 mal=00 scl=00 pre=00
  oacflg=00 fl2=1010000 frm=01 csi=873 siz=0 off=32
  kxsbbbfp=7f2bac0a5718  bln=32  avl=00  flg=01

=====================================
SPD: BEGIN context at statement level
=====================================
Stmt: ******* UNPARSED QUERY IS *******
SELECT NULL "NULL" FROM "PDBADMIN"."L" "L","PDBADMIN"."T1" "T1","PDBADMIN"."T2" "T2" WHERE ("T1"."M"=TO_NUMBER(:B1) AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=TO_NUMBER(:B2) AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
Objects referenced in the statement
  T2[T2] 73648, type = 1
  T1[T1] 73646, type = 1
  L[L] 73644, type = 1
Objects in the hash table
  Hash table Object 73646, type = 1, ownerid = 18118023562266836000:
    No Dynamic Sampling Directives for the object
  Hash table Object 73644, type = 1, ownerid = 18000379995323554144:
    No Dynamic Sampling Directives for the object
  Hash table Object 73648, type = 1, ownerid = 9565287045548730551:
    No Dynamic Sampling Directives for the object
Return code in qosdInitDirCtx: ENBLD
===================================
SPD: END context at statement level
===================================
Final query after transformations:******* UNPARSED QUERY IS *******
SELECT NULL "NULL" FROM "PDBADMIN"."L" "L","PDBADMIN"."T1" "T1","PDBADMIN"."T2" "T2" WHERE ("T1"."M"=TO_NUMBER(:B1) AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=TO_NUMBER(:B2) AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
kkoqbc: optimizing query block SEL$1 (#0)
        
        :
    call(in-use=13344, alloc=32712), compile(in-use=248256, alloc=249448), execution(in-use=292176, alloc=292488)

kkoqbc-subheap (create addr=0x7f2bb11e9750)
****************
QUERY BLOCK TEXT
****************
SELECT /*+ OPT_PARAM('_optimizer_cbqt_or_expansion' 'off') */ null FROM l, t1, t2 WHERE  
(  ( t1.m = :v1 AND t2.c1 BETWEEN 11 AND 12)       OR 
   ( t1.m = :v2 AND t2.c1 = 103 AND t2.c2 = 13  )   )  AND 
    ( l.id = t1.id AND l.id2 = t2.id )
---------------------
QUERY BLOCK SIGNATURE
---------------------
signature (optimizer): qb_name=SEL$1 nbfros=3 flg=0
  fro(0): flg=0 objn=73644 hint_alias="L"@"SEL$1"
  fro(1): flg=0 objn=73646 hint_alias="T1"@"SEL$1"
  fro(2): flg=0 objn=73648 hint_alias="T2"@"SEL$1"

-----------------------------
SYSTEM STATISTICS INFORMATION
-----------------------------
Using dictionary system stats.
  Using NOWORKLOAD Stats
  CPUSPEEDNW: 2467 millions instructions/sec (default is 100)
  IOTFRSPEED: 4096 bytes per millisecond (default is 4096)
  IOSEEKTIM:  10 milliseconds (default is 10)
  MBRC:       NO VALUE blocks (default is 8)

***************************************
BASE STATISTICAL INFORMATION
***********************
Table Stats::
  Table: T2  Alias: T2
  #Rows: 10000  SSZ: 0  LGR: 0  #Blks:  25  AvgRowLen:  10.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#1): ID(NUMBER)
    AvgLen: 4 NDV: 10000 Nulls: 0 Density: 0.000100 Min: 1.000000 Max: 10000.000000
Index Stats::
  Index: T2_C1_C2_ID  Col#: 2 3 1
  LVLS: 1  #LB: 30  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 210.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
  Index: T2_ID  Col#: 1
  LVLS: 1  #LB: 20  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 21.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table: T1  Alias: T1
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: T1_M_ID  Col#: 2 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table:  L  Alias:  L
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
  Column (#2): ID2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: L_ID  Col#: 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
try to generate single-table filter predicates from ORs for query block SEL$1 (#0)
finally: ("T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)) AND ("T2"."C1">=11 AND "T2"."C1"<=12 OR "T2"."C1"=103 AND "T2"."C2"=13) AND ("T1"."M"=TO_NUMBER(:B3) AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=TO_NUMBER(:B4) AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"

=======================================
SPD: BEGIN context at query block level
=======================================
Query Block SEL$1 (#0)
Return code in qosdSetupDirCtx4QB: NOCTX
=====================================
SPD: END context at query block level
=====================================
Access path analysis for L
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for L[L] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Table: L  Alias: L
    Card: Original: 10.000000  Rounded: 10  Computed: 10.000000  Non Adjusted: 10.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                       =   30185.760000
  Access Path: TableScan
    Cost:  3.001020  Resp: 3.001020  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 30186
      Resp_io: 3.000000  Resp_cpu: 30186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: TableScan
         Cost: 3.001020  Degree: 1  Resp: 3.001020  Card: 10.000000  Bytes: 0.000000

Access path analysis for T1
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T1[T1] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE

 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)
  Column (#2): M(NUMBER)
    AvgLen: 3 NDV: 5 Nulls: 0 Density: 0.200000 Min: 0.000000 Max: 4.000000
  Estimated selectivity: 0.200000 , col: #2 
  Table: T1  Alias: T1
    Card: Original: 10.000000  Rounded: 4  Computed: 4.000000  Non Adjusted: 4.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2700.000000 (cpu filter eval) (= 270.000000 (per row) * 10.000000 (#rows))
                       =   32885.760000
  Access Path: TableScan
    Cost:  3.001111  Resp: 3.001111  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 32886
      Resp_io: 3.000000  Resp_cpu: 32886
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 11021
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  2.000372  Resp: 2.000372  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 11021
      Resp_io: 2.000000  Resp_cpu: 11021
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.400000 
    Cost: 1.000508  Resp: 1.000508  Degree: 1
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    Cost: 1.000254  Resp: 1.000254  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    Cost: 1.000254  Resp: 1.000254  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 2.000267, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T1_M_ID
         Cost: 1.000508  Degree: 1  Resp: 1.000508  Card: 4.000000  Bytes: 0.000000

Access path analysis for T2
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T2[T2] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE

 kkecdn: Single Table Predicate: ?? 

  Column (#2): C1(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Column (#3): C2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Estimated selectivity: 0.100000 , col: #3 

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Table: T2  Alias: T2
    Card: Original: 10000.000000  Rounded: 1000  Computed: 1000.025000  Non Adjusted: 1000.025000
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 98.891139, sel = 0.100003 flag = 2048  (OR chain)
      io = 0.000000, cpu = 53.888889, sel = 0.100000 flag = 2049  (AND chain)
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 50.002500, sel = 0.000003 flag = 2048  (AND chain)
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 988911.388889 (cpu filter eval) (= 98.891139 (per row) * 10000.000000 (#rows))
                       =   3066947.388889
  Access Path: TableScan
    Cost:  9.103589  Resp: 9.103589  Degree: 0
      Cost_io: 9.000000  Cost_cpu: 3066947
      Resp_io: 9.000000  Resp_cpu: 3066947
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 2402555
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  10.081149  Resp: 10.081149  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 2402555
      Resp_io: 10.000000  Resp_cpu: 2402555
kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  Access Path: index (FullScan)
    Index: T2_C1_C2_ID
    resc_io: 31.000000  resc_cpu: 2220765
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 31.108410  Resp: 31.108410  Degree: 1
  ****** trying bitmap/domain indexes ******

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 4.000000  resc_cpu: 228486
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    Cost: 4.007717  Resp: 4.007717  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 2.000000  resc_cpu: 14443
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.7778e-06 
    Cost: 2.000488  Resp: 2.000488  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 4.000000  resc_cpu: 228486
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    Cost: 4.007717  Resp: 4.007717  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 2.000000  resc_cpu: 14443
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.7778e-06 
    Cost: 2.000488  Resp: 2.000488  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_C1_C2_ID
      Cost = 5.027447, sel = 0.100000
  Bitmap nodes:
    Used T2_C1_C2_ID
      Cost = 3.000488, sel = 2.7778e-06
  Bitmap nodes:
    Used  bitmap node 
    Used  bitmap node 
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  Access path: Bitmap index - accepted
    Cost: 17.137411 Cost_io: 15.096106 Cost_cpu: 60436590.651545 Sel: 0.100003
    Not Believed to be index-only
  ****** finished trying bitmap/domain indexes ******
******** Begin index join costing ********
 ****** Costing Index T2_C1_C2_ID
  Access Path: index (FullScan)
    Index: T2_C1_C2_ID
    resc_io: 31.000000  resc_cpu: 2220765
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 31.075008  Resp: 31.075008  Degree: 0
******** End index join costing ********
  Best:: AccessPath: TableScan
         Cost: 9.103589  Degree: 1  Resp: 9.103589  Card: 1000.025000  Bytes: 0.000000

***************************************


OPTIMIZER STATISTICS AND COMPUTATIONS
***************************************
GENERAL PLANS
***************************************
Considering cardinality-based initial join order.
Permutations for Starting Table :0
Join order[1]:  T1[T1]#0  L[L]#1  T2[T2]#2

***************
Now joining: L[L]#1
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   1.500000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.500000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.500000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 7.004654  Resp: 7.004654  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 137786
      Resp_io: 7.000000  Resp_cpu: 137786
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001635
          resc: 5.001635  resc_io: 5.000000  resc_cpu: 48409
          resp: 5.001635  resp_io: 5.000000  resc_cpu: 48409
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  10.000000 = outer (10.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 10 Computed: 10.000000
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001590  Resp: 6.001590  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001590 
     resc: 6.001590 resc_io: 4.000000 resc_cpu: 59260769
     resp: 6.001590 resp_io: 4.000000 resp_cpu: 59260769
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021847  Resp: 4.021847  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021847  
     resc: 4.021847 resc_io: 4.000000 resc_cpu: 646829
     resp: 4.021847 resp_io: 4.000000 resp_cpu: 646829
Best:: JoinMethod: Hash
       Cost: 4.021847  Degree: 1  Resp: 4.021847  Card: 10.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 4.021847  Resp: 4.021847  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Cost of predicates:
    io = 0.000000, cpu = 98.891139, sel = 0.100003 flag = 2048  (OR chain)
      io = 0.000000, cpu = 53.888889, sel = 0.100000 flag = 2049  (AND chain)
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 50.002500, sel = 0.000003 flag = 2048  (AND chain)
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 2048  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 2048  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 501305.192404 (cpu filter eval) (= 50.130519 (per row) * 10000.000000 (#rows))
                       =   2579341.192404
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 73.893045  Resp: 73.893045  Degree: 1
      Cost_io: 73.000000  Cost_cpu: 26440241
      Resp_io: 73.000000  Resp_cpu: 26440241
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1914948
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 87.668640  Resp: 87.668640  Degree: 1
      Cost_io: 87.000000  Cost_cpu: 19796313
      Resp_io: 87.000000  Resp_cpu: 19796313
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9342
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.025003  Resp: 14.025003  Degree: 1
      Cost_io: 14.000000  Cost_cpu: 740250
      Resp_io: 14.000000  Resp_cpu: 740250
kkofmx: index filter: ?? 

kkofmx: index filter: ?? 

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Access Path: index (FullScan)
    Index: T2_C1_C2_ID
    resc_io: 31.000000  resc_cpu: 2220765
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    NL Join : Cost: 314.941253  Resp: 314.941253  Degree: 1
      Cost_io: 314.000000  Cost_cpu: 27867527
      Resp_io: 314.000000  Resp_cpu: 27867527
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9342
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.025003  Resp: 14.025003  Degree: 1
      Cost_io: 14.000000  Cost_cpu: 740250
      Resp_io: 14.000000  Resp_cpu: 740250
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.022489  Resp: 4.022489  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 665829
      Resp_io: 4.000000  Resp_cpu: 665829

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 34.096902  Resp: 34.096902  Degree: 1
      Cost_io: 34.000000  Cost_cpu: 2868972
      Resp_io: 34.000000  Resp_cpu: 2868972
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 34.096902  Resp: 34.096902  Degree: 1
      Cost_io: 34.000000  Cost_cpu: 2868972
      Resp_io: 34.000000  Resp_cpu: 2868972
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 4.022535, sel = 9.9900e-04
    Not used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 14.025003
          resc: 14.025003  resc_io: 14.000000  resc_cpu: 740250
          resp: 14.025003  resp_io: 14.000000  resc_cpu: 740250

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  1.998056 = outer (10.000000) * inner (10000.000000) * sel (1.9981e-05)
Join cardinality for HJ/SMJ (no post filters):  99.900100, outer: 10.000000, inner: 10000.000000, sel: 1.9981e-05
Join Card - Rounded: 2 Computed: 1.998056
  Outer table:  L  Alias: L
    resc: 4.021847  card 10.000000  bytes:   deg: 1  resp: 4.021847
  Inner table:  T2  Alias: T2
    resc: 9.103589  card: 1000.025000  bytes:   deg: 1  resp: 9.103589
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 15.140653  Resp: 15.140653  [multiMatchCost=0.000000]
SM Join
  SM cost: 15.140653 
     resc: 15.140653 resc_io: 13.000000 resc_cpu: 63377960
     resp: 15.140653 resp_io: 13.000000 resp_cpu: 63377960
  Outer table:  L  Alias: L
    resc: 4.021847  card 10.000000  bytes:   deg: 1  resp: 4.021847
  Inner table:  T2  Alias: T2
    resc: 9.103589  card: 1000.025000  bytes:   deg: 1  resp: 9.103589
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023694  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 13.149130  Resp: 13.149130  [multiMatchCost=0.000000]
HA Join
  HA cost: 13.149130  
     resc: 13.149130 resc_io: 13.000000 resc_cpu: 4415276
     resp: 13.149130 resp_io: 13.000000 resp_cpu: 4415276
Best:: JoinMethod: Hash
       Cost: 13.149130  Degree: 1  Resp: 13.149130  Card: 1.998056 Bytes: 
***********************
Best so far:  Table#: 0  cost: 1.000508  card: 4.000000  bytes: 24.000000
              Table#: 1  cost: 4.021847  card: 10.000000  bytes: 120.000000
              Table#: 2  cost: 13.149130  card: 1.998056  bytes: 44.000000
***********************
Join order[2]:  T1[T1]#0  T2[T2]#2  L[L]#1

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.250000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 98.891139, sel = 0.100003 flag = 2048  (OR chain)
      io = 0.000000, cpu = 53.888889, sel = 0.100000 flag = 1  (AND chain)
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 50.002500, sel = 0.000003 flag = 0  (AND chain)
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   7.250000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.250000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 1306497.596123 (cpu filter eval) (= 130.649760 (per row) * 10000.000000 (#rows))
                       =   3384533.596123
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 30.457772  Resp: 30.457772  Degree: 1
      Cost_io: 30.000000  Cost_cpu: 13553177
      Resp_io: 30.000000  Resp_cpu: 13553177
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.500000  resc_cpu: 2720141
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 35.368010  Resp: 35.368010  Degree: 1
      Cost_io: 35.000000  Cost_cpu: 10895606
      Resp_io: 35.000000  Resp_cpu: 10895606
kkofmx: index filter: ?? 

kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  Access Path: index (FullScan)
    Index: T2_C1_C2_ID
    resc_io: 31.000000  resc_cpu: 2220765
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    NL Join : Cost: 125.477055  Resp: 125.477055  Degree: 1
      Cost_io: 125.000000  Cost_cpu: 14124092
      Resp_io: 125.000000  Resp_cpu: 14124092
  ****** trying bitmap/domain indexes ******

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 13.030530  Resp: 13.030530  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 903900
      Resp_io: 13.000000  Resp_cpu: 903900
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.7778e-06 
    NL Join : Cost: 5.001612  Resp: 5.001612  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 47729
      Resp_io: 5.000000  Resp_cpu: 47729
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 13.030530  Resp: 13.030530  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 903900
      Resp_io: 13.000000  Resp_cpu: 903900
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.7778e-06 
    NL Join : Cost: 5.001612  Resp: 5.001612  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 47729
      Resp_io: 5.000000  Resp_cpu: 47729
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_C1_C2_ID
      Cost = 14.050268, sel = 0.100000
  Bitmap nodes:
    Used T2_C1_C2_ID
      Cost = 6.001612, sel = 2.7778e-06
  Bitmap nodes:
    Used  bitmap node 
    Used  bitmap node 
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  Access path: Bitmap index - accepted
    Cost: 57.489688 Cost_io: 55.384423 Cost_cpu: 62330245.858971 Sel: 0.100003
    Not Believed to be index-only
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 30.457772
          resc: 30.457772  resc_io: 30.000000  resc_cpu: 13553177
          resp: 30.457772  resp_io: 30.000000  resc_cpu: 13553177
  Estimated selectivity: 0.200000 , col: #2 

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  2000.054444 = outer (10.000000) * inner (10000.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  100000.000000, outer: 10.000000, inner: 10000.000000, sel: 0.020001
Join Card - Rounded: 2000 Computed: 2000.054444
Join order aborted: cost > best plan cost
***********************
Join order[3]:  L[L]#1  T1[T1]#0  T2[T2]#2

***************
Now joining: T1[T1]#0
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 770.000000 (cpu filter eval) (= 77.000000 (per row) * 10.000000 (#rows))
                       =   30955.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 15.011475  Resp: 15.011475  Degree: 1
      Cost_io: 15.000000  Cost_cpu: 339743
      Resp_io: 15.000000  Resp_cpu: 339743
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9091
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.004090  Resp: 7.004090  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 121100
      Resp_io: 7.000000  Resp_cpu: 121100
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup (#1, Index) T1_M_ID
    Col#: 1 2    CorStregth: 5.00
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 13.005965  Resp: 13.005965  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 176615
      Resp_io: 13.000000  Resp_cpu: 176615
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.001374  Resp: 3.001374  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 40686
      Resp_io: 3.000000  Resp_cpu: 40686

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.001374  Resp: 3.001374  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 40686
      Resp_io: 3.000000  Resp_cpu: 40686
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 13.003560  Resp: 13.003560  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 105400
      Resp_io: 13.000000  Resp_cpu: 105400
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 3.001375, sel = 0.020000
    Used T1_M_ID
      Cost = 3.001375, sel = 0.020000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 7.004090
          resc: 7.004090  resc_io: 7.000000  resc_cpu: 121100
          resp: 7.004090  resp_io: 7.000000  resc_cpu: 121100
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  10.000000 = outer (10.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 10 Computed: 10.000000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 6.001590  Resp: 6.001590  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001590 
     resc: 6.001590 resc_io: 4.000000 resc_cpu: 59260769
     resp: 6.001590 resp_io: 4.000000 resp_cpu: 59260769
SM Join (with index on outer)
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 2.000000  resc_cpu: 18443
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 2.000623  Resp: 2.000623  Degree: 1
  Outer table:  L  Alias: L
    resc: 2.000623  card 10.000000  bytes:   deg: 1  resp: 2.000623
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 4.001143  Resp: 4.001143  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020330  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021878  Resp: 4.021878  [multiMatchCost=0.000020]
HA Join
  HA cost: 4.021878  
     resc: 4.021878 resc_io: 4.000000 resc_cpu: 647729
     resp: 4.021878 resp_io: 4.000000 resp_cpu: 647729
Best:: JoinMethod: SortMerge
       Cost: 4.001143  Degree: 1  Resp: 4.001143  Card: 10.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 4.001143  Resp: 4.001143  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 98.891139, sel = 0.100003 flag = 2048  (OR chain)
      io = 0.000000, cpu = 53.888889, sel = 0.100000 flag = 1  (AND chain)
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 50.002500, sel = 0.000003 flag = 0  (AND chain)
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 501305.192404 (cpu filter eval) (= 50.130519 (per row) * 10000.000000 (#rows))
                       =   2579341.192404
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 73.872341  Resp: 73.872341  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 55434100
      Resp_io: 72.000000  Resp_cpu: 55434100
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1914948
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 87.647936  Resp: 87.647936  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 48790172
      Resp_io: 86.000000  Resp_cpu: 48790172
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9342
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.004299  Resp: 14.004299  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 29734109
      Resp_io: 13.000000  Resp_cpu: 29734109
kkofmx: index filter: ?? 

kkofmx: index filter: ?? 

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Access Path: index (FullScan)
    Index: T2_C1_C2_ID
    resc_io: 31.000000  resc_cpu: 2220765
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    NL Join : Cost: 314.920549  Resp: 314.920549  Degree: 1
      Cost_io: 313.000000  Cost_cpu: 56861386
      Resp_io: 313.000000  Resp_cpu: 56861386
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9342
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.004299  Resp: 14.004299  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 29734109
      Resp_io: 13.000000  Resp_cpu: 29734109
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001785  Resp: 4.001785  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 29659688
      Resp_io: 3.000000  Resp_cpu: 29659688

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 34.076198  Resp: 34.076198  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 31862831
      Resp_io: 33.000000  Resp_cpu: 31862831
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 34.076198  Resp: 34.076198  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 31862831
      Resp_io: 33.000000  Resp_cpu: 31862831
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 4.001830, sel = 9.9900e-04
    Not used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 14.004299
          resc: 14.004299  resc_io: 13.000000  resc_cpu: 29734109
          resp: 14.004299  resp_io: 13.000000  resc_cpu: 29734109

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  1.998056 = outer (10.000000) * inner (10000.000000) * sel (1.9981e-05)
Join cardinality for HJ/SMJ (no post filters):  99.900100, outer: 10.000000, inner: 10000.000000, sel: 1.9981e-05
Join Card - Rounded: 2 Computed: 1.998056
  Outer table:  T1  Alias: T1
    resc: 4.001143  card 10.000000  bytes:   deg: 1  resp: 4.001143
  Inner table:  T2  Alias: T2
    resc: 9.103589  card: 1000.025000  bytes:   deg: 1  resp: 9.103589
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 15.119948  Resp: 15.119948  [multiMatchCost=0.000000]
SM Join
  SM cost: 15.119948 
     resc: 15.119948 resc_io: 12.000000 resc_cpu: 92371819
     resp: 15.119948 resp_io: 12.000000 resp_cpu: 92371819
  Outer table:  T1  Alias: T1
    resc: 4.001143  card 10.000000  bytes:   deg: 1  resp: 4.001143
  Inner table:  T2  Alias: T2
    resc: 9.103589  card: 1000.025000  bytes:   deg: 1  resp: 9.103589
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023694  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 13.128426  Resp: 13.128426  [multiMatchCost=0.000000]
HA Join
  HA cost: 13.128426  
     resc: 13.128426 resc_io: 12.000000 resc_cpu: 33409135
     resp: 13.128426 resp_io: 12.000000 resp_cpu: 33409135
Best:: JoinMethod: Hash
       Cost: 13.128426  Degree: 1  Resp: 13.128426  Card: 1.998056 Bytes: 
***********************
Best so far:  Table#: 1  cost: 2.000623  card: 10.000000  bytes: 60.000000
              Table#: 0  cost: 4.001143  card: 10.000000  bytes: 120.000000
              Table#: 2  cost: 13.128426  card: 1.998056  bytes: 44.000000
***********************
Join order[4]:  L[L]#1  T2[T2]#2  T1[T1]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 98.891139, sel = 0.100003 flag = 2048  (OR chain)
      io = 0.000000, cpu = 53.888889, sel = 0.100000 flag = 1  (AND chain)
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 50.002500, sel = 0.000003 flag = 0  (AND chain)
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500987.923465 (cpu filter eval) (= 50.098792 (per row) * 10000.000000 (#rows))
                       =   2579023.923465
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 72.872110  Resp: 72.872110  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 25820425
      Resp_io: 72.000000  Resp_cpu: 25820425
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1914631
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 86.647705  Resp: 86.647705  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 19176497
      Resp_io: 86.000000  Resp_cpu: 19176497
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9310
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004164  Resp: 13.004164  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 123289
      Resp_io: 13.000000  Resp_cpu: 123289
kkofmx: index filter: ?? 

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Access Path: index (FullScan)
    Index: T2_C1_C2_ID
    resc_io: 31.000000  resc_cpu: 2220765
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    NL Join : Cost: 313.920318  Resp: 313.920318  Degree: 1
      Cost_io: 313.000000  Cost_cpu: 27247711
      Resp_io: 313.000000  Resp_cpu: 27247711
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9310
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004164  Resp: 13.004164  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 123289
      Resp_io: 13.000000  Resp_cpu: 123289
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.001661  Resp: 3.001661  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 49186
      Resp_io: 3.000000  Resp_cpu: 49186

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 33.076075  Resp: 33.076075  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 2252329
      Resp_io: 33.000000  Resp_cpu: 2252329
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 33.076075  Resp: 33.076075  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 2252329
      Resp_io: 33.000000  Resp_cpu: 2252329
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 3.001707, sel = 9.9900e-04
    Not used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 13.004164
          resc: 13.004164  resc_io: 13.000000  resc_cpu: 123289
          resp: 13.004164  resp_io: 13.000000  resc_cpu: 123289

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  99.900100 = outer (10.000000) * inner (10000.000000) * sel (1.0000e-04)
Join cardinality for NL:  10.000000, outer: 10.000000, inner: 10000.000000, sel: 1.0000e-04
Join cardinality without POSQ:  10.000000, outer: 10.000000, inner: 10000.000000, sel: 1.0000e-04
Join Card - Rounded: 100 Computed: 99.900100
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 9.103589  card: 1000.025000  bytes:   deg: 1  resp: 9.103589
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 14.119825  Resp: 14.119825  [multiMatchCost=0.000000]
SM Join
  SM cost: 14.119825 
     resc: 14.119825 resc_io: 12.000000 resc_cpu: 62761317
     resp: 14.119825 resp_io: 12.000000 resp_cpu: 62761317
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 9.103589  card: 1000.025000  bytes:   deg: 1  resp: 9.103589
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023694  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 12.128303  Resp: 12.128303  [multiMatchCost=0.000000]
HA Join
  HA cost: 12.128303  
     resc: 12.128303 resc_io: 12.000000 resc_cpu: 3798633
     resp: 12.128303 resp_io: 12.000000 resp_cpu: 3798633
Best:: JoinMethod: Hash
       Cost: 12.128303  Degree: 1  Resp: 12.128303  Card: 99.900100 Bytes: 

***************
Now joining: T1[T1]#0
***************
NL Join
  Outer table: Card: 99.900100  Cost: 12.128303  Resp: 12.128303  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.100000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.100000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.100000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 822.978415 (cpu filter eval) (= 82.297841 (per row) * 10.000000 (#rows))
                       =   31008.738415
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 122.233038  Resp: 122.233038  Degree: 1
      Cost_io: 122.000000  Cost_cpu: 6899507
      Resp_io: 122.000000  Resp_cpu: 6899507
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.290000  resc_cpu: 9144
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 41.159189  Resp: 41.159189  Degree: 1
      Cost_io: 41.000000  Cost_cpu: 4713075
      Resp_io: 41.000000  Resp_cpu: 4713075
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.004000 
    NL Join : Cost: 112.179906  Resp: 112.179906  Degree: 1
      Cost_io: 112.000000  Cost_cpu: 5326437
      Resp_io: 112.000000  Resp_cpu: 5326437
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 12.131849  Resp: 12.131849  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 3903633
      Resp_io: 12.000000  Resp_cpu: 3903633

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 12.131849  Resp: 12.131849  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 3903633
      Resp_io: 12.000000  Resp_cpu: 3903633
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 112.153707  Resp: 112.153707  Degree: 1
      Cost_io: 112.000000  Cost_cpu: 4550777
      Resp_io: 112.000000  Resp_cpu: 4550777
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 12.131850, sel = 0.020000
    Used T1_M_ID
      Cost = 12.131850, sel = 0.020000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 41.159189
          resc: 41.159189  resc_io: 41.000000  resc_cpu: 4713075
          resp: 41.159189  resp_io: 41.000000  resc_cpu: 4713075
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  1.998056 = outer (99.900100) * inner (10.000000) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  99.900100, outer: 99.900100, inner: 10.000000, sel: 0.002000
Join cardinality without POSQ:  0.200005, outer: 10.000000, inner: 10.000000, sel: 0.002000
Join Card - Rounded: 2 Computed: 1.998056
  Outer table:  T2  Alias: T2
    resc: 12.128303  card 99.900100  bytes:   deg: 1  resp: 12.128303
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:            100
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29636775
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 15.129834  Resp: 15.129834  [multiMatchCost=0.000000]
SM Join
  SM cost: 15.129834 
     resc: 15.129834 resc_io: 13.000000 resc_cpu: 63057653
     resp: 15.129834 resp_io: 13.000000 resp_cpu: 63057653
  Outer table:  T2  Alias: T2
    resc: 12.128303  card 99.900100  bytes:   deg: 1  resp: 12.128303
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020786  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 13.149921  Resp: 13.149921  [multiMatchCost=0.000324]
HA Join
  HA cost: 13.149921  
     resc: 13.149921 resc_io: 13.000000 resc_cpu: 4438676
     resp: 13.149921 resp_io: 13.000000 resp_cpu: 4438676
Plan cardinality mismatch: best card= 1.99805638806   curr card= 0.20000544444
Join order aborted: cost > best plan cost
***********************
Join order[5]:  T2[T2]#2  T1[T1]#0  L[L]#1

***************
Now joining: T1[T1]#0
***************
NL Join
  Outer table: Card: 1000.025000  Cost: 9.103589  Resp: 9.103589  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.085000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   1.085000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.085000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 3229.784148 (cpu filter eval) (= 322.978415 (per row) * 10.000000 (#rows))
                       =   33415.544148
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 1095.232232  Resp: 1095.232232  Degree: 1
      Cost_io: 1094.000000  Cost_cpu: 36482492
      Resp_io: 1094.000000  Resp_cpu: 36482492
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.272000  resc_cpu: 11551
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 281.493743  Resp: 281.493743  Degree: 1
      Cost_io: 281.000000  Cost_cpu: 14618172
      Resp_io: 281.000000  Resp_cpu: 14618172
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 1009.654583  Resp: 1009.654583  Degree: 1
      Cost_io: 1009.000000  Cost_cpu: 19380140
      Resp_io: 1009.000000  Resp_cpu: 19380140
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 1009.357633  Resp: 1009.357633  Degree: 1
      Cost_io: 1009.000000  Cost_cpu: 10588387
      Resp_io: 1009.000000  Resp_cpu: 10588387
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 1009.357633  Resp: 1009.357633  Degree: 1
      Cost_io: 1009.000000  Cost_cpu: 10588387
      Resp_io: 1009.000000  Resp_cpu: 10588387
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 2999.300898, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 281.493743
          resc: 281.493743  resc_io: 281.000000  resc_cpu: 14618172
          resp: 281.493743  resp_io: 281.000000  resc_cpu: 14618172

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  2000.054444 = outer (10000.000000) * inner (10.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  100000.000000, outer: 10000.000000, inner: 10.000000, sel: 0.020001
Join Card - Rounded: 2000 Computed: 2000.054444
Join order aborted: cost > best plan cost
***********************
Join order[6]:  T2[T2]#2  L[L]#1  T1[T1]#0

***************
Now joining: L[L]#1
***************
NL Join
  Outer table: Card: 1000.025000  Cost: 9.103589  Resp: 9.103589  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   1.085000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   1.085000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.085000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 1095.140031  Resp: 1095.140031  Degree: 1
      Cost_io: 1094.000000  Cost_cpu: 33752707
      Resp_io: 1094.000000  Resp_cpu: 33752707
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 1095.140031
          resc: 1095.140031  resc_io: 1094.000000  resc_cpu: 33752707
          resp: 1095.140031  resp_io: 1094.000000  resc_cpu: 33752707

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  99.900100 = outer (10000.000000) * inner (10.000000) * sel (9.9900e-04)
Join Card - Rounded: 100 Computed: 99.900100
  Outer table:  T2  Alias: T2
    resc: 9.103589  card 1000.025000  bytes:   deg: 1  resp: 9.103589
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 14.119825  Resp: 14.119825  [multiMatchCost=0.000000]
SM Join
  SM cost: 14.119825 
     resc: 14.119825 resc_io: 12.000000 resc_cpu: 62761317
     resp: 14.119825 resp_io: 12.000000 resp_cpu: 62761317
SM Join (with index on outer)
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (FullScan)
    Index: T2_ID
    resc_io: 42.000000  resc_cpu: 4700088
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 42.158750  Resp: 42.158750  Degree: 1
  Outer table:  T2  Alias: T2
    resc: 42.158750  card 1000.025000  bytes:   deg: 1  resp: 42.158750
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 46.159820  Resp: 46.159820  [multiMatchCost=0.000000]
  Outer table:  T2  Alias: T2
    resc: 9.103589  card 1000.025000  bytes:   deg: 1  resp: 9.103589
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.025366  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 3  probefrag: 1  ppasses: 1
  Hash join: Resc: 12.130278  Resp: 12.130278  [multiMatchCost=0.000304]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 9.103589  card: 1000.025000  bytes:   deg: 1  resp: 9.103589
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023694  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 12.128303  Resp: 12.128303  [multiMatchCost=0.000000]
HA Join
  HA cost: 12.128303 swapped 
     resc: 12.128303 resc_io: 12.000000 resc_cpu: 3798633
     resp: 12.128303 resp_io: 12.000000 resp_cpu: 3798633
Best:: JoinMethod: Hash
       Cost: 12.128303  Degree: 1  Resp: 12.128303  Card: 99.900100 Bytes: 

***************
Now joining: T1[T1]#0
***************
NL Join
  Outer table: Card: 99.900100  Cost: 12.128303  Resp: 12.128303  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.100000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.100000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.100000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 822.978415 (cpu filter eval) (= 82.297841 (per row) * 10.000000 (#rows))
                       =   31008.738415
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 122.233038  Resp: 122.233038  Degree: 1
      Cost_io: 122.000000  Cost_cpu: 6899507
      Resp_io: 122.000000  Resp_cpu: 6899507
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.290000  resc_cpu: 9144
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 41.159189  Resp: 41.159189  Degree: 1
      Cost_io: 41.000000  Cost_cpu: 4713075
      Resp_io: 41.000000  Resp_cpu: 4713075
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.004000 
    NL Join : Cost: 112.179906  Resp: 112.179906  Degree: 1
      Cost_io: 112.000000  Cost_cpu: 5326437
      Resp_io: 112.000000  Resp_cpu: 5326437
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 12.131849  Resp: 12.131849  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 3903633
      Resp_io: 12.000000  Resp_cpu: 3903633

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 12.131849  Resp: 12.131849  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 3903633
      Resp_io: 12.000000  Resp_cpu: 3903633
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 112.153707  Resp: 112.153707  Degree: 1
      Cost_io: 112.000000  Cost_cpu: 4550777
      Resp_io: 112.000000  Resp_cpu: 4550777
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 12.131850, sel = 0.020000
    Used T1_M_ID
      Cost = 12.131850, sel = 0.020000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 41.159189
          resc: 41.159189  resc_io: 41.000000  resc_cpu: 4713075
          resp: 41.159189  resp_io: 41.000000  resc_cpu: 4713075
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  1.998056 = outer (99.900100) * inner (10.000000) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  99.900100, outer: 99.900100, inner: 10.000000, sel: 0.002000
Join Card - Rounded: 2 Computed: 1.998056
  Outer table:  L  Alias: L
    resc: 12.128303  card 99.900100  bytes:   deg: 1  resp: 12.128303
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:            100
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29636775
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 15.129834  Resp: 15.129834  [multiMatchCost=0.000000]
SM Join
  SM cost: 15.129834 
     resc: 15.129834 resc_io: 13.000000 resc_cpu: 63057653
     resp: 15.129834 resp_io: 13.000000 resp_cpu: 63057653
  Outer table:  L  Alias: L
    resc: 12.128303  card 99.900100  bytes:   deg: 1  resp: 12.128303
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020786  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 13.149921  Resp: 13.149921  [multiMatchCost=0.000324]
HA Join
  HA cost: 13.149921  
     resc: 13.149921 resc_io: 13.000000 resc_cpu: 4438676
     resp: 13.149921 resp_io: 13.000000 resp_cpu: 4438676
Plan cardinality mismatch: best card= 1.99805638806   curr card= 1.99805638806
Join order aborted: cost > best plan cost
***********************
(newjo-stop-1) k:0, spcnt:0, perm:6, maxperm:2000

*********************************
Number of join permutations tried: 6
*********************************
Consider using bloom filter between T1[T1] and T2[T2] with ??
kkoBloomFilter: join (lcdn:10 rcdn:1000 jcdn:2 limit:5000)
kkopqSingleJoinBloomNdv:Compute bloom ndv for lfro:L[L] and rfro:T2[T2] swap:no
kkopqSingleJoinBloomNdv: predCnt:#1 col1:(bndv:10 ndv:10) and col2:(bndv:10000 ndv:1001) creatorNDV:10.0 userNDV:10000.0
kkopqSingleJoinBloomNdv:Compute bloom ndv for lfro:T1[T1] and rfro:T2[T2] swap:no
kkopqComputeBloomNdv: predCnt:1 creatorNdv:10.0 userNdv:10000.0 singleTblPred:yes
kkoBloomFilter: join ndv:10 reduction:0.010000 (limit:0.500000)  accepted, but final decision will be made in code generation
Enumerating distribution method (advanced)
--- Distribution method for 
join between L[L](serial) and T1[T1](serial); jm = 8; right side access path = IndexRange
---- serial Sort-Merge-Join -> NONE
--- Distribution method for 
join between T1[T1](serial) and T2[T2](serial); jm = 1; right side access path = TableScan
---- serial Hash-Join -> NONE

(newjo-save)    [2 1 0 ]
LORE: Trying or-Expansion on query block SEL$1 (#0)

LORE: ******** Next OR predicate ********

LORE: Trying or-Expansion on query block SEL$1 (#0) on OR chain:
id=0  predicate=("T2"."C1">=11 AND "T2"."C1"<=12 OR "T2"."C1"=103 AND "T2"."C2"=13) AND ("T1"."M"=TO_NUMBER(:B1) AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=TO_NUMBER(:B2) AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"

LORE: ******** OR-branching ********

LORE: or-expansion-subheap (create addr=0x7f2bac107e48)
****************
QUERY BLOCK TEXT
****************
SELECT /*+ OPT_PARAM('_optimizer_cbqt_or_expansion' 'off') */ null FROM l, t1, t2 WHERE  
(  ( t1.m = :v1 AND t2.c1 BETWEEN 11 AND 12)       OR 
   ( t1.m = :v2 AND t2.c1 = 103 AND t2.c2 = 13  )   )  AND 
    ( l.id = t1.id AND l.id2 = t2.id )
---------------------
QUERY BLOCK SIGNATURE
---------------------
signature (optimizer): qb_name=SEL$1 nbfros=3 flg=0
  fro(0): flg=0 objn=73644 hint_alias="L"@"SEL$1"
  fro(1): flg=0 objn=73646 hint_alias="T1"@"SEL$1"
  fro(2): flg=0 objn=73648 hint_alias="T2"@"SEL$1"

-----------------------------
SYSTEM STATISTICS INFORMATION
-----------------------------
Using dictionary system stats.
  Using NOWORKLOAD Stats
  CPUSPEEDNW: 2467 millions instructions/sec (default is 100)
  IOTFRSPEED: 4096 bytes per millisecond (default is 4096)
  IOSEEKTIM:  10 milliseconds (default is 10)
  MBRC:       NO VALUE blocks (default is 8)

***************************************
BASE STATISTICAL INFORMATION
***********************
Table Stats::
  Table: T2  Alias: T2
  #Rows: 10000  SSZ: 0  LGR: 0  #Blks:  25  AvgRowLen:  10.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): C1(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#3): C2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#1): ID(NUMBER)
    AvgLen: 4 NDV: 10000 Nulls: 0 Density: 0.000100 Min: 1.000000 Max: 10000.000000
Index Stats::
  Index: T2_C1_C2_ID  Col#: 2 3 1
  LVLS: 1  #LB: 30  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 210.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
  Index: T2_ID  Col#: 1
  LVLS: 1  #LB: 20  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 21.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table: T1  Alias: T1
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): M(NUMBER)
    AvgLen: 3 NDV: 5 Nulls: 0 Density: 0.200000 Min: 0.000000 Max: 4.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: T1_M_ID  Col#: 2 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table:  L  Alias:  L
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
  Column (#2): ID2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: L_ID  Col#: 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
=======================================
SPD: BEGIN context at query block level
=======================================
Query Block SEL$1 (#0)
Return code in qosdSetupDirCtx4QB: NOCTX
=====================================
SPD: END context at query block level
=====================================
Access path analysis for L
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for L[L] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Table: L  Alias: L
    Card: Original: 10.000000  Rounded: 10  Computed: 10.000000  Non Adjusted: 10.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                       =   30185.760000
  Access Path: TableScan
    Cost:  3.001020  Resp: 3.001020  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 30186
      Resp_io: 3.000000  Resp_cpu: 30186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: TableScan
         Cost: 3.001020  Degree: 1  Resp: 3.001020  Card: 10.000000  Bytes: 0.000000

Access path analysis for T1
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T1[T1] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE

 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)
  Estimated selectivity: 0.200000 , col: #2 
  Table: T1  Alias: T1
    Card: Original: 10.000000  Rounded: 4  Computed: 4.000000  Non Adjusted: 4.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2700.000000 (cpu filter eval) (= 270.000000 (per row) * 10.000000 (#rows))
                       =   32885.760000
  Access Path: TableScan
    Cost:  3.001111  Resp: 3.001111  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 32886
      Resp_io: 3.000000  Resp_cpu: 32886
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 11021
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  2.000372  Resp: 2.000372  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 11021
      Resp_io: 2.000000  Resp_cpu: 11021
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.400000 
    Cost: 1.000508  Resp: 1.000508  Degree: 1
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    Cost: 1.000254  Resp: 1.000254  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    Cost: 1.000254  Resp: 1.000254  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 2.000267, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T1_M_ID
         Cost: 1.000508  Degree: 1  Resp: 1.000508  Card: 4.000000  Bytes: 0.000000

Access path analysis for T2
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T2[T2] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE


 kkecdn: Single Table Predicate:"T2"."C1">=11
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1"<=12
  Estimated selectivity: 1.000000 , col: #2 
  Table: T2  Alias: T2
    Card: Original: 10000.000000  Rounded: 1000  Computed: 1000.000000  Non Adjusted: 1000.000000
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   1898036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   1898036.000000 (scan (Disk))
                         + 538888.888889 (cpu filter eval) (= 53.888889 (per row) * 10000.000000 (#rows))
                       =   2436924.888889
  Access Path: TableScan
    Cost:  9.082310  Resp: 9.082310  Degree: 0
      Cost_io: 9.000000  Cost_cpu: 2436925
      Resp_io: 9.000000  Resp_cpu: 2436925
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1952532
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  10.065949  Resp: 10.065949  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 1952532
      Resp_io: 10.000000  Resp_cpu: 1952532
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 4.000000  resc_cpu: 228486
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    Cost: 4.007717  Resp: 4.007717  Degree: 1
  ****** trying bitmap/domain indexes ******

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 4.000000  resc_cpu: 228486
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    Cost: 4.007717  Resp: 4.007717  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 4.000000  resc_cpu: 228486
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    Cost: 4.007717  Resp: 4.007717  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_C1_C2_ID
      Cost = 5.027447, sel = 0.100000
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T2_C1_C2_ID
         Cost: 4.007717  Degree: 1  Resp: 4.007717  Card: 1000.000000  Bytes: 0.000000

(newjo-restore) [2 1 0 ]
***************************************


OPTIMIZER STATISTICS AND COMPUTATIONS
PJE:  Bypassed; QB is undergoing OR expansion SEL$1 (#0)
***************************************
GENERAL PLANS
***************************************
Considering cardinality-based initial join order.
Permutations for Starting Table :0
Join order[1]:  L[L]#0  T1[T1]#1  T2[T2]#2

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 770.000000 (cpu filter eval) (= 77.000000 (per row) * 10.000000 (#rows))
                       =   30955.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 15.011475  Resp: 15.011475  Degree: 1
      Cost_io: 15.000000  Cost_cpu: 339743
      Resp_io: 15.000000  Resp_cpu: 339743
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9091
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.004090  Resp: 7.004090  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 121100
      Resp_io: 7.000000  Resp_cpu: 121100
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 13.005965  Resp: 13.005965  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 176615
      Resp_io: 13.000000  Resp_cpu: 176615
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.001374  Resp: 3.001374  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 40686
      Resp_io: 3.000000  Resp_cpu: 40686

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.001374  Resp: 3.001374  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 40686
      Resp_io: 3.000000  Resp_cpu: 40686
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 13.003560  Resp: 13.003560  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 105400
      Resp_io: 13.000000  Resp_cpu: 105400
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 3.001375, sel = 0.020000
    Used T1_M_ID
      Cost = 3.001375, sel = 0.020000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 7.004090
          resc: 7.004090  resc_io: 7.000000  resc_cpu: 121100
          resp: 7.004090  resp_io: 7.000000  resc_cpu: 121100
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  10.000000 = outer (10.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 10 Computed: 10.000000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 6.001590  Resp: 6.001590  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001590 
     resc: 6.001590 resc_io: 4.000000 resc_cpu: 59260769
     resp: 6.001590 resp_io: 4.000000 resp_cpu: 59260769
SM Join (with index on outer)
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 2.000000  resc_cpu: 17943
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 2.000606  Resp: 2.000606  Degree: 1
  Outer table:  L  Alias: L
    resc: 2.000606  card 10.000000  bytes:   deg: 1  resp: 2.000606
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 4.001126  Resp: 4.001126  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020330  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021878  Resp: 4.021878  [multiMatchCost=0.000020]
HA Join
  HA cost: 4.021878  
     resc: 4.021878 resc_io: 4.000000 resc_cpu: 647729
     resp: 4.021878 resp_io: 4.000000 resp_cpu: 647729
Best:: JoinMethod: SortMerge
       Cost: 4.001126  Degree: 1  Resp: 4.001126  Card: 10.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 4.001126  Resp: 4.001126  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500747.036082 (cpu filter eval) (= 50.074704 (per row) * 10000.000000 (#rows))
                       =   2578783.036082
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 73.872135  Resp: 73.872135  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 55428018
      Resp_io: 72.000000  Resp_cpu: 55428018
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1914390
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 87.647730  Resp: 87.647730  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 48784090
      Resp_io: 86.000000  Resp_cpu: 48784090
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9286
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.004263  Resp: 14.004263  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 29733050
      Resp_io: 13.000000  Resp_cpu: 29733050
kkofmx: index filter: ?? 

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 2.0001e-07 
    NL Join : Cost: 34.093177  Resp: 34.093177  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 32365504
      Resp_io: 33.000000  Resp_cpu: 32365504
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9286
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.004263  Resp: 14.004263  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 29733050
      Resp_io: 13.000000  Resp_cpu: 29733050
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001768  Resp: 4.001768  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 29659188
      Resp_io: 3.000000  Resp_cpu: 29659188

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 34.076181  Resp: 34.076181  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 31862331
      Resp_io: 33.000000  Resp_cpu: 31862331
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 4.001814, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 35.095940, sel = 0.100000
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 14.004263
          resc: 14.004263  resc_io: 13.000000  resc_cpu: 29733050
          resp: 14.004263  resp_io: 13.000000  resc_cpu: 29733050
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.200005 = outer (10.000000) * inner (1000.000000) * sel (2.0001e-05)
Join cardinality for HJ/SMJ (no post filters):  10.000000, outer: 10.000000, inner: 1000.000000, sel: 2.0001e-05
Join Card - Rounded: 1 Computed: 0.200005
  Outer table:  T1  Alias: T1
    resc: 4.001126  card 10.000000  bytes:   deg: 1  resp: 4.001126
  Inner table:  T2  Alias: T2
    resc: 4.007717  card: 1000.000000  bytes:   deg: 1  resp: 4.007717
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 10.024060  Resp: 10.024060  [multiMatchCost=0.000000]
SM Join
  SM cost: 10.024060 
     resc: 10.024060 resc_io: 7.000000 resc_cpu: 89532858
     resp: 10.024060 resp_io: 7.000000 resp_cpu: 89532858
  Outer table:  T1  Alias: T1
    resc: 4.001126  card 10.000000  bytes:   deg: 1  resp: 4.001126
  Inner table:  T2  Alias: T2
    resc: 4.007717  card: 1000.000000  bytes:   deg: 1  resp: 4.007717
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023694  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 8.032537  Resp: 8.032537  [multiMatchCost=0.000000]
HA Join
  HA cost: 8.032537  
     resc: 8.032537 resc_io: 7.000000 resc_cpu: 30570174
     resp: 8.032537 resp_io: 7.000000 resp_cpu: 30570174
Best:: JoinMethod: Hash
       Cost: 8.032537  Degree: 1  Resp: 8.032537  Card: 0.200005 Bytes: 
***********************
Best so far:  Table#: 0  cost: 2.000606  card: 10.000000  bytes: 60.000000
              Table#: 1  cost: 4.001126  card: 10.000000  bytes: 120.000000
              Table#: 2  cost: 8.032537  card: 0.200005  bytes: 22.000000
***********************
Join order[2]:  L[L]#0  T2[T2]#2  T1[T1]#1

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   1898036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2065  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   1898036.000000 (scan (Disk))
                         + 500538.350538 (cpu filter eval) (= 50.053835 (per row) * 10000.000000 (#rows))
                       =   2398574.350538
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 72.811161  Resp: 72.811161  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 24015929
      Resp_io: 72.000000  Resp_cpu: 24015929
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1914182
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 86.647553  Resp: 86.647553  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 19172001
      Resp_io: 86.000000  Resp_cpu: 19172001
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9265
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004149  Resp: 13.004149  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122839
      Resp_io: 13.000000  Resp_cpu: 122839
kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 1.0000e-05 
    NL Join : Cost: 33.092963  Resp: 33.092963  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 2752329
      Resp_io: 33.000000  Resp_cpu: 2752329
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9265
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004149  Resp: 13.004149  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122839
      Resp_io: 13.000000  Resp_cpu: 122839
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.001661  Resp: 3.001661  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 49186
      Resp_io: 3.000000  Resp_cpu: 49186

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 33.076075  Resp: 33.076075  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 2252329
      Resp_io: 33.000000  Resp_cpu: 2252329
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 33.076075  Resp: 33.076075  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 2252329
      Resp_io: 33.000000  Resp_cpu: 2252329
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 3.001707, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 34.095833, sel = 0.100000
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 13.004149
          resc: 13.004149  resc_io: 13.000000  resc_cpu: 122839
          resp: 13.004149  resp_io: 13.000000  resc_cpu: 122839
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  10.000000 = outer (10.000000) * inner (1000.000000) * sel (0.001000)
Join Card - Rounded: 10 Computed: 10.000000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 4.007717  card: 1000.000000  bytes:   deg: 1  resp: 4.007717
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 9.023953  Resp: 9.023953  [multiMatchCost=0.000000]
SM Join
  SM cost: 9.023953 
     resc: 9.023953 resc_io: 7.000000 resc_cpu: 59922856
     resp: 9.023953 resp_io: 7.000000 resp_cpu: 59922856
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 4.007717  card: 1000.000000  bytes:   deg: 1  resp: 4.007717
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023694  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 7.032431  Resp: 7.032431  [multiMatchCost=0.000000]
HA Join
  HA cost: 7.032431  
     resc: 7.032431 resc_io: 7.000000 resc_cpu: 960172
     resp: 7.032431 resp_io: 7.000000 resp_cpu: 960172
Best:: JoinMethod: Hash
       Cost: 7.032431  Degree: 1  Resp: 7.032431  Card: 10.000000 Bytes: 

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 10.000000  Cost: 7.032431  Resp: 7.032431  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 822.978415 (cpu filter eval) (= 82.297841 (per row) * 10.000000 (#rows))
                       =   31008.738415
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 19.042904  Resp: 19.042904  Degree: 1
      Cost_io: 19.000000  Cost_cpu: 1270259
      Resp_io: 19.000000  Resp_cpu: 1270259
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9144
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 11.035519  Resp: 11.035519  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1051616
      Resp_io: 11.000000  Resp_cpu: 1051616
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.004000 
    NL Join : Cost: 17.037591  Resp: 17.037591  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 1112952
      Resp_io: 17.000000  Resp_cpu: 1112952
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 7.032785  Resp: 7.032785  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 970672
      Resp_io: 7.000000  Resp_cpu: 970672

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 7.032785  Resp: 7.032785  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 970672
      Resp_io: 7.000000  Resp_cpu: 970672
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 17.034971  Resp: 17.034971  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 1035386
      Resp_io: 17.000000  Resp_cpu: 1035386
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 7.032786, sel = 0.020000
    Used T1_M_ID
      Cost = 7.032786, sel = 0.020000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 11.035519
          resc: 11.035519  resc_io: 11.000000  resc_cpu: 1051616
          resp: 11.035519  resp_io: 11.000000  resc_cpu: 1051616
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.200005 = outer (10.000000) * inner (10.000000) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  10.000000, outer: 10.000000, inner: 10.000000, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.200005
  Outer table:  T2  Alias: T2
    resc: 7.032431  card 10.000000  bytes:   deg: 1  resp: 7.032431
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 10.033002  Resp: 10.033002  [multiMatchCost=0.000000]
SM Join
  SM cost: 10.033002 
     resc: 10.033002 resc_io: 8.000000 resc_cpu: 60190755
     resp: 10.033002 resp_io: 8.000000 resp_cpu: 60190755
  Outer table:  T2  Alias: T2
    resc: 7.032431  card 10.000000  bytes:   deg: 1  resp: 7.032431
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020330  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 8.053289  Resp: 8.053289  [multiMatchCost=0.000020]
HA Join
  HA cost: 8.053289  
     resc: 8.053289 resc_io: 8.000000 resc_cpu: 1577714
     resp: 8.053289 resp_io: 8.000000 resp_cpu: 1577714
Plan cardinality mismatch: best card= 0.20000544444   curr card= 0.20000544444
Join order aborted: cost > best plan cost
***********************
Join order[3]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   1.500000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.500000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.500000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 7.004654  Resp: 7.004654  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 137786
      Resp_io: 7.000000  Resp_cpu: 137786
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001635
          resc: 5.001635  resc_io: 5.000000  resc_cpu: 48409
          resp: 5.001635  resp_io: 5.000000  resc_cpu: 48409
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  10.000000 = outer (10.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 10 Computed: 10.000000
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001590  Resp: 6.001590  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001590 
     resc: 6.001590 resc_io: 4.000000 resc_cpu: 59260769
     resp: 6.001590 resp_io: 4.000000 resp_cpu: 59260769
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021847  Resp: 4.021847  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021847  
     resc: 4.021847 resc_io: 4.000000 resc_cpu: 646829
     resp: 4.021847 resp_io: 4.000000 resp_cpu: 646829
Best:: JoinMethod: Hash
       Cost: 4.021847  Degree: 1  Resp: 4.021847  Card: 10.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 4.021847  Resp: 4.021847  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500747.036082 (cpu filter eval) (= 50.074704 (per row) * 10000.000000 (#rows))
                       =   2578783.036082
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 73.892856  Resp: 73.892856  Degree: 1
      Cost_io: 73.000000  Cost_cpu: 26434659
      Resp_io: 73.000000  Resp_cpu: 26434659
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1914390
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 87.668451  Resp: 87.668451  Degree: 1
      Cost_io: 87.000000  Cost_cpu: 19790731
      Resp_io: 87.000000  Resp_cpu: 19790731
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9286
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.024984  Resp: 14.024984  Degree: 1
      Cost_io: 14.000000  Cost_cpu: 739691
      Resp_io: 14.000000  Resp_cpu: 739691
kkofmx: index filter: ?? 

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 2.0001e-07 
    NL Join : Cost: 34.113897  Resp: 34.113897  Degree: 1
      Cost_io: 34.000000  Cost_cpu: 3372144
      Resp_io: 34.000000  Resp_cpu: 3372144
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9286
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.024984  Resp: 14.024984  Degree: 1
      Cost_io: 14.000000  Cost_cpu: 739691
      Resp_io: 14.000000  Resp_cpu: 739691
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.022489  Resp: 4.022489  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 665829
      Resp_io: 4.000000  Resp_cpu: 665829

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 34.096902  Resp: 34.096902  Degree: 1
      Cost_io: 34.000000  Cost_cpu: 2868972
      Resp_io: 34.000000  Resp_cpu: 2868972
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 4.022535, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 35.116662, sel = 0.100000
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 14.024984
          resc: 14.024984  resc_io: 14.000000  resc_cpu: 739691
          resp: 14.024984  resp_io: 14.000000  resc_cpu: 739691
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.200005 = outer (10.000000) * inner (1000.000000) * sel (2.0001e-05)
Join cardinality for HJ/SMJ (no post filters):  10.000000, outer: 10.000000, inner: 1000.000000, sel: 2.0001e-05
Join Card - Rounded: 1 Computed: 0.200005
  Outer table:  L  Alias: L
    resc: 4.021847  card 10.000000  bytes:   deg: 1  resp: 4.021847
  Inner table:  T2  Alias: T2
    resc: 4.007717  card: 1000.000000  bytes:   deg: 1  resp: 4.007717
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 10.044781  Resp: 10.044781  [multiMatchCost=0.000000]
SM Join
  SM cost: 10.044781 
     resc: 10.044781 resc_io: 8.000000 resc_cpu: 60539498
     resp: 10.044781 resp_io: 8.000000 resp_cpu: 60539498
  Outer table:  L  Alias: L
    resc: 4.021847  card 10.000000  bytes:   deg: 1  resp: 4.021847
  Inner table:  T2  Alias: T2
    resc: 4.007717  card: 1000.000000  bytes:   deg: 1  resp: 4.007717
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023694  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 8.053258  Resp: 8.053258  [multiMatchCost=0.000000]
HA Join
  HA cost: 8.053258  
     resc: 8.053258 resc_io: 8.000000 resc_cpu: 1576814
     resp: 8.053258 resp_io: 8.000000 resp_cpu: 1576814
Join order aborted: cost > best plan cost
***********************
Join order[4]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.250000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2065  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   7.250000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.250000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 747783.118333 (cpu filter eval) (= 74.778312 (per row) * 10000.000000 (#rows))
                       =   2825819.118333
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 30.382287  Resp: 30.382287  Degree: 1
      Cost_io: 30.000000  Cost_cpu: 11318319
      Resp_io: 30.000000  Resp_cpu: 11318319
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.500000  resc_cpu: 2161426
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 35.292525  Resp: 35.292525  Degree: 1
      Cost_io: 35.000000  Cost_cpu: 8660748
      Resp_io: 35.000000  Resp_cpu: 8660748
kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.002000 
    NL Join : Cost: 13.073436  Resp: 13.073436  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 2174213
      Resp_io: 13.000000  Resp_cpu: 2174213
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 13.073436
          resc: 13.073436  resc_io: 13.000000  resc_cpu: 2174213
          resp: 13.073436  resp_io: 13.000000  resc_cpu: 2174213
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  200.005444 = outer (10.000000) * inner (1000.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  10000.000000, outer: 10.000000, inner: 1000.000000, sel: 0.020001
Join Card - Rounded: 200 Computed: 200.005444
Join order aborted: cost > best plan cost
***********************
Join order[5]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 1000.000000  Cost: 4.007717  Resp: 4.007717  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   1.085000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   1.085000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.085000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 1090.044159  Resp: 1090.044159  Degree: 1
      Cost_io: 1089.000000  Cost_cpu: 30914246
      Resp_io: 1089.000000  Resp_cpu: 30914246
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 1090.044159
          resc: 1090.044159  resc_io: 1089.000000  resc_cpu: 30914246
          resp: 1090.044159  resp_io: 1089.000000  resc_cpu: 30914246
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  10.000000 = outer (1000.000000) * inner (10.000000) * sel (0.001000)
Join Card - Rounded: 10 Computed: 10.000000
  Outer table:  T2  Alias: T2
    resc: 4.007717  card 1000.000000  bytes:   deg: 1  resp: 4.007717
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 9.023953  Resp: 9.023953  [multiMatchCost=0.000000]
SM Join
  SM cost: 9.023953 
     resc: 9.023953 resc_io: 7.000000 resc_cpu: 59922856
     resp: 9.023953 resp_io: 7.000000 resp_cpu: 59922856
  Outer table:  T2  Alias: T2
    resc: 4.007717  card 1000.000000  bytes:   deg: 1  resp: 4.007717
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.025366  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 3  probefrag: 1  ppasses: 1
  Hash join: Resc: 7.034103  Resp: 7.034103  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 4.007717  card: 1000.000000  bytes:   deg: 1  resp: 4.007717
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023694  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 7.032431  Resp: 7.032431  [multiMatchCost=0.000000]
HA Join
  HA cost: 7.032431 swapped 
     resc: 7.032431 resc_io: 7.000000 resc_cpu: 960172
     resp: 7.032431 resp_io: 7.000000 resp_cpu: 960172
Best:: JoinMethod: Hash
       Cost: 7.032431  Degree: 1  Resp: 7.032431  Card: 10.000000 Bytes: 

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 10.000000  Cost: 7.032431  Resp: 7.032431  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2080  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 822.978415 (cpu filter eval) (= 82.297841 (per row) * 10.000000 (#rows))
                       =   31008.738415
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 19.042904  Resp: 19.042904  Degree: 1
      Cost_io: 19.000000  Cost_cpu: 1270259
      Resp_io: 19.000000  Resp_cpu: 1270259
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9144
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 11.035519  Resp: 11.035519  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1051616
      Resp_io: 11.000000  Resp_cpu: 1051616
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.004000 
    NL Join : Cost: 17.037591  Resp: 17.037591  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 1112952
      Resp_io: 17.000000  Resp_cpu: 1112952
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 7.032785  Resp: 7.032785  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 970672
      Resp_io: 7.000000  Resp_cpu: 970672

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 7.032785  Resp: 7.032785  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 970672
      Resp_io: 7.000000  Resp_cpu: 970672
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 17.034971  Resp: 17.034971  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 1035386
      Resp_io: 17.000000  Resp_cpu: 1035386
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 7.032786, sel = 0.020000
    Used T1_M_ID
      Cost = 7.032786, sel = 0.020000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 11.035519
          resc: 11.035519  resc_io: 11.000000  resc_cpu: 1051616
          resp: 11.035519  resp_io: 11.000000  resc_cpu: 1051616
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.200005 = outer (10.000000) * inner (10.000000) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  10.000000, outer: 10.000000, inner: 10.000000, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.200005
  Outer table:  L  Alias: L
    resc: 7.032431  card 10.000000  bytes:   deg: 1  resp: 7.032431
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 10.033002  Resp: 10.033002  [multiMatchCost=0.000000]
SM Join
  SM cost: 10.033002 
     resc: 10.033002 resc_io: 8.000000 resc_cpu: 60190755
     resp: 10.033002 resp_io: 8.000000 resp_cpu: 60190755
  Outer table:  L  Alias: L
    resc: 7.032431  card 10.000000  bytes:   deg: 1  resp: 7.032431
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020330  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 8.053289  Resp: 8.053289  [multiMatchCost=0.000020]
HA Join
  HA cost: 8.053289  
     resc: 8.053289 resc_io: 8.000000 resc_cpu: 1577714
     resp: 8.053289 resp_io: 8.000000 resp_cpu: 1577714
Plan cardinality mismatch: best card= 0.20000544444   curr card= 0.20000544444
Join order aborted: cost > best plan cost
***********************
Join order[6]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 1000.000000  Cost: 4.007717  Resp: 4.007717  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.085000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   1.085000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.085000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 3229.784148 (cpu filter eval) (= 322.978415 (per row) * 10.000000 (#rows))
                       =   33415.544148
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 1090.136360  Resp: 1090.136360  Degree: 1
      Cost_io: 1089.000000  Cost_cpu: 33644030
      Resp_io: 1089.000000  Resp_cpu: 33644030
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.272000  resc_cpu: 11551
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 276.397871  Resp: 276.397871  Degree: 1
      Cost_io: 276.000000  Cost_cpu: 11779710
      Resp_io: 276.000000  Resp_cpu: 11779710
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 1004.558711  Resp: 1004.558711  Degree: 1
      Cost_io: 1004.000000  Cost_cpu: 16541679
      Resp_io: 1004.000000  Resp_cpu: 16541679
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 1004.261761  Resp: 1004.261761  Degree: 1
      Cost_io: 1004.000000  Cost_cpu: 7749926
      Resp_io: 1004.000000  Resp_cpu: 7749926
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 1004.261761  Resp: 1004.261761  Degree: 1
      Cost_io: 1004.000000  Cost_cpu: 7749926
      Resp_io: 1004.000000  Resp_cpu: 7749926
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 2974.538568, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 276.397871
          resc: 276.397871  resc_io: 276.000000  resc_cpu: 11779710
          resp: 276.397871  resp_io: 276.000000  resc_cpu: 11779710
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  200.005444 = outer (1000.000000) * inner (10.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  10000.000000, outer: 1000.000000, inner: 10.000000, sel: 0.020001
Join Card - Rounded: 200 Computed: 200.005444
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :1
Join order[7]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 1000.000000  Cost: 4.007717  Resp: 4.007717  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   1.085000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   1.085000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.085000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 1090.044159  Resp: 1090.044159  Degree: 1
      Cost_io: 1089.000000  Cost_cpu: 30914246
      Resp_io: 1089.000000  Resp_cpu: 30914246
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 1090.044159
          resc: 1090.044159  resc_io: 1089.000000  resc_cpu: 30914246
          resp: 1090.044159  resp_io: 1089.000000  resc_cpu: 30914246
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  10.000000 = outer (1000.000000) * inner (10.000000) * sel (0.001000)
Join Card - Rounded: 10 Computed: 10.000000
  Outer table:  T2  Alias: T2
    resc: 4.007717  card 1000.000000  bytes:   deg: 1  resp: 4.007717
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 9.023953  Resp: 9.023953  [multiMatchCost=0.000000]
SM Join
  SM cost: 9.023953 
     resc: 9.023953 resc_io: 7.000000 resc_cpu: 59922856
     resp: 9.023953 resp_io: 7.000000 resp_cpu: 59922856
  Outer table:  T2  Alias: T2
    resc: 4.007717  card 1000.000000  bytes:   deg: 1  resp: 4.007717
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.025366  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 3  probefrag: 1  ppasses: 1
  Hash join: Resc: 7.034103  Resp: 7.034103  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 4.007717  card: 1000.000000  bytes:   deg: 1  resp: 4.007717
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023694  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 7.032431  Resp: 7.032431  [multiMatchCost=0.000000]
HA Join
  HA cost: 7.032431 swapped 
     resc: 7.032431 resc_io: 7.000000 resc_cpu: 960172
     resp: 7.032431 resp_io: 7.000000 resp_cpu: 960172
Best:: JoinMethod: Hash
       Cost: 7.032431  Degree: 1  Resp: 7.032431  Card: 10.000000 Bytes: 

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 10.000000  Cost: 7.032431  Resp: 7.032431  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 822.978415 (cpu filter eval) (= 82.297841 (per row) * 10.000000 (#rows))
                       =   31008.738415
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 19.042904  Resp: 19.042904  Degree: 1
      Cost_io: 19.000000  Cost_cpu: 1270259
      Resp_io: 19.000000  Resp_cpu: 1270259
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9144
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 11.035519  Resp: 11.035519  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1051616
      Resp_io: 11.000000  Resp_cpu: 1051616
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.004000 
    NL Join : Cost: 17.037591  Resp: 17.037591  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 1112952
      Resp_io: 17.000000  Resp_cpu: 1112952
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 7.032785  Resp: 7.032785  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 970672
      Resp_io: 7.000000  Resp_cpu: 970672

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 7.032785  Resp: 7.032785  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 970672
      Resp_io: 7.000000  Resp_cpu: 970672
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 17.034971  Resp: 17.034971  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 1035386
      Resp_io: 17.000000  Resp_cpu: 1035386
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 7.032786, sel = 0.020000
    Used T1_M_ID
      Cost = 7.032786, sel = 0.020000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 11.035519
          resc: 11.035519  resc_io: 11.000000  resc_cpu: 1051616
          resp: 11.035519  resp_io: 11.000000  resc_cpu: 1051616
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.200005 = outer (10.000000) * inner (10.000000) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  10.000000, outer: 10.000000, inner: 10.000000, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.200005
  Outer table:  L  Alias: L
    resc: 7.032431  card 10.000000  bytes:   deg: 1  resp: 7.032431
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 10.033002  Resp: 10.033002  [multiMatchCost=0.000000]
SM Join
  SM cost: 10.033002 
     resc: 10.033002 resc_io: 8.000000 resc_cpu: 60190755
     resp: 10.033002 resp_io: 8.000000 resp_cpu: 60190755
  Outer table:  L  Alias: L
    resc: 7.032431  card 10.000000  bytes:   deg: 1  resp: 7.032431
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020330  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 8.053289  Resp: 8.053289  [multiMatchCost=0.000020]
HA Join
  HA cost: 8.053289  
     resc: 8.053289 resc_io: 8.000000 resc_cpu: 1577714
     resp: 8.053289 resp_io: 8.000000 resp_cpu: 1577714
Plan cardinality mismatch: best card= 0.20000544444   curr card= 0.20000544444
Join order aborted: cost > best plan cost
***********************
Join order[8]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 1000.000000  Cost: 4.007717  Resp: 4.007717  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.085000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   1.085000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.085000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 3229.784148 (cpu filter eval) (= 322.978415 (per row) * 10.000000 (#rows))
                       =   33415.544148
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 1090.136360  Resp: 1090.136360  Degree: 1
      Cost_io: 1089.000000  Cost_cpu: 33644030
      Resp_io: 1089.000000  Resp_cpu: 33644030
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.272000  resc_cpu: 11551
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 276.397871  Resp: 276.397871  Degree: 1
      Cost_io: 276.000000  Cost_cpu: 11779710
      Resp_io: 276.000000  Resp_cpu: 11779710
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 1004.558711  Resp: 1004.558711  Degree: 1
      Cost_io: 1004.000000  Cost_cpu: 16541679
      Resp_io: 1004.000000  Resp_cpu: 16541679
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 1004.261761  Resp: 1004.261761  Degree: 1
      Cost_io: 1004.000000  Cost_cpu: 7749926
      Resp_io: 1004.000000  Resp_cpu: 7749926
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 1004.261761  Resp: 1004.261761  Degree: 1
      Cost_io: 1004.000000  Cost_cpu: 7749926
      Resp_io: 1004.000000  Resp_cpu: 7749926
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 2974.538568, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 276.397871
          resc: 276.397871  resc_io: 276.000000  resc_cpu: 11779710
          resp: 276.397871  resp_io: 276.000000  resc_cpu: 11779710
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  200.005444 = outer (1000.000000) * inner (10.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  10000.000000, outer: 1000.000000, inner: 10.000000, sel: 0.020001
Join Card - Rounded: 200 Computed: 200.005444
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :2
Join order[9]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   1.500000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.500000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.500000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 7.004654  Resp: 7.004654  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 137786
      Resp_io: 7.000000  Resp_cpu: 137786
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001635
          resc: 5.001635  resc_io: 5.000000  resc_cpu: 48409
          resp: 5.001635  resp_io: 5.000000  resc_cpu: 48409
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  10.000000 = outer (10.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 10 Computed: 10.000000
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001590  Resp: 6.001590  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001590 
     resc: 6.001590 resc_io: 4.000000 resc_cpu: 59260769
     resp: 6.001590 resp_io: 4.000000 resp_cpu: 59260769
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021847  Resp: 4.021847  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021847  
     resc: 4.021847 resc_io: 4.000000 resc_cpu: 646829
     resp: 4.021847 resp_io: 4.000000 resp_cpu: 646829
Best:: JoinMethod: Hash
       Cost: 4.021847  Degree: 1  Resp: 4.021847  Card: 10.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 4.021847  Resp: 4.021847  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2065  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500747.036082 (cpu filter eval) (= 50.074704 (per row) * 10000.000000 (#rows))
                       =   2578783.036082
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 73.892856  Resp: 73.892856  Degree: 1
      Cost_io: 73.000000  Cost_cpu: 26434659
      Resp_io: 73.000000  Resp_cpu: 26434659
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1914390
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 87.668451  Resp: 87.668451  Degree: 1
      Cost_io: 87.000000  Cost_cpu: 19790731
      Resp_io: 87.000000  Resp_cpu: 19790731
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9286
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.024984  Resp: 14.024984  Degree: 1
      Cost_io: 14.000000  Cost_cpu: 739691
      Resp_io: 14.000000  Resp_cpu: 739691
kkofmx: index filter: ?? 

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 2.0001e-07 
    NL Join : Cost: 34.113897  Resp: 34.113897  Degree: 1
      Cost_io: 34.000000  Cost_cpu: 3372144
      Resp_io: 34.000000  Resp_cpu: 3372144
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9286
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.024984  Resp: 14.024984  Degree: 1
      Cost_io: 14.000000  Cost_cpu: 739691
      Resp_io: 14.000000  Resp_cpu: 739691
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.022489  Resp: 4.022489  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 665829
      Resp_io: 4.000000  Resp_cpu: 665829

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 34.096902  Resp: 34.096902  Degree: 1
      Cost_io: 34.000000  Cost_cpu: 2868972
      Resp_io: 34.000000  Resp_cpu: 2868972
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 4.022535, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 35.116662, sel = 0.100000
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 14.024984
          resc: 14.024984  resc_io: 14.000000  resc_cpu: 739691
          resp: 14.024984  resp_io: 14.000000  resc_cpu: 739691
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.200005 = outer (10.000000) * inner (1000.000000) * sel (2.0001e-05)
Join cardinality for HJ/SMJ (no post filters):  10.000000, outer: 10.000000, inner: 1000.000000, sel: 2.0001e-05
Join Card - Rounded: 1 Computed: 0.200005
  Outer table:  L  Alias: L
    resc: 4.021847  card 10.000000  bytes:   deg: 1  resp: 4.021847
  Inner table:  T2  Alias: T2
    resc: 4.007717  card: 1000.000000  bytes:   deg: 1  resp: 4.007717
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 10.044781  Resp: 10.044781  [multiMatchCost=0.000000]
SM Join
  SM cost: 10.044781 
     resc: 10.044781 resc_io: 8.000000 resc_cpu: 60539498
     resp: 10.044781 resp_io: 8.000000 resp_cpu: 60539498
  Outer table:  L  Alias: L
    resc: 4.021847  card 10.000000  bytes:   deg: 1  resp: 4.021847
  Inner table:  T2  Alias: T2
    resc: 4.007717  card: 1000.000000  bytes:   deg: 1  resp: 4.007717
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023694  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 8.053258  Resp: 8.053258  [multiMatchCost=0.000000]
HA Join
  HA cost: 8.053258  
     resc: 8.053258 resc_io: 8.000000 resc_cpu: 1576814
     resp: 8.053258 resp_io: 8.000000 resp_cpu: 1576814
Join order aborted: cost > best plan cost
***********************
Join order[10]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.250000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2065  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   7.250000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.250000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 747783.118333 (cpu filter eval) (= 74.778312 (per row) * 10000.000000 (#rows))
                       =   2825819.118333
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 30.382287  Resp: 30.382287  Degree: 1
      Cost_io: 30.000000  Cost_cpu: 11318319
      Resp_io: 30.000000  Resp_cpu: 11318319
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.500000  resc_cpu: 2161426
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 35.292525  Resp: 35.292525  Degree: 1
      Cost_io: 35.000000  Cost_cpu: 8660748
      Resp_io: 35.000000  Resp_cpu: 8660748
kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.002000 
    NL Join : Cost: 13.073436  Resp: 13.073436  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 2174213
      Resp_io: 13.000000  Resp_cpu: 2174213
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 13.073436
          resc: 13.073436  resc_io: 13.000000  resc_cpu: 2174213
          resp: 13.073436  resp_io: 13.000000  resc_cpu: 2174213
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  200.005444 = outer (10.000000) * inner (1000.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  10000.000000, outer: 10.000000, inner: 1000.000000, sel: 0.020001
Join Card - Rounded: 200 Computed: 200.005444
Join order aborted: cost > best plan cost
***********************
Join order[11]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 1000.000000  Cost: 4.007717  Resp: 4.007717  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   1.085000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   1.085000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.085000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 1090.044159  Resp: 1090.044159  Degree: 1
      Cost_io: 1089.000000  Cost_cpu: 30914246
      Resp_io: 1089.000000  Resp_cpu: 30914246
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 1090.044159
          resc: 1090.044159  resc_io: 1089.000000  resc_cpu: 30914246
          resp: 1090.044159  resp_io: 1089.000000  resc_cpu: 30914246
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  10.000000 = outer (1000.000000) * inner (10.000000) * sel (0.001000)
Join Card - Rounded: 10 Computed: 10.000000
  Outer table:  T2  Alias: T2
    resc: 4.007717  card 1000.000000  bytes:   deg: 1  resp: 4.007717
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 9.023953  Resp: 9.023953  [multiMatchCost=0.000000]
SM Join
  SM cost: 9.023953 
     resc: 9.023953 resc_io: 7.000000 resc_cpu: 59922856
     resp: 9.023953 resp_io: 7.000000 resp_cpu: 59922856
  Outer table:  T2  Alias: T2
    resc: 4.007717  card 1000.000000  bytes:   deg: 1  resp: 4.007717
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.025366  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 3  probefrag: 1  ppasses: 1
  Hash join: Resc: 7.034103  Resp: 7.034103  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 4.007717  card: 1000.000000  bytes:   deg: 1  resp: 4.007717
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023694  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 7.032431  Resp: 7.032431  [multiMatchCost=0.000000]
HA Join
  HA cost: 7.032431 swapped 
     resc: 7.032431 resc_io: 7.000000 resc_cpu: 960172
     resp: 7.032431 resp_io: 7.000000 resp_cpu: 960172
Best:: JoinMethod: Hash
       Cost: 7.032431  Degree: 1  Resp: 7.032431  Card: 10.000000 Bytes: 

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 10.000000  Cost: 7.032431  Resp: 7.032431  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2080  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 822.978415 (cpu filter eval) (= 82.297841 (per row) * 10.000000 (#rows))
                       =   31008.738415
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 19.042904  Resp: 19.042904  Degree: 1
      Cost_io: 19.000000  Cost_cpu: 1270259
      Resp_io: 19.000000  Resp_cpu: 1270259
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9144
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 11.035519  Resp: 11.035519  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1051616
      Resp_io: 11.000000  Resp_cpu: 1051616
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.004000 
    NL Join : Cost: 17.037591  Resp: 17.037591  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 1112952
      Resp_io: 17.000000  Resp_cpu: 1112952
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 7.032785  Resp: 7.032785  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 970672
      Resp_io: 7.000000  Resp_cpu: 970672

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 7.032785  Resp: 7.032785  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 970672
      Resp_io: 7.000000  Resp_cpu: 970672
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 17.034971  Resp: 17.034971  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 1035386
      Resp_io: 17.000000  Resp_cpu: 1035386
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 7.032786, sel = 0.020000
    Used T1_M_ID
      Cost = 7.032786, sel = 0.020000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 11.035519
          resc: 11.035519  resc_io: 11.000000  resc_cpu: 1051616
          resp: 11.035519  resp_io: 11.000000  resc_cpu: 1051616
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.200005 = outer (10.000000) * inner (10.000000) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  10.000000, outer: 10.000000, inner: 10.000000, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.200005
  Outer table:  L  Alias: L
    resc: 7.032431  card 10.000000  bytes:   deg: 1  resp: 7.032431
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 10.033002  Resp: 10.033002  [multiMatchCost=0.000000]
SM Join
  SM cost: 10.033002 
     resc: 10.033002 resc_io: 8.000000 resc_cpu: 60190755
     resp: 10.033002 resp_io: 8.000000 resp_cpu: 60190755
  Outer table:  L  Alias: L
    resc: 7.032431  card 10.000000  bytes:   deg: 1  resp: 7.032431
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020330  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 8.053289  Resp: 8.053289  [multiMatchCost=0.000020]
HA Join
  HA cost: 8.053289  
     resc: 8.053289 resc_io: 8.000000 resc_cpu: 1577714
     resp: 8.053289 resp_io: 8.000000 resp_cpu: 1577714
Plan cardinality mismatch: best card= 0.20000544444   curr card= 0.20000544444
Join order aborted: cost > best plan cost
***********************
Join order[12]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 1000.000000  Cost: 4.007717  Resp: 4.007717  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.085000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   1.085000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.085000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 3229.784148 (cpu filter eval) (= 322.978415 (per row) * 10.000000 (#rows))
                       =   33415.544148
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 1090.136360  Resp: 1090.136360  Degree: 1
      Cost_io: 1089.000000  Cost_cpu: 33644030
      Resp_io: 1089.000000  Resp_cpu: 33644030
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.272000  resc_cpu: 11551
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 276.397871  Resp: 276.397871  Degree: 1
      Cost_io: 276.000000  Cost_cpu: 11779710
      Resp_io: 276.000000  Resp_cpu: 11779710
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 1004.558711  Resp: 1004.558711  Degree: 1
      Cost_io: 1004.000000  Cost_cpu: 16541679
      Resp_io: 1004.000000  Resp_cpu: 16541679
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 1004.261761  Resp: 1004.261761  Degree: 1
      Cost_io: 1004.000000  Cost_cpu: 7749926
      Resp_io: 1004.000000  Resp_cpu: 7749926
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 1004.261761  Resp: 1004.261761  Degree: 1
      Cost_io: 1004.000000  Cost_cpu: 7749926
      Resp_io: 1004.000000  Resp_cpu: 7749926
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 2974.538568, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 276.397871
          resc: 276.397871  resc_io: 276.000000  resc_cpu: 11779710
          resp: 276.397871  resp_io: 276.000000  resc_cpu: 11779710
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  200.005444 = outer (1000.000000) * inner (10.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  10000.000000, outer: 1000.000000, inner: 10.000000, sel: 0.020001
Join Card - Rounded: 200 Computed: 200.005444
Join order aborted: cost > best plan cost
***********************
(newjo-stop-1) k:2, spcnt:2, perm:12, maxperm:120

*********************************
Number of join permutations tried: 12
*********************************
Consider using bloom filter between T1[T1] and T2[T2] with ??
kkoBloomFilter: join (lcdn:10 rcdn:1000 jcdn:0 limit:5000)
kkopqSingleJoinBloomNdv:Compute bloom ndv for lfro:L[L] and rfro:T2[T2] swap:no
kkopqSingleJoinBloomNdv: predCnt:#1 col1:(bndv:10 ndv:10) and col2:(bndv:10000 ndv:10000) creatorNDV:10.0 userNDV:10000.0
kkopqSingleJoinBloomNdv:Compute bloom ndv for lfro:T1[T1] and rfro:T2[T2] swap:no
kkopqComputeBloomNdv: predCnt:1 creatorNdv:10.0 userNdv:10000.0 singleTblPred:yes
kkoBloomFilter: join ndv:10 reduction:0.010000 (limit:0.500000)  accepted, but final decision will be made in code generation
Enumerating distribution method (advanced)
--- Distribution method for 
join between L[L](serial) and T1[T1](serial); jm = 8; right side access path = IndexRange
---- serial Sort-Merge-Join -> NONE
--- Distribution method for 
join between T1[T1](serial) and T2[T2](serial); jm = 1; right side access path = IndexRange
---- serial Hash-Join -> NONE

LORE: or-expansion-subheap (delete addr=0x7f2bac107e48, in-use=131336, alloc=138848)

LORE: ******** OR-branching ********

LORE: or-expansion-subheap (create addr=0x7f2bac107e48)
****************
QUERY BLOCK TEXT
****************
SELECT /*+ OPT_PARAM('_optimizer_cbqt_or_expansion' 'off') */ null FROM l, t1, t2 WHERE  
(  ( t1.m = :v1 AND t2.c1 BETWEEN 11 AND 12)       OR 
   ( t1.m = :v2 AND t2.c1 = 103 AND t2.c2 = 13  )   )  AND 
    ( l.id = t1.id AND l.id2 = t2.id )
---------------------
QUERY BLOCK SIGNATURE
---------------------
signature (optimizer): qb_name=SEL$1 nbfros=3 flg=0
  fro(0): flg=0 objn=73644 hint_alias="L"@"SEL$1"
  fro(1): flg=0 objn=73646 hint_alias="T1"@"SEL$1"
  fro(2): flg=0 objn=73648 hint_alias="T2"@"SEL$1"

-----------------------------
SYSTEM STATISTICS INFORMATION
-----------------------------
Using dictionary system stats.
  Using NOWORKLOAD Stats
  CPUSPEEDNW: 2467 millions instructions/sec (default is 100)
  IOTFRSPEED: 4096 bytes per millisecond (default is 4096)
  IOSEEKTIM:  10 milliseconds (default is 10)
  MBRC:       NO VALUE blocks (default is 8)

***************************************
BASE STATISTICAL INFORMATION
***********************
Table Stats::
  Table: T2  Alias: T2
  #Rows: 10000  SSZ: 0  LGR: 0  #Blks:  25  AvgRowLen:  10.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): C1(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#3): C2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#1): ID(NUMBER)
    AvgLen: 4 NDV: 10000 Nulls: 0 Density: 0.000100 Min: 1.000000 Max: 10000.000000
Index Stats::
  Index: T2_C1_C2_ID  Col#: 2 3 1
  LVLS: 1  #LB: 30  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 210.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
  Index: T2_ID  Col#: 1
  LVLS: 1  #LB: 20  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 21.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table: T1  Alias: T1
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): M(NUMBER)
    AvgLen: 3 NDV: 5 Nulls: 0 Density: 0.200000 Min: 0.000000 Max: 4.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: T1_M_ID  Col#: 2 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table:  L  Alias:  L
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
  Column (#2): ID2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: L_ID  Col#: 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
=======================================
SPD: BEGIN context at query block level
=======================================
Query Block SEL$1 (#0)
Return code in qosdSetupDirCtx4QB: NOCTX
=====================================
SPD: END context at query block level
=====================================
Access path analysis for L
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for L[L] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Table: L  Alias: L
    Card: Original: 10.000000  Rounded: 10  Computed: 10.000000  Non Adjusted: 10.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                       =   30185.760000
  Access Path: TableScan
    Cost:  3.001020  Resp: 3.001020  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 30186
      Resp_io: 3.000000  Resp_cpu: 30186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: TableScan
         Cost: 3.001020  Degree: 1  Resp: 3.001020  Card: 10.000000  Bytes: 0.000000

Access path analysis for T1
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T1[T1] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE

 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)
  Estimated selectivity: 0.200000 , col: #2 
  Table: T1  Alias: T1
    Card: Original: 10.000000  Rounded: 4  Computed: 4.000000  Non Adjusted: 4.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2700.000000 (cpu filter eval) (= 270.000000 (per row) * 10.000000 (#rows))
                       =   32885.760000
  Access Path: TableScan
    Cost:  3.001111  Resp: 3.001111  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 32886
      Resp_io: 3.000000  Resp_cpu: 32886
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 11021
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  2.000372  Resp: 2.000372  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 11021
      Resp_io: 2.000000  Resp_cpu: 11021
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.400000 
    Cost: 1.000508  Resp: 1.000508  Degree: 1
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    Cost: 1.000254  Resp: 1.000254  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    Cost: 1.000254  Resp: 1.000254  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 2.000267, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T1_M_ID
         Cost: 1.000508  Degree: 1  Resp: 1.000508  Card: 4.000000  Bytes: 0.000000

Access path analysis for T2
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T2[T2] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Estimated selectivity: 0.100000 , col: #2 
  Estimated selectivity: 0.100000 , col: #3 


 kkecdn: Single Table Predicate:"T2"."C1"=103
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C2"=13
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Table: T2  Alias: T2
    Card: Original: 10000.000000  Rounded: 1  Computed: 0.027778  Non Adjusted: 0.027778
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.000000 (cpu filter eval) (= 50.002500 (per row) * 10000.000000 (#rows))
                       =   2578061.000000
  Access Path: TableScan
    Cost:  9.087077  Resp: 9.087077  Degree: 0
      Cost_io: 9.000000  Cost_cpu: 2578061
      Resp_io: 9.000000  Resp_cpu: 2578061
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  10.064636  Resp: 10.064636  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 1913668
      Resp_io: 10.000000  Resp_cpu: 1913668
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 2.000000  resc_cpu: 14443
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.7778e-06 
    Cost: 2.000488  Resp: 2.000488  Degree: 1
  ****** trying bitmap/domain indexes ******

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 2.000000  resc_cpu: 14443
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.7778e-06 
    Cost: 2.000488  Resp: 2.000488  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 4.000000  resc_cpu: 228486
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    Cost: 4.007717  Resp: 4.007717  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_C1_C2_ID
      Cost = 3.000488, sel = 2.7778e-06
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T2_C1_C2_ID
         Cost: 2.000488  Degree: 1  Resp: 2.000488  Card: 0.027778  Bytes: 0.000000

(newjo-restore) [2 1 0 ]
***************************************


OPTIMIZER STATISTICS AND COMPUTATIONS
PJE:  Bypassed; QB is undergoing OR expansion SEL$1 (#0)
***************************************
GENERAL PLANS
***************************************
Considering cardinality-based initial join order.
Permutations for Starting Table :0
Join order[1]:  L[L]#0  T1[T1]#1  T2[T2]#2

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 770.000000 (cpu filter eval) (= 77.000000 (per row) * 10.000000 (#rows))
                       =   30955.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 15.011475  Resp: 15.011475  Degree: 1
      Cost_io: 15.000000  Cost_cpu: 339743
      Resp_io: 15.000000  Resp_cpu: 339743
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9091
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.004090  Resp: 7.004090  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 121100
      Resp_io: 7.000000  Resp_cpu: 121100
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 13.005965  Resp: 13.005965  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 176615
      Resp_io: 13.000000  Resp_cpu: 176615
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.001374  Resp: 3.001374  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 40686
      Resp_io: 3.000000  Resp_cpu: 40686

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.001374  Resp: 3.001374  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 40686
      Resp_io: 3.000000  Resp_cpu: 40686
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 13.003560  Resp: 13.003560  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 105400
      Resp_io: 13.000000  Resp_cpu: 105400
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 3.001375, sel = 0.020000
    Used T1_M_ID
      Cost = 3.001375, sel = 0.020000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 7.004090
          resc: 7.004090  resc_io: 7.000000  resc_cpu: 121100
          resp: 7.004090  resp_io: 7.000000  resc_cpu: 121100
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  10.000000 = outer (10.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 10 Computed: 10.000000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 6.001590  Resp: 6.001590  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001590 
     resc: 6.001590 resc_io: 4.000000 resc_cpu: 59260769
     resp: 6.001590 resp_io: 4.000000 resp_cpu: 59260769
SM Join (with index on outer)
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 2.000000  resc_cpu: 17943
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 2.000606  Resp: 2.000606  Degree: 1
  Outer table:  L  Alias: L
    resc: 2.000606  card 10.000000  bytes:   deg: 1  resp: 2.000606
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 4.001126  Resp: 4.001126  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020330  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021878  Resp: 4.021878  [multiMatchCost=0.000020]
HA Join
  HA cost: 4.021878  
     resc: 4.021878 resc_io: 4.000000 resc_cpu: 647729
     resp: 4.021878 resp_io: 4.000000 resp_cpu: 647729
Best:: JoinMethod: SortMerge
       Cost: 4.001126  Degree: 1  Resp: 4.001126  Card: 10.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 4.001126  Resp: 4.001126  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.033788 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.033788
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 73.871892  Resp: 73.871892  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 55420798
      Resp_io: 72.000000  Resp_cpu: 55420798
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 87.647486  Resp: 87.647486  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 48776870
      Resp_io: 86.000000  Resp_cpu: 48776870
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.004254  Resp: 14.004254  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 29732802
      Resp_io: 13.000000  Resp_cpu: 29732802
kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 5.5557e-12 
    NL Join : Cost: 14.003994  Resp: 14.003994  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 29725078
      Resp_io: 13.000000  Resp_cpu: 29725078
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.004254  Resp: 14.004254  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 29732802
      Resp_io: 13.000000  Resp_cpu: 29732802
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 14.003994
          resc: 14.003994  resc_io: 13.000000  resc_cpu: 29725078
          resp: 14.003994  resp_io: 13.000000  resc_cpu: 29725078
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.000556 = outer (10.000000) * inner (0.027778) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  0.027778, outer: 10.000000, inner: 0.027778, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  T1  Alias: T1
    resc: 4.001126  card 10.000000  bytes:   deg: 1  resp: 4.001126
  Inner table:  T2  Alias: T2
    resc: 2.000488  card: 0.027778  bytes:   deg: 1  resp: 2.000488
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 8.001665  Resp: 8.001665  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.001665 
     resc: 8.001665 resc_io: 5.000000 resc_cpu: 88869811
     resp: 8.001665 resp_io: 5.000000 resp_cpu: 88869811
  Outer table:  T1  Alias: T1
    resc: 4.001126  card 10.000000  bytes:   deg: 1  resp: 4.001126
  Inner table:  T2  Alias: T2
    resc: 2.000488  card: 0.027778  bytes:   deg: 1  resp: 2.000488
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.021934  Resp: 6.021934  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.021934  
     resc: 6.021934 resc_io: 5.000000 resc_cpu: 30256231
     resp: 6.021934 resp_io: 5.000000 resp_cpu: 30256231
Best:: JoinMethod: Hash
       Cost: 6.021934  Degree: 1  Resp: 6.021934  Card: 0.000556 Bytes: 
***********************
Best so far:  Table#: 0  cost: 2.000606  card: 10.000000  bytes: 60.000000
              Table#: 1  cost: 4.001126  card: 10.000000  bytes: 120.000000
              Table#: 2  cost: 6.021934  card: 0.000556  bytes: 22.000000
***********************
Join order[2]:  L[L]#0  T2[T2]#2  T1[T1]#1

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.024975 (cpu filter eval) (= 50.002502 (per row) * 10000.000000 (#rows))
                       =   2578061.024975
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 72.871785  Resp: 72.871785  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 25810796
      Resp_io: 72.000000  Resp_cpu: 25810796
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 86.647380  Resp: 86.647380  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 19166868
      Resp_io: 86.000000  Resp_cpu: 19166868
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004148  Resp: 13.004148  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122800
      Resp_io: 13.000000  Resp_cpu: 122800
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.7778e-10 
    NL Join : Cost: 13.003780  Resp: 13.003780  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 111900
      Resp_io: 13.000000  Resp_cpu: 111900
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004148  Resp: 13.004148  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122800
      Resp_io: 13.000000  Resp_cpu: 122800
  ****** trying bitmap/domain indexes ******

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.7778e-10 
    NL Join : Cost: 13.003780  Resp: 13.003780  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 111900
      Resp_io: 13.000000  Resp_cpu: 111900

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 33.076075  Resp: 33.076075  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 2252329
      Resp_io: 33.000000  Resp_cpu: 2252329
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_C1_C2_ID
      Cost = 13.003780, sel = 2.7778e-07
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 13.003780
          resc: 13.003780  resc_io: 13.000000  resc_cpu: 111900
          resp: 13.003780  resp_io: 13.000000  resc_cpu: 111900
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.027778 = outer (10.000000) * inner (0.027778) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.027778
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 2.000488  card: 0.027778  bytes:   deg: 1  resp: 2.000488
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 7.001558  Resp: 7.001558  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001558 
     resc: 7.001558 resc_io: 5.000000 resc_cpu: 59259809
     resp: 7.001558 resp_io: 5.000000 resp_cpu: 59259809
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 2.000488  card: 0.027778  bytes:   deg: 1  resp: 2.000488
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021827  Resp: 5.021827  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021827  
     resc: 5.021827 resc_io: 5.000000 resc_cpu: 646229
     resp: 5.021827 resp_io: 5.000000 resp_cpu: 646229
Best:: JoinMethod: Hash
       Cost: 5.021827  Degree: 1  Resp: 5.021827  Card: 0.027778 Bytes: 

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.027778  Cost: 5.021827  Resp: 5.021827  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 822.978415 (cpu filter eval) (= 82.297841 (per row) * 10.000000 (#rows))
                       =   31008.738415
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 8.022874  Resp: 8.022874  Degree: 1
      Cost_io: 8.000000  Cost_cpu: 677237
      Resp_io: 8.000000  Resp_cpu: 677237
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 9144
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.022136  Resp: 7.022136  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 655373
      Resp_io: 7.000000  Resp_cpu: 655373
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.004000 
    NL Join : Cost: 6.022343  Resp: 6.022343  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 661507
      Resp_io: 6.000000  Resp_cpu: 661507
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.021862  Resp: 5.021862  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 647279
      Resp_io: 5.000000  Resp_cpu: 647279

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.021862  Resp: 5.021862  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 647279
      Resp_io: 5.000000  Resp_cpu: 647279
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 6.022081  Resp: 6.022081  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 653750
      Resp_io: 6.000000  Resp_cpu: 653750
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Not used  bitmap node 
    Used  bitmap node 
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  Access path: Bitmap index - accepted
    Cost: 14.442524 Cost_io: 13.398006 Cost_cpu: 30924879.681888 Sel: 0.200000
    Not Believed to be index-only
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 6.022343
          resc: 6.022343  resc_io: 6.000000  resc_cpu: 661507
          resp: 6.022343  resp_io: 6.000000  resc_cpu: 661507
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.000556 = outer (0.027778) * inner (10.000000) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  0.027778, outer: 0.027778, inner: 10.000000, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  T2  Alias: T2
    resc: 5.021827  card 0.027778  bytes:   deg: 1  resp: 5.021827
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 8.022347  Resp: 8.022347  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.022347 
     resc: 8.022347 resc_io: 6.000000 resc_cpu: 59875315
     resp: 8.022347 resp_io: 6.000000 resp_cpu: 59875315
  Outer table:  T2  Alias: T2
    resc: 5.021827  card 0.027778  bytes:   deg: 1  resp: 5.021827
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020284  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.042619  Resp: 6.042619  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.042619  
     resc: 6.042619 resc_io: 6.000000 resc_cpu: 1261822
     resp: 6.042619 resp_io: 6.000000 resp_cpu: 1261822
Join order aborted: cost > best plan cost
***********************
Join order[3]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   1.500000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.500000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.500000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 7.004654  Resp: 7.004654  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 137786
      Resp_io: 7.000000  Resp_cpu: 137786
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001635
          resc: 5.001635  resc_io: 5.000000  resc_cpu: 48409
          resp: 5.001635  resp_io: 5.000000  resc_cpu: 48409
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  10.000000 = outer (10.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 10 Computed: 10.000000
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001590  Resp: 6.001590  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001590 
     resc: 6.001590 resc_io: 4.000000 resc_cpu: 59260769
     resp: 6.001590 resp_io: 4.000000 resp_cpu: 59260769
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021847  Resp: 4.021847  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021847  
     resc: 4.021847 resc_io: 4.000000 resc_cpu: 646829
     resp: 4.021847 resp_io: 4.000000 resp_cpu: 646829
Best:: JoinMethod: Hash
       Cost: 4.021847  Degree: 1  Resp: 4.021847  Card: 10.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 4.021847  Resp: 4.021847  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.033788 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.033788
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 73.892613  Resp: 73.892613  Degree: 1
      Cost_io: 73.000000  Cost_cpu: 26427439
      Resp_io: 73.000000  Resp_cpu: 26427439
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 87.668207  Resp: 87.668207  Degree: 1
      Cost_io: 87.000000  Cost_cpu: 19783511
      Resp_io: 87.000000  Resp_cpu: 19783511
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.024975  Resp: 14.024975  Degree: 1
      Cost_io: 14.000000  Cost_cpu: 739443
      Resp_io: 14.000000  Resp_cpu: 739443
kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 5.5557e-12 
    NL Join : Cost: 14.024715  Resp: 14.024715  Degree: 1
      Cost_io: 14.000000  Cost_cpu: 731719
      Resp_io: 14.000000  Resp_cpu: 731719
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.024975  Resp: 14.024975  Degree: 1
      Cost_io: 14.000000  Cost_cpu: 739443
      Resp_io: 14.000000  Resp_cpu: 739443
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 14.024715
          resc: 14.024715  resc_io: 14.000000  resc_cpu: 731719
          resp: 14.024715  resp_io: 14.000000  resc_cpu: 731719
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.000556 = outer (10.000000) * inner (0.027778) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  0.027778, outer: 10.000000, inner: 0.027778, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  L  Alias: L
    resc: 4.021847  card 10.000000  bytes:   deg: 1  resp: 4.021847
  Inner table:  T2  Alias: T2
    resc: 2.000488  card: 0.027778  bytes:   deg: 1  resp: 2.000488
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 8.022386  Resp: 8.022386  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.022386 
     resc: 8.022386 resc_io: 6.000000 resc_cpu: 59876451
     resp: 8.022386 resp_io: 6.000000 resp_cpu: 59876451
  Outer table:  L  Alias: L
    resc: 4.021847  card 10.000000  bytes:   deg: 1  resp: 4.021847
  Inner table:  T2  Alias: T2
    resc: 2.000488  card: 0.027778  bytes:   deg: 1  resp: 2.000488
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.042655  Resp: 6.042655  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.042655  
     resc: 6.042655 resc_io: 6.000000 resc_cpu: 1262872
     resp: 6.042655 resp_io: 6.000000 resp_cpu: 1262872
Join order aborted: cost > best plan cost
***********************
Join order[4]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.250000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   7.250000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.250000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500033.821619 (cpu filter eval) (= 50.003382 (per row) * 10000.000000 (#rows))
                       =   2578069.821619
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 30.348815  Resp: 30.348815  Degree: 1
      Cost_io: 30.000000  Cost_cpu: 10327322
      Resp_io: 30.000000  Resp_cpu: 10327322
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.500000  resc_cpu: 1913677
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 35.259053  Resp: 35.259053  Degree: 1
      Cost_io: 35.000000  Cost_cpu: 7669751
      Resp_io: 35.000000  Resp_cpu: 7669751
kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-06  ix_sel_with_filters: 5.5557e-08 
    NL Join : Cost: 5.001655  Resp: 5.001655  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48999
      Resp_io: 5.000000  Resp_cpu: 48999
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001655
          resc: 5.001655  resc_io: 5.000000  resc_cpu: 48999
          resp: 5.001655  resp_io: 5.000000  resc_cpu: 48999
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.005556 = outer (10.000000) * inner (0.027778) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  0.277778, outer: 10.000000, inner: 0.027778, sel: 0.020001
Join Card - Rounded: 1 Computed: 0.005556
Best:: JoinMethod: NestedLoop
       Cost: 5.001655  Degree: 1  Resp: 5.001655  Card: 0.005556 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.005556  Cost: 5.001655  Resp: 5.001655  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 8.002691  Resp: 8.002691  Degree: 1
      Cost_io: 8.000000  Cost_cpu: 79685
      Resp_io: 8.000000  Resp_cpu: 79685
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 6.001938  Resp: 6.001938  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 57390
      Resp_io: 6.000000  Resp_cpu: 57390
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 6.001938  Resp: 6.001938  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 57390
      Resp_io: 6.000000  Resp_cpu: 57390
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 6.001938
          resc: 6.001938  resc_io: 6.000000  resc_cpu: 57390
          resp: 6.001938  resp_io: 6.000000  resc_cpu: 57390
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000556 = outer (0.005556) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  T2  Alias: T2
    resc: 5.001655  card 0.005556  bytes:   deg: 1  resp: 5.001655
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 10.002725  Resp: 10.002725  [multiMatchCost=0.000000]
SM Join
  SM cost: 10.002725 
     resc: 10.002725 resc_io: 8.000000 resc_cpu: 59294365
     resp: 10.002725 resp_io: 8.000000 resp_cpu: 59294365
  Outer table:  T2  Alias: T2
    resc: 5.001655  card 0.005556  bytes:   deg: 1  resp: 5.001655
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 8.022979  Resp: 8.022979  [multiMatchCost=0.000000]
HA Join
  HA cost: 8.022979  
     resc: 8.022979 resc_io: 8.000000 resc_cpu: 680335
     resp: 8.022979 resp_io: 8.000000 resp_cpu: 680335
Plan cardinality mismatch: best card= 0.00055557068   curr card= 0.00055557068
Best:: JoinMethod: NestedLoop
       Cost: 6.001938  Degree: 1  Resp: 6.001938  Card: 0.000556 Bytes: 
***********************
Best so far:  Table#: 1  cost: 1.000508  card: 4.000000  bytes: 24.000000
              Table#: 2  cost: 5.001655  card: 0.005556  bytes: 16.000000
              Table#: 0  cost: 6.001938  card: 0.000556  bytes: 22.000000
***********************
Join order[5]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000488  Resp: 2.000488  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001524  Resp: 5.001524  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45129
      Resp_io: 5.000000  Resp_cpu: 45129
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001524
          resc: 5.001524  resc_io: 5.000000  resc_cpu: 45129
          resp: 5.001524  resp_io: 5.000000  resc_cpu: 45129
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.027778 = outer (0.027778) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.027778
  Outer table:  T2  Alias: T2
    resc: 2.000488  card 0.027778  bytes:   deg: 1  resp: 2.000488
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001558  Resp: 7.001558  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001558 
     resc: 7.001558 resc_io: 5.000000 resc_cpu: 59259809
     resp: 7.001558 resp_io: 5.000000 resp_cpu: 59259809
  Outer table:  T2  Alias: T2
    resc: 2.000488  card 0.027778  bytes:   deg: 1  resp: 2.000488
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021812  Resp: 5.021812  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021812  
     resc: 5.021812 resc_io: 5.000000 resc_cpu: 645779
     resp: 5.021812 resp_io: 5.000000 resp_cpu: 645779
Best:: JoinMethod: Hash
       Cost: 5.021812  Degree: 1  Resp: 5.021812  Card: 0.027778 Bytes: 

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.027778  Cost: 5.021812  Resp: 5.021812  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2080  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 822.978415 (cpu filter eval) (= 82.297841 (per row) * 10.000000 (#rows))
                       =   31008.738415
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 8.022859  Resp: 8.022859  Degree: 1
      Cost_io: 8.000000  Cost_cpu: 676787
      Resp_io: 8.000000  Resp_cpu: 676787
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 9144
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.022121  Resp: 7.022121  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 654923
      Resp_io: 7.000000  Resp_cpu: 654923
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.004000 
    NL Join : Cost: 6.022328  Resp: 6.022328  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 661057
      Resp_io: 6.000000  Resp_cpu: 661057
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.021847  Resp: 5.021847  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 646829
      Resp_io: 5.000000  Resp_cpu: 646829

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.021847  Resp: 5.021847  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 646829
      Resp_io: 5.000000  Resp_cpu: 646829
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 6.022066  Resp: 6.022066  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 653300
      Resp_io: 6.000000  Resp_cpu: 653300
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Not used  bitmap node 
    Used  bitmap node 
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  Access path: Bitmap index - accepted
    Cost: 14.442494 Cost_io: 13.398006 Cost_cpu: 30923979.681888 Sel: 0.200000
    Not Believed to be index-only
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 6.022328
          resc: 6.022328  resc_io: 6.000000  resc_cpu: 661057
          resp: 6.022328  resp_io: 6.000000  resc_cpu: 661057
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.000556 = outer (0.027778) * inner (10.000000) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  0.027778, outer: 0.027778, inner: 10.000000, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  L  Alias: L
    resc: 5.021812  card 0.027778  bytes:   deg: 1  resp: 5.021812
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 8.022332  Resp: 8.022332  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.022332 
     resc: 8.022332 resc_io: 6.000000 resc_cpu: 59874865
     resp: 8.022332 resp_io: 6.000000 resp_cpu: 59874865
  Outer table:  L  Alias: L
    resc: 5.021812  card 0.027778  bytes:   deg: 1  resp: 5.021812
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020284  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.042604  Resp: 6.042604  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.042604  
     resc: 6.042604 resc_io: 6.000000 resc_cpu: 1261372
     resp: 6.042604 resp_io: 6.000000 resp_cpu: 1261372
Plan cardinality mismatch: best card= 0.00055557068   curr card= 0.00055557068
Join order aborted: cost > best plan cost
***********************
Join order[6]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000488  Resp: 2.000488  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 3229.784148 (cpu filter eval) (= 322.978415 (per row) * 10.000000 (#rows))
                       =   33415.544148
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001616  Resp: 5.001616  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 47858
      Resp_io: 5.000000  Resp_cpu: 47858
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 11551
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000878  Resp: 4.000878  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 25994
      Resp_io: 4.000000  Resp_cpu: 25994
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 3.001039  Resp: 3.001039  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 30756
      Resp_io: 3.000000  Resp_cpu: 30756
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 3.000742  Resp: 3.000742  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 21964
      Resp_io: 3.000000  Resp_cpu: 21964
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 3.000742  Resp: 3.000742  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 21964
      Resp_io: 3.000000  Resp_cpu: 21964
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 4.000757, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.001039
          resc: 3.001039  resc_io: 3.000000  resc_cpu: 30756
          resp: 3.001039  resp_io: 3.000000  resc_cpu: 30756
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.005556 = outer (0.027778) * inner (10.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  0.277778, outer: 0.027778, inner: 10.000000, sel: 0.020001
Join Card - Rounded: 1 Computed: 0.005556
Best:: JoinMethod: NestedLoop
       Cost: 3.001039  Degree: 1  Resp: 3.001039  Card: 0.005556 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.005556  Cost: 3.001039  Resp: 3.001039  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.002075  Resp: 6.002075  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 61442
      Resp_io: 6.000000  Resp_cpu: 61442
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001322  Resp: 4.001322  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 39148
      Resp_io: 4.000000  Resp_cpu: 39148
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001322  Resp: 4.001322  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 39148
      Resp_io: 4.000000  Resp_cpu: 39148
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001322
          resc: 4.001322  resc_io: 4.000000  resc_cpu: 39148
          resp: 4.001322  resp_io: 4.000000  resc_cpu: 39148
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000556 = outer (0.005556) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  T1  Alias: T1
    resc: 3.001039  card 0.005556  bytes:   deg: 1  resp: 3.001039
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.002109  Resp: 8.002109  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.002109 
     resc: 8.002109 resc_io: 6.000000 resc_cpu: 59276122
     resp: 8.002109 resp_io: 6.000000 resp_cpu: 59276122
  Outer table:  T1  Alias: T1
    resc: 3.001039  card 0.005556  bytes:   deg: 1  resp: 3.001039
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022363  Resp: 6.022363  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022363  
     resc: 6.022363 resc_io: 6.000000 resc_cpu: 662092
     resp: 6.022363 resp_io: 6.000000 resp_cpu: 662092
Best:: JoinMethod: NestedLoop
       Cost: 4.001322  Degree: 1  Resp: 4.001322  Card: 0.000556 Bytes: 
***********************
Best so far:  Table#: 2  cost: 2.000488  card: 0.027778  bytes: 10.000000
              Table#: 1  cost: 3.001039  card: 0.005556  bytes: 16.000000
              Table#: 0  cost: 4.001322  card: 0.000556  bytes: 22.000000
***********************
Permutations for Starting Table :1
Join order[7]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000488  Resp: 2.000488  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001524  Resp: 5.001524  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45129
      Resp_io: 5.000000  Resp_cpu: 45129
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001524
          resc: 5.001524  resc_io: 5.000000  resc_cpu: 45129
          resp: 5.001524  resp_io: 5.000000  resc_cpu: 45129
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.027778 = outer (0.027778) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.027778
  Outer table:  T2  Alias: T2
    resc: 2.000488  card 0.027778  bytes:   deg: 1  resp: 2.000488
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001558  Resp: 7.001558  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001558 
     resc: 7.001558 resc_io: 5.000000 resc_cpu: 59259809
     resp: 7.001558 resp_io: 5.000000 resp_cpu: 59259809
  Outer table:  T2  Alias: T2
    resc: 2.000488  card 0.027778  bytes:   deg: 1  resp: 2.000488
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021812  Resp: 5.021812  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021812  
     resc: 5.021812 resc_io: 5.000000 resc_cpu: 645779
     resp: 5.021812 resp_io: 5.000000 resp_cpu: 645779
Join order aborted: cost > best plan cost
***********************
Join order[8]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000488  Resp: 2.000488  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 3229.784148 (cpu filter eval) (= 322.978415 (per row) * 10.000000 (#rows))
                       =   33415.544148
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001616  Resp: 5.001616  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 47858
      Resp_io: 5.000000  Resp_cpu: 47858
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 11551
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000878  Resp: 4.000878  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 25994
      Resp_io: 4.000000  Resp_cpu: 25994
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 3.001039  Resp: 3.001039  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 30756
      Resp_io: 3.000000  Resp_cpu: 30756
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 3.000742  Resp: 3.000742  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 21964
      Resp_io: 3.000000  Resp_cpu: 21964
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 3.000742  Resp: 3.000742  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 21964
      Resp_io: 3.000000  Resp_cpu: 21964
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 4.000757, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.001039
          resc: 3.001039  resc_io: 3.000000  resc_cpu: 30756
          resp: 3.001039  resp_io: 3.000000  resc_cpu: 30756
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.005556 = outer (0.027778) * inner (10.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  0.277778, outer: 0.027778, inner: 10.000000, sel: 0.020001
Join Card - Rounded: 1 Computed: 0.005556
Best:: JoinMethod: NestedLoop
       Cost: 3.001039  Degree: 1  Resp: 3.001039  Card: 0.005556 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.005556  Cost: 3.001039  Resp: 3.001039  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.002075  Resp: 6.002075  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 61442
      Resp_io: 6.000000  Resp_cpu: 61442
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001322  Resp: 4.001322  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 39148
      Resp_io: 4.000000  Resp_cpu: 39148
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001322  Resp: 4.001322  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 39148
      Resp_io: 4.000000  Resp_cpu: 39148
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001322
          resc: 4.001322  resc_io: 4.000000  resc_cpu: 39148
          resp: 4.001322  resp_io: 4.000000  resc_cpu: 39148
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000556 = outer (0.005556) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  T1  Alias: T1
    resc: 3.001039  card 0.005556  bytes:   deg: 1  resp: 3.001039
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.002109  Resp: 8.002109  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.002109 
     resc: 8.002109 resc_io: 6.000000 resc_cpu: 59276122
     resp: 8.002109 resp_io: 6.000000 resp_cpu: 59276122
  Outer table:  T1  Alias: T1
    resc: 3.001039  card 0.005556  bytes:   deg: 1  resp: 3.001039
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022363  Resp: 6.022363  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022363  
     resc: 6.022363 resc_io: 6.000000 resc_cpu: 662092
     resp: 6.022363 resp_io: 6.000000 resp_cpu: 662092
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :2
Join order[9]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   1.500000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.500000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.500000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 7.004654  Resp: 7.004654  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 137786
      Resp_io: 7.000000  Resp_cpu: 137786
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001635
          resc: 5.001635  resc_io: 5.000000  resc_cpu: 48409
          resp: 5.001635  resp_io: 5.000000  resc_cpu: 48409
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  10.000000 = outer (10.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 10 Computed: 10.000000
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001590  Resp: 6.001590  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001590 
     resc: 6.001590 resc_io: 4.000000 resc_cpu: 59260769
     resp: 6.001590 resp_io: 4.000000 resp_cpu: 59260769
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021847  Resp: 4.021847  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021847  
     resc: 4.021847 resc_io: 4.000000 resc_cpu: 646829
     resp: 4.021847 resp_io: 4.000000 resp_cpu: 646829
Join order aborted: cost > best plan cost
***********************
Join order[10]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.250000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2065  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   7.250000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.250000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500033.821619 (cpu filter eval) (= 50.003382 (per row) * 10000.000000 (#rows))
                       =   2578069.821619
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 30.348815  Resp: 30.348815  Degree: 1
      Cost_io: 30.000000  Cost_cpu: 10327322
      Resp_io: 30.000000  Resp_cpu: 10327322
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.500000  resc_cpu: 1913677
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 35.259053  Resp: 35.259053  Degree: 1
      Cost_io: 35.000000  Cost_cpu: 7669751
      Resp_io: 35.000000  Resp_cpu: 7669751
kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-06  ix_sel_with_filters: 5.5557e-08 
    NL Join : Cost: 5.001655  Resp: 5.001655  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48999
      Resp_io: 5.000000  Resp_cpu: 48999
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001655
          resc: 5.001655  resc_io: 5.000000  resc_cpu: 48999
          resp: 5.001655  resp_io: 5.000000  resc_cpu: 48999
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.005556 = outer (10.000000) * inner (0.027778) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  0.277778, outer: 10.000000, inner: 0.027778, sel: 0.020001
Join Card - Rounded: 1 Computed: 0.005556
Join order aborted: cost > best plan cost
***********************
Join order[11]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000488  Resp: 2.000488  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001524  Resp: 5.001524  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45129
      Resp_io: 5.000000  Resp_cpu: 45129
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001524
          resc: 5.001524  resc_io: 5.000000  resc_cpu: 45129
          resp: 5.001524  resp_io: 5.000000  resc_cpu: 45129
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.027778 = outer (0.027778) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.027778
  Outer table:  T2  Alias: T2
    resc: 2.000488  card 0.027778  bytes:   deg: 1  resp: 2.000488
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001558  Resp: 7.001558  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001558 
     resc: 7.001558 resc_io: 5.000000 resc_cpu: 59259809
     resp: 7.001558 resp_io: 5.000000 resp_cpu: 59259809
  Outer table:  T2  Alias: T2
    resc: 2.000488  card 0.027778  bytes:   deg: 1  resp: 2.000488
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021812  Resp: 5.021812  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021812  
     resc: 5.021812 resc_io: 5.000000 resc_cpu: 645779
     resp: 5.021812 resp_io: 5.000000 resp_cpu: 645779
Join order aborted: cost > best plan cost
***********************
Join order[12]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000488  Resp: 2.000488  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2080  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 3229.784148 (cpu filter eval) (= 322.978415 (per row) * 10.000000 (#rows))
                       =   33415.544148
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001616  Resp: 5.001616  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 47858
      Resp_io: 5.000000  Resp_cpu: 47858
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 11551
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000878  Resp: 4.000878  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 25994
      Resp_io: 4.000000  Resp_cpu: 25994
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 3.001039  Resp: 3.001039  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 30756
      Resp_io: 3.000000  Resp_cpu: 30756
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 3.000742  Resp: 3.000742  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 21964
      Resp_io: 3.000000  Resp_cpu: 21964
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 3.000742  Resp: 3.000742  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 21964
      Resp_io: 3.000000  Resp_cpu: 21964
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 4.000757, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.001039
          resc: 3.001039  resc_io: 3.000000  resc_cpu: 30756
          resp: 3.001039  resp_io: 3.000000  resc_cpu: 30756
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.005556 = outer (0.027778) * inner (10.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  0.277778, outer: 0.027778, inner: 10.000000, sel: 0.020001
Join Card - Rounded: 1 Computed: 0.005556
Best:: JoinMethod: NestedLoop
       Cost: 3.001039  Degree: 1  Resp: 3.001039  Card: 0.005556 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.005556  Cost: 3.001039  Resp: 3.001039  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.002075  Resp: 6.002075  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 61442
      Resp_io: 6.000000  Resp_cpu: 61442
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001322  Resp: 4.001322  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 39148
      Resp_io: 4.000000  Resp_cpu: 39148
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001322  Resp: 4.001322  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 39148
      Resp_io: 4.000000  Resp_cpu: 39148
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001322
          resc: 4.001322  resc_io: 4.000000  resc_cpu: 39148
          resp: 4.001322  resp_io: 4.000000  resc_cpu: 39148
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000556 = outer (0.005556) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  T1  Alias: T1
    resc: 3.001039  card 0.005556  bytes:   deg: 1  resp: 3.001039
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.002109  Resp: 8.002109  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.002109 
     resc: 8.002109 resc_io: 6.000000 resc_cpu: 59276122
     resp: 8.002109 resp_io: 6.000000 resp_cpu: 59276122
  Outer table:  T1  Alias: T1
    resc: 3.001039  card 0.005556  bytes:   deg: 1  resp: 3.001039
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022363  Resp: 6.022363  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022363  
     resc: 6.022363 resc_io: 6.000000 resc_cpu: 662092
     resp: 6.022363 resp_io: 6.000000 resp_cpu: 662092
Join order aborted: cost > best plan cost
***********************
(newjo-stop-1) k:2, spcnt:2, perm:12, maxperm:120

*********************************
Number of join permutations tried: 12
*********************************
Enumerating distribution method (advanced)
--- Distribution method for 
join between T2[T2](serial) and T1[T1](serial); jm = 14; right side access path = IndexRange
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL
--- Distribution method for 
join between T1[T1](serial) and L[L](serial); jm = 14; right side access path = IndexUnique
kkopqIsSerialJoin: serial NLJ: both inputs serial
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL

LORE: or-expansion-subheap (delete addr=0x7f2bac107e48, in-use=131440, alloc=133416)
LORE: or-expansion is better cost:12.033860

LORE: ******** Same chain after expansion ********
****************
QUERY BLOCK TEXT
****************
SELECT /*+ OPT_PARAM('_optimizer_cbqt_or_expansion' 'off') */ null FROM l, t1, t2 WHERE  
(  ( t1.m = :v1 AND t2.c1 BETWEEN 11 AND 12)       OR 
   ( t1.m = :v2 AND t2.c1 = 103 AND t2.c2 = 13  )   )  AND 
    ( l.id = t1.id AND l.id2 = t2.id )
---------------------
QUERY BLOCK SIGNATURE
---------------------
signature (optimizer): qb_name=SEL$1 nbfros=3 flg=0
  fro(0): flg=0 objn=73644 hint_alias="L"@"SEL$1"
  fro(1): flg=0 objn=73646 hint_alias="T1"@"SEL$1"
  fro(2): flg=0 objn=73648 hint_alias="T2"@"SEL$1"

-----------------------------
SYSTEM STATISTICS INFORMATION
-----------------------------
Using dictionary system stats.
  Using NOWORKLOAD Stats
  CPUSPEEDNW: 2467 millions instructions/sec (default is 100)
  IOTFRSPEED: 4096 bytes per millisecond (default is 4096)
  IOSEEKTIM:  10 milliseconds (default is 10)
  MBRC:       NO VALUE blocks (default is 8)

***************************************
BASE STATISTICAL INFORMATION
***********************
Table Stats::
  Table: T2  Alias: T2
  #Rows: 10000  SSZ: 0  LGR: 0  #Blks:  25  AvgRowLen:  10.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): C1(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#3): C2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#1): ID(NUMBER)
    AvgLen: 4 NDV: 10000 Nulls: 0 Density: 0.000100 Min: 1.000000 Max: 10000.000000
Index Stats::
  Index: T2_C1_C2_ID  Col#: 2 3 1
  LVLS: 1  #LB: 30  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 210.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
  Index: T2_ID  Col#: 1
  LVLS: 1  #LB: 20  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 21.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table: T1  Alias: T1
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): M(NUMBER)
    AvgLen: 3 NDV: 5 Nulls: 0 Density: 0.200000 Min: 0.000000 Max: 4.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: T1_M_ID  Col#: 2 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table:  L  Alias:  L
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
  Column (#2): ID2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: L_ID  Col#: 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
=======================================
SPD: BEGIN context at query block level
=======================================
Query Block SEL$1 (#0)
Return code in qosdSetupDirCtx4QB: NOCTX
=====================================
SPD: END context at query block level
=====================================
Access path analysis for L
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for L[L] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Table: L  Alias: L
    Card: Original: 10.000000  Rounded: 10  Computed: 10.000000  Non Adjusted: 10.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                       =   30185.760000
  Access Path: TableScan
    Cost:  3.001020  Resp: 3.001020  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 30186
      Resp_io: 3.000000  Resp_cpu: 30186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: TableScan
         Cost: 3.001020  Degree: 1  Resp: 3.001020  Card: 10.000000  Bytes: 0.000000

Access path analysis for T1
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T1[T1] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE

 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)
  Estimated selectivity: 0.200000 , col: #2 
  Table: T1  Alias: T1
    Card: Original: 10.000000  Rounded: 4  Computed: 4.000000  Non Adjusted: 4.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2700.000000 (cpu filter eval) (= 270.000000 (per row) * 10.000000 (#rows))
                       =   32885.760000
  Access Path: TableScan
    Cost:  3.001111  Resp: 3.001111  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 32886
      Resp_io: 3.000000  Resp_cpu: 32886
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 11021
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  2.000372  Resp: 2.000372  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 11021
      Resp_io: 2.000000  Resp_cpu: 11021
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.400000 
    Cost: 1.000508  Resp: 1.000508  Degree: 1
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    Cost: 1.000254  Resp: 1.000254  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    Cost: 1.000254  Resp: 1.000254  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 2.000267, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T1_M_ID
         Cost: 1.000508  Degree: 1  Resp: 1.000508  Card: 4.000000  Bytes: 0.000000

Access path analysis for T2
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T2[T2] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Estimated selectivity: 0.100000 , col: #2 
  Estimated selectivity: 0.100000 , col: #3 


 kkecdn: Single Table Predicate:"T2"."C1"=103
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C2"=13
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Table: T2  Alias: T2
    Card: Original: 10000.000000  Rounded: 1  Computed: 0.027778  Non Adjusted: 0.027778
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2065  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.000000 (cpu filter eval) (= 50.002500 (per row) * 10000.000000 (#rows))
                       =   2578061.000000
  Access Path: TableScan
    Cost:  9.087077  Resp: 9.087077  Degree: 0
      Cost_io: 9.000000  Cost_cpu: 2578061
      Resp_io: 9.000000  Resp_cpu: 2578061
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  10.064636  Resp: 10.064636  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 1913668
      Resp_io: 10.000000  Resp_cpu: 1913668
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 2.000000  resc_cpu: 14443
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.7778e-06 
    Cost: 2.000488  Resp: 2.000488  Degree: 1
  ****** trying bitmap/domain indexes ******

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 2.000000  resc_cpu: 14443
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.7778e-06 
    Cost: 2.000488  Resp: 2.000488  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 4.000000  resc_cpu: 228486
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    Cost: 4.007717  Resp: 4.007717  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_C1_C2_ID
      Cost = 3.000488, sel = 2.7778e-06
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T2_C1_C2_ID
         Cost: 2.000488  Degree: 1  Resp: 2.000488  Card: 0.027778  Bytes: 0.000000

(newjo-restore) [2 1 0 ]
***************************************


OPTIMIZER STATISTICS AND COMPUTATIONS
PJE:  Bypassed; QB is OR expanded SEL$1 (#0)
***************************************
GENERAL PLANS
***************************************
Considering cardinality-based initial join order.
Permutations for Starting Table :0
Join order[1]:  L[L]#0  T1[T1]#1  T2[T2]#2

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 770.000000 (cpu filter eval) (= 77.000000 (per row) * 10.000000 (#rows))
                       =   30955.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 15.011475  Resp: 15.011475  Degree: 1
      Cost_io: 15.000000  Cost_cpu: 339743
      Resp_io: 15.000000  Resp_cpu: 339743
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9091
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.004090  Resp: 7.004090  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 121100
      Resp_io: 7.000000  Resp_cpu: 121100
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 13.005965  Resp: 13.005965  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 176615
      Resp_io: 13.000000  Resp_cpu: 176615
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.001374  Resp: 3.001374  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 40686
      Resp_io: 3.000000  Resp_cpu: 40686

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.001374  Resp: 3.001374  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 40686
      Resp_io: 3.000000  Resp_cpu: 40686
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 13.003560  Resp: 13.003560  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 105400
      Resp_io: 13.000000  Resp_cpu: 105400
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 3.001375, sel = 0.020000
    Used T1_M_ID
      Cost = 3.001375, sel = 0.020000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 7.004090
          resc: 7.004090  resc_io: 7.000000  resc_cpu: 121100
          resp: 7.004090  resp_io: 7.000000  resc_cpu: 121100
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  10.000000 = outer (10.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 10 Computed: 10.000000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 6.001590  Resp: 6.001590  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001590 
     resc: 6.001590 resc_io: 4.000000 resc_cpu: 59260769
     resp: 6.001590 resp_io: 4.000000 resp_cpu: 59260769
SM Join (with index on outer)
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 2.000000  resc_cpu: 17943
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 2.000606  Resp: 2.000606  Degree: 1
  Outer table:  L  Alias: L
    resc: 2.000606  card 10.000000  bytes:   deg: 1  resp: 2.000606
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 4.001126  Resp: 4.001126  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020330  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021878  Resp: 4.021878  [multiMatchCost=0.000020]
HA Join
  HA cost: 4.021878  
     resc: 4.021878 resc_io: 4.000000 resc_cpu: 647729
     resp: 4.021878 resp_io: 4.000000 resp_cpu: 647729
Best:: JoinMethod: SortMerge
       Cost: 4.001126  Degree: 1  Resp: 4.001126  Card: 10.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 4.001126  Resp: 4.001126  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.033788 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.033788
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 73.871892  Resp: 73.871892  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 55420798
      Resp_io: 72.000000  Resp_cpu: 55420798
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 87.647486  Resp: 87.647486  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 48776870
      Resp_io: 86.000000  Resp_cpu: 48776870
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.004254  Resp: 14.004254  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 29732802
      Resp_io: 13.000000  Resp_cpu: 29732802
kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 5.5557e-12 
    NL Join : Cost: 14.003994  Resp: 14.003994  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 29725078
      Resp_io: 13.000000  Resp_cpu: 29725078
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.004254  Resp: 14.004254  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 29732802
      Resp_io: 13.000000  Resp_cpu: 29732802
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 14.003994
          resc: 14.003994  resc_io: 13.000000  resc_cpu: 29725078
          resp: 14.003994  resp_io: 13.000000  resc_cpu: 29725078
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.000556 = outer (10.000000) * inner (0.027778) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  0.027778, outer: 10.000000, inner: 0.027778, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  T1  Alias: T1
    resc: 4.001126  card 10.000000  bytes:   deg: 1  resp: 4.001126
  Inner table:  T2  Alias: T2
    resc: 2.000488  card: 0.027778  bytes:   deg: 1  resp: 2.000488
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 8.001665  Resp: 8.001665  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.001665 
     resc: 8.001665 resc_io: 5.000000 resc_cpu: 88869811
     resp: 8.001665 resp_io: 5.000000 resp_cpu: 88869811
  Outer table:  T1  Alias: T1
    resc: 4.001126  card 10.000000  bytes:   deg: 1  resp: 4.001126
  Inner table:  T2  Alias: T2
    resc: 2.000488  card: 0.027778  bytes:   deg: 1  resp: 2.000488
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.021934  Resp: 6.021934  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.021934  
     resc: 6.021934 resc_io: 5.000000 resc_cpu: 30256231
     resp: 6.021934 resp_io: 5.000000 resp_cpu: 30256231
Best:: JoinMethod: Hash
       Cost: 6.021934  Degree: 1  Resp: 6.021934  Card: 0.000556 Bytes: 
***********************
Best so far:  Table#: 0  cost: 2.000606  card: 10.000000  bytes: 60.000000
              Table#: 1  cost: 4.001126  card: 10.000000  bytes: 120.000000
              Table#: 2  cost: 6.021934  card: 0.000556  bytes: 22.000000
***********************
Join order[2]:  L[L]#0  T2[T2]#2  T1[T1]#1

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.024975 (cpu filter eval) (= 50.002502 (per row) * 10000.000000 (#rows))
                       =   2578061.024975
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 72.871785  Resp: 72.871785  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 25810796
      Resp_io: 72.000000  Resp_cpu: 25810796
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 86.647380  Resp: 86.647380  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 19166868
      Resp_io: 86.000000  Resp_cpu: 19166868
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004148  Resp: 13.004148  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122800
      Resp_io: 13.000000  Resp_cpu: 122800
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.7778e-10 
    NL Join : Cost: 13.003780  Resp: 13.003780  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 111900
      Resp_io: 13.000000  Resp_cpu: 111900
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004148  Resp: 13.004148  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122800
      Resp_io: 13.000000  Resp_cpu: 122800
  ****** trying bitmap/domain indexes ******

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.7778e-10 
    NL Join : Cost: 13.003780  Resp: 13.003780  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 111900
      Resp_io: 13.000000  Resp_cpu: 111900

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 33.076075  Resp: 33.076075  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 2252329
      Resp_io: 33.000000  Resp_cpu: 2252329
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_C1_C2_ID
      Cost = 13.003780, sel = 2.7778e-07
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 13.003780
          resc: 13.003780  resc_io: 13.000000  resc_cpu: 111900
          resp: 13.003780  resp_io: 13.000000  resc_cpu: 111900
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.027778 = outer (10.000000) * inner (0.027778) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.027778
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 2.000488  card: 0.027778  bytes:   deg: 1  resp: 2.000488
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 7.001558  Resp: 7.001558  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001558 
     resc: 7.001558 resc_io: 5.000000 resc_cpu: 59259809
     resp: 7.001558 resp_io: 5.000000 resp_cpu: 59259809
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 2.000488  card: 0.027778  bytes:   deg: 1  resp: 2.000488
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021827  Resp: 5.021827  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021827  
     resc: 5.021827 resc_io: 5.000000 resc_cpu: 646229
     resp: 5.021827 resp_io: 5.000000 resp_cpu: 646229
Best:: JoinMethod: Hash
       Cost: 5.021827  Degree: 1  Resp: 5.021827  Card: 0.027778 Bytes: 

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.027778  Cost: 5.021827  Resp: 5.021827  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 822.978415 (cpu filter eval) (= 82.297841 (per row) * 10.000000 (#rows))
                       =   31008.738415
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 8.022874  Resp: 8.022874  Degree: 1
      Cost_io: 8.000000  Cost_cpu: 677237
      Resp_io: 8.000000  Resp_cpu: 677237
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 9144
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.022136  Resp: 7.022136  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 655373
      Resp_io: 7.000000  Resp_cpu: 655373
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.004000 
    NL Join : Cost: 6.022343  Resp: 6.022343  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 661507
      Resp_io: 6.000000  Resp_cpu: 661507
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.021862  Resp: 5.021862  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 647279
      Resp_io: 5.000000  Resp_cpu: 647279

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.021862  Resp: 5.021862  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 647279
      Resp_io: 5.000000  Resp_cpu: 647279
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 6.022081  Resp: 6.022081  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 653750
      Resp_io: 6.000000  Resp_cpu: 653750
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Not used  bitmap node 
    Used  bitmap node 
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  Access path: Bitmap index - accepted
    Cost: 14.442524 Cost_io: 13.398006 Cost_cpu: 30924879.681888 Sel: 0.200000
    Not Believed to be index-only
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 6.022343
          resc: 6.022343  resc_io: 6.000000  resc_cpu: 661507
          resp: 6.022343  resp_io: 6.000000  resc_cpu: 661507
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.000556 = outer (0.027778) * inner (10.000000) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  0.027778, outer: 0.027778, inner: 10.000000, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  T2  Alias: T2
    resc: 5.021827  card 0.027778  bytes:   deg: 1  resp: 5.021827
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 8.022347  Resp: 8.022347  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.022347 
     resc: 8.022347 resc_io: 6.000000 resc_cpu: 59875315
     resp: 8.022347 resp_io: 6.000000 resp_cpu: 59875315
  Outer table:  T2  Alias: T2
    resc: 5.021827  card 0.027778  bytes:   deg: 1  resp: 5.021827
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020284  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.042619  Resp: 6.042619  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.042619  
     resc: 6.042619 resc_io: 6.000000 resc_cpu: 1261822
     resp: 6.042619 resp_io: 6.000000 resp_cpu: 1261822
Join order aborted: cost > best plan cost
***********************
Join order[3]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   1.500000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.500000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.500000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 7.004654  Resp: 7.004654  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 137786
      Resp_io: 7.000000  Resp_cpu: 137786
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001635
          resc: 5.001635  resc_io: 5.000000  resc_cpu: 48409
          resp: 5.001635  resp_io: 5.000000  resc_cpu: 48409
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  10.000000 = outer (10.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 10 Computed: 10.000000
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001590  Resp: 6.001590  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001590 
     resc: 6.001590 resc_io: 4.000000 resc_cpu: 59260769
     resp: 6.001590 resp_io: 4.000000 resp_cpu: 59260769
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021847  Resp: 4.021847  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021847  
     resc: 4.021847 resc_io: 4.000000 resc_cpu: 646829
     resp: 4.021847 resp_io: 4.000000 resp_cpu: 646829
Best:: JoinMethod: Hash
       Cost: 4.021847  Degree: 1  Resp: 4.021847  Card: 10.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 4.021847  Resp: 4.021847  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.033788 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.033788
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 73.892613  Resp: 73.892613  Degree: 1
      Cost_io: 73.000000  Cost_cpu: 26427439
      Resp_io: 73.000000  Resp_cpu: 26427439
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 87.668207  Resp: 87.668207  Degree: 1
      Cost_io: 87.000000  Cost_cpu: 19783511
      Resp_io: 87.000000  Resp_cpu: 19783511
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.024975  Resp: 14.024975  Degree: 1
      Cost_io: 14.000000  Cost_cpu: 739443
      Resp_io: 14.000000  Resp_cpu: 739443
kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 5.5557e-12 
    NL Join : Cost: 14.024715  Resp: 14.024715  Degree: 1
      Cost_io: 14.000000  Cost_cpu: 731719
      Resp_io: 14.000000  Resp_cpu: 731719
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.024975  Resp: 14.024975  Degree: 1
      Cost_io: 14.000000  Cost_cpu: 739443
      Resp_io: 14.000000  Resp_cpu: 739443
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 14.024715
          resc: 14.024715  resc_io: 14.000000  resc_cpu: 731719
          resp: 14.024715  resp_io: 14.000000  resc_cpu: 731719
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.000556 = outer (10.000000) * inner (0.027778) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  0.027778, outer: 10.000000, inner: 0.027778, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  L  Alias: L
    resc: 4.021847  card 10.000000  bytes:   deg: 1  resp: 4.021847
  Inner table:  T2  Alias: T2
    resc: 2.000488  card: 0.027778  bytes:   deg: 1  resp: 2.000488
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 8.022386  Resp: 8.022386  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.022386 
     resc: 8.022386 resc_io: 6.000000 resc_cpu: 59876451
     resp: 8.022386 resp_io: 6.000000 resp_cpu: 59876451
  Outer table:  L  Alias: L
    resc: 4.021847  card 10.000000  bytes:   deg: 1  resp: 4.021847
  Inner table:  T2  Alias: T2
    resc: 2.000488  card: 0.027778  bytes:   deg: 1  resp: 2.000488
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.042655  Resp: 6.042655  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.042655  
     resc: 6.042655 resc_io: 6.000000 resc_cpu: 1262872
     resp: 6.042655 resp_io: 6.000000 resp_cpu: 1262872
Join order aborted: cost > best plan cost
***********************
Join order[4]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.250000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   7.250000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.250000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500033.821619 (cpu filter eval) (= 50.003382 (per row) * 10000.000000 (#rows))
                       =   2578069.821619
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 30.348815  Resp: 30.348815  Degree: 1
      Cost_io: 30.000000  Cost_cpu: 10327322
      Resp_io: 30.000000  Resp_cpu: 10327322
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.500000  resc_cpu: 1913677
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 35.259053  Resp: 35.259053  Degree: 1
      Cost_io: 35.000000  Cost_cpu: 7669751
      Resp_io: 35.000000  Resp_cpu: 7669751
kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-06  ix_sel_with_filters: 5.5557e-08 
    NL Join : Cost: 5.001655  Resp: 5.001655  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48999
      Resp_io: 5.000000  Resp_cpu: 48999
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001655
          resc: 5.001655  resc_io: 5.000000  resc_cpu: 48999
          resp: 5.001655  resp_io: 5.000000  resc_cpu: 48999
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.005556 = outer (10.000000) * inner (0.027778) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  0.277778, outer: 10.000000, inner: 0.027778, sel: 0.020001
Join Card - Rounded: 1 Computed: 0.005556
Best:: JoinMethod: NestedLoop
       Cost: 5.001655  Degree: 1  Resp: 5.001655  Card: 0.005556 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.005556  Cost: 5.001655  Resp: 5.001655  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 8.002691  Resp: 8.002691  Degree: 1
      Cost_io: 8.000000  Cost_cpu: 79685
      Resp_io: 8.000000  Resp_cpu: 79685
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 6.001938  Resp: 6.001938  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 57390
      Resp_io: 6.000000  Resp_cpu: 57390
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 6.001938  Resp: 6.001938  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 57390
      Resp_io: 6.000000  Resp_cpu: 57390
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 6.001938
          resc: 6.001938  resc_io: 6.000000  resc_cpu: 57390
          resp: 6.001938  resp_io: 6.000000  resc_cpu: 57390
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000556 = outer (0.005556) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  T2  Alias: T2
    resc: 5.001655  card 0.005556  bytes:   deg: 1  resp: 5.001655
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 10.002725  Resp: 10.002725  [multiMatchCost=0.000000]
SM Join
  SM cost: 10.002725 
     resc: 10.002725 resc_io: 8.000000 resc_cpu: 59294365
     resp: 10.002725 resp_io: 8.000000 resp_cpu: 59294365
  Outer table:  T2  Alias: T2
    resc: 5.001655  card 0.005556  bytes:   deg: 1  resp: 5.001655
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 8.022979  Resp: 8.022979  [multiMatchCost=0.000000]
HA Join
  HA cost: 8.022979  
     resc: 8.022979 resc_io: 8.000000 resc_cpu: 680335
     resp: 8.022979 resp_io: 8.000000 resp_cpu: 680335
Plan cardinality mismatch: best card= 0.00055557068   curr card= 0.00055557068
Best:: JoinMethod: NestedLoop
       Cost: 6.001938  Degree: 1  Resp: 6.001938  Card: 0.000556 Bytes: 
***********************
Best so far:  Table#: 1  cost: 1.000508  card: 4.000000  bytes: 24.000000
              Table#: 2  cost: 5.001655  card: 0.005556  bytes: 16.000000
              Table#: 0  cost: 6.001938  card: 0.000556  bytes: 22.000000
***********************
Join order[5]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000488  Resp: 2.000488  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001524  Resp: 5.001524  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45129
      Resp_io: 5.000000  Resp_cpu: 45129
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001524
          resc: 5.001524  resc_io: 5.000000  resc_cpu: 45129
          resp: 5.001524  resp_io: 5.000000  resc_cpu: 45129
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.027778 = outer (0.027778) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.027778
  Outer table:  T2  Alias: T2
    resc: 2.000488  card 0.027778  bytes:   deg: 1  resp: 2.000488
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001558  Resp: 7.001558  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001558 
     resc: 7.001558 resc_io: 5.000000 resc_cpu: 59259809
     resp: 7.001558 resp_io: 5.000000 resp_cpu: 59259809
  Outer table:  T2  Alias: T2
    resc: 2.000488  card 0.027778  bytes:   deg: 1  resp: 2.000488
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021812  Resp: 5.021812  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021812  
     resc: 5.021812 resc_io: 5.000000 resc_cpu: 645779
     resp: 5.021812 resp_io: 5.000000 resp_cpu: 645779
Best:: JoinMethod: Hash
       Cost: 5.021812  Degree: 1  Resp: 5.021812  Card: 0.027778 Bytes: 

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.027778  Cost: 5.021812  Resp: 5.021812  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2080  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 822.978415 (cpu filter eval) (= 82.297841 (per row) * 10.000000 (#rows))
                       =   31008.738415
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 8.022859  Resp: 8.022859  Degree: 1
      Cost_io: 8.000000  Cost_cpu: 676787
      Resp_io: 8.000000  Resp_cpu: 676787
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 9144
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.022121  Resp: 7.022121  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 654923
      Resp_io: 7.000000  Resp_cpu: 654923
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.004000 
    NL Join : Cost: 6.022328  Resp: 6.022328  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 661057
      Resp_io: 6.000000  Resp_cpu: 661057
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.021847  Resp: 5.021847  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 646829
      Resp_io: 5.000000  Resp_cpu: 646829

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.021847  Resp: 5.021847  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 646829
      Resp_io: 5.000000  Resp_cpu: 646829
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 6.022066  Resp: 6.022066  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 653300
      Resp_io: 6.000000  Resp_cpu: 653300
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Not used  bitmap node 
    Used  bitmap node 
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  Access path: Bitmap index - accepted
    Cost: 14.442494 Cost_io: 13.398006 Cost_cpu: 30923979.681888 Sel: 0.200000
    Not Believed to be index-only
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 6.022328
          resc: 6.022328  resc_io: 6.000000  resc_cpu: 661057
          resp: 6.022328  resp_io: 6.000000  resc_cpu: 661057
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.000556 = outer (0.027778) * inner (10.000000) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  0.027778, outer: 0.027778, inner: 10.000000, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  L  Alias: L
    resc: 5.021812  card 0.027778  bytes:   deg: 1  resp: 5.021812
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 8.022332  Resp: 8.022332  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.022332 
     resc: 8.022332 resc_io: 6.000000 resc_cpu: 59874865
     resp: 8.022332 resp_io: 6.000000 resp_cpu: 59874865
  Outer table:  L  Alias: L
    resc: 5.021812  card 0.027778  bytes:   deg: 1  resp: 5.021812
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020284  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.042604  Resp: 6.042604  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.042604  
     resc: 6.042604 resc_io: 6.000000 resc_cpu: 1261372
     resp: 6.042604 resp_io: 6.000000 resp_cpu: 1261372
Plan cardinality mismatch: best card= 0.00055557068   curr card= 0.00055557068
Join order aborted: cost > best plan cost
***********************
Join order[6]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000488  Resp: 2.000488  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 3229.784148 (cpu filter eval) (= 322.978415 (per row) * 10.000000 (#rows))
                       =   33415.544148
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001616  Resp: 5.001616  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 47858
      Resp_io: 5.000000  Resp_cpu: 47858
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 11551
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000878  Resp: 4.000878  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 25994
      Resp_io: 4.000000  Resp_cpu: 25994
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 3.001039  Resp: 3.001039  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 30756
      Resp_io: 3.000000  Resp_cpu: 30756
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 3.000742  Resp: 3.000742  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 21964
      Resp_io: 3.000000  Resp_cpu: 21964
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 3.000742  Resp: 3.000742  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 21964
      Resp_io: 3.000000  Resp_cpu: 21964
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 4.000757, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.001039
          resc: 3.001039  resc_io: 3.000000  resc_cpu: 30756
          resp: 3.001039  resp_io: 3.000000  resc_cpu: 30756
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.005556 = outer (0.027778) * inner (10.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  0.277778, outer: 0.027778, inner: 10.000000, sel: 0.020001
Join Card - Rounded: 1 Computed: 0.005556
Best:: JoinMethod: NestedLoop
       Cost: 3.001039  Degree: 1  Resp: 3.001039  Card: 0.005556 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.005556  Cost: 3.001039  Resp: 3.001039  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.002075  Resp: 6.002075  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 61442
      Resp_io: 6.000000  Resp_cpu: 61442
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001322  Resp: 4.001322  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 39148
      Resp_io: 4.000000  Resp_cpu: 39148
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001322  Resp: 4.001322  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 39148
      Resp_io: 4.000000  Resp_cpu: 39148
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001322
          resc: 4.001322  resc_io: 4.000000  resc_cpu: 39148
          resp: 4.001322  resp_io: 4.000000  resc_cpu: 39148
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000556 = outer (0.005556) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  T1  Alias: T1
    resc: 3.001039  card 0.005556  bytes:   deg: 1  resp: 3.001039
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.002109  Resp: 8.002109  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.002109 
     resc: 8.002109 resc_io: 6.000000 resc_cpu: 59276122
     resp: 8.002109 resp_io: 6.000000 resp_cpu: 59276122
  Outer table:  T1  Alias: T1
    resc: 3.001039  card 0.005556  bytes:   deg: 1  resp: 3.001039
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022363  Resp: 6.022363  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022363  
     resc: 6.022363 resc_io: 6.000000 resc_cpu: 662092
     resp: 6.022363 resp_io: 6.000000 resp_cpu: 662092
Best:: JoinMethod: NestedLoop
       Cost: 4.001322  Degree: 1  Resp: 4.001322  Card: 0.000556 Bytes: 
***********************
Best so far:  Table#: 2  cost: 2.000488  card: 0.027778  bytes: 10.000000
              Table#: 1  cost: 3.001039  card: 0.005556  bytes: 16.000000
              Table#: 0  cost: 4.001322  card: 0.000556  bytes: 22.000000
***********************
Permutations for Starting Table :1
Join order[7]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000488  Resp: 2.000488  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001524  Resp: 5.001524  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45129
      Resp_io: 5.000000  Resp_cpu: 45129
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001524
          resc: 5.001524  resc_io: 5.000000  resc_cpu: 45129
          resp: 5.001524  resp_io: 5.000000  resc_cpu: 45129
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.027778 = outer (0.027778) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.027778
  Outer table:  T2  Alias: T2
    resc: 2.000488  card 0.027778  bytes:   deg: 1  resp: 2.000488
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001558  Resp: 7.001558  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001558 
     resc: 7.001558 resc_io: 5.000000 resc_cpu: 59259809
     resp: 7.001558 resp_io: 5.000000 resp_cpu: 59259809
  Outer table:  T2  Alias: T2
    resc: 2.000488  card 0.027778  bytes:   deg: 1  resp: 2.000488
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021812  Resp: 5.021812  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021812  
     resc: 5.021812 resc_io: 5.000000 resc_cpu: 645779
     resp: 5.021812 resp_io: 5.000000 resp_cpu: 645779
Join order aborted: cost > best plan cost
***********************
Join order[8]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000488  Resp: 2.000488  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 3229.784148 (cpu filter eval) (= 322.978415 (per row) * 10.000000 (#rows))
                       =   33415.544148
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001616  Resp: 5.001616  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 47858
      Resp_io: 5.000000  Resp_cpu: 47858
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 11551
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000878  Resp: 4.000878  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 25994
      Resp_io: 4.000000  Resp_cpu: 25994
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 3.001039  Resp: 3.001039  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 30756
      Resp_io: 3.000000  Resp_cpu: 30756
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 3.000742  Resp: 3.000742  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 21964
      Resp_io: 3.000000  Resp_cpu: 21964
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 3.000742  Resp: 3.000742  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 21964
      Resp_io: 3.000000  Resp_cpu: 21964
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 4.000757, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.001039
          resc: 3.001039  resc_io: 3.000000  resc_cpu: 30756
          resp: 3.001039  resp_io: 3.000000  resc_cpu: 30756
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.005556 = outer (0.027778) * inner (10.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  0.277778, outer: 0.027778, inner: 10.000000, sel: 0.020001
Join Card - Rounded: 1 Computed: 0.005556
Best:: JoinMethod: NestedLoop
       Cost: 3.001039  Degree: 1  Resp: 3.001039  Card: 0.005556 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.005556  Cost: 3.001039  Resp: 3.001039  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.002075  Resp: 6.002075  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 61442
      Resp_io: 6.000000  Resp_cpu: 61442
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001322  Resp: 4.001322  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 39148
      Resp_io: 4.000000  Resp_cpu: 39148
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001322  Resp: 4.001322  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 39148
      Resp_io: 4.000000  Resp_cpu: 39148
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001322
          resc: 4.001322  resc_io: 4.000000  resc_cpu: 39148
          resp: 4.001322  resp_io: 4.000000  resc_cpu: 39148
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000556 = outer (0.005556) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  T1  Alias: T1
    resc: 3.001039  card 0.005556  bytes:   deg: 1  resp: 3.001039
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.002109  Resp: 8.002109  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.002109 
     resc: 8.002109 resc_io: 6.000000 resc_cpu: 59276122
     resp: 8.002109 resp_io: 6.000000 resp_cpu: 59276122
  Outer table:  T1  Alias: T1
    resc: 3.001039  card 0.005556  bytes:   deg: 1  resp: 3.001039
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022363  Resp: 6.022363  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022363  
     resc: 6.022363 resc_io: 6.000000 resc_cpu: 662092
     resp: 6.022363 resp_io: 6.000000 resp_cpu: 662092
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :2
Join order[9]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   1.500000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.500000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.500000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 7.004654  Resp: 7.004654  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 137786
      Resp_io: 7.000000  Resp_cpu: 137786
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001635
          resc: 5.001635  resc_io: 5.000000  resc_cpu: 48409
          resp: 5.001635  resp_io: 5.000000  resc_cpu: 48409
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  10.000000 = outer (10.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 10 Computed: 10.000000
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001590  Resp: 6.001590  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001590 
     resc: 6.001590 resc_io: 4.000000 resc_cpu: 59260769
     resp: 6.001590 resp_io: 4.000000 resp_cpu: 59260769
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021847  Resp: 4.021847  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021847  
     resc: 4.021847 resc_io: 4.000000 resc_cpu: 646829
     resp: 4.021847 resp_io: 4.000000 resp_cpu: 646829
Join order aborted: cost > best plan cost
***********************
Join order[10]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.250000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2065  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   7.250000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.250000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500033.821619 (cpu filter eval) (= 50.003382 (per row) * 10000.000000 (#rows))
                       =   2578069.821619
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 30.348815  Resp: 30.348815  Degree: 1
      Cost_io: 30.000000  Cost_cpu: 10327322
      Resp_io: 30.000000  Resp_cpu: 10327322
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.500000  resc_cpu: 1913677
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 35.259053  Resp: 35.259053  Degree: 1
      Cost_io: 35.000000  Cost_cpu: 7669751
      Resp_io: 35.000000  Resp_cpu: 7669751
kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-06  ix_sel_with_filters: 5.5557e-08 
    NL Join : Cost: 5.001655  Resp: 5.001655  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48999
      Resp_io: 5.000000  Resp_cpu: 48999
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001655
          resc: 5.001655  resc_io: 5.000000  resc_cpu: 48999
          resp: 5.001655  resp_io: 5.000000  resc_cpu: 48999
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.005556 = outer (10.000000) * inner (0.027778) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  0.277778, outer: 10.000000, inner: 0.027778, sel: 0.020001
Join Card - Rounded: 1 Computed: 0.005556
Join order aborted: cost > best plan cost
***********************
Join order[11]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000488  Resp: 2.000488  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001524  Resp: 5.001524  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45129
      Resp_io: 5.000000  Resp_cpu: 45129
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001524
          resc: 5.001524  resc_io: 5.000000  resc_cpu: 45129
          resp: 5.001524  resp_io: 5.000000  resc_cpu: 45129
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.027778 = outer (0.027778) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.027778
  Outer table:  T2  Alias: T2
    resc: 2.000488  card 0.027778  bytes:   deg: 1  resp: 2.000488
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001558  Resp: 7.001558  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001558 
     resc: 7.001558 resc_io: 5.000000 resc_cpu: 59259809
     resp: 7.001558 resp_io: 5.000000 resp_cpu: 59259809
  Outer table:  T2  Alias: T2
    resc: 2.000488  card 0.027778  bytes:   deg: 1  resp: 2.000488
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021812  Resp: 5.021812  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021812  
     resc: 5.021812 resc_io: 5.000000 resc_cpu: 645779
     resp: 5.021812 resp_io: 5.000000 resp_cpu: 645779
Join order aborted: cost > best plan cost
***********************
Join order[12]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000488  Resp: 2.000488  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2080  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 3229.784148 (cpu filter eval) (= 322.978415 (per row) * 10.000000 (#rows))
                       =   33415.544148
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001616  Resp: 5.001616  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 47858
      Resp_io: 5.000000  Resp_cpu: 47858
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 11551
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000878  Resp: 4.000878  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 25994
      Resp_io: 4.000000  Resp_cpu: 25994
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 3.001039  Resp: 3.001039  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 30756
      Resp_io: 3.000000  Resp_cpu: 30756
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 3.000742  Resp: 3.000742  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 21964
      Resp_io: 3.000000  Resp_cpu: 21964
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 3.000742  Resp: 3.000742  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 21964
      Resp_io: 3.000000  Resp_cpu: 21964
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 4.000757, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.001039
          resc: 3.001039  resc_io: 3.000000  resc_cpu: 30756
          resp: 3.001039  resp_io: 3.000000  resc_cpu: 30756
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.005556 = outer (0.027778) * inner (10.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  0.277778, outer: 0.027778, inner: 10.000000, sel: 0.020001
Join Card - Rounded: 1 Computed: 0.005556
Best:: JoinMethod: NestedLoop
       Cost: 3.001039  Degree: 1  Resp: 3.001039  Card: 0.005556 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.005556  Cost: 3.001039  Resp: 3.001039  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.002075  Resp: 6.002075  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 61442
      Resp_io: 6.000000  Resp_cpu: 61442
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001322  Resp: 4.001322  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 39148
      Resp_io: 4.000000  Resp_cpu: 39148
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001322  Resp: 4.001322  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 39148
      Resp_io: 4.000000  Resp_cpu: 39148
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001322
          resc: 4.001322  resc_io: 4.000000  resc_cpu: 39148
          resp: 4.001322  resp_io: 4.000000  resc_cpu: 39148
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000556 = outer (0.005556) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  T1  Alias: T1
    resc: 3.001039  card 0.005556  bytes:   deg: 1  resp: 3.001039
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.002109  Resp: 8.002109  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.002109 
     resc: 8.002109 resc_io: 6.000000 resc_cpu: 59276122
     resp: 8.002109 resp_io: 6.000000 resp_cpu: 59276122
  Outer table:  T1  Alias: T1
    resc: 3.001039  card 0.005556  bytes:   deg: 1  resp: 3.001039
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022363  Resp: 6.022363  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022363  
     resc: 6.022363 resc_io: 6.000000 resc_cpu: 662092
     resp: 6.022363 resp_io: 6.000000 resp_cpu: 662092
Join order aborted: cost > best plan cost
***********************
(newjo-stop-1) k:2, spcnt:2, perm:12, maxperm:120

*********************************
Number of join permutations tried: 12
*********************************
Enumerating distribution method (advanced)
--- Distribution method for 
join between T2[T2](serial) and T1[T1](serial); jm = 14; right side access path = IndexRange
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL
--- Distribution method for 
join between T1[T1](serial) and L[L](serial); jm = 14; right side access path = IndexUnique
kkopqIsSerialJoin: serial NLJ: both inputs serial
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL

LORE: Trying or-Expansion on query block SEL$1 (#0)

LORE: ******** Next OR predicate ********

LORE: Trying or-Expansion on query block SEL$1 (#0) on OR chain:
id=0  predicate=("T1"."M"=TO_NUMBER(:B1) AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=TO_NUMBER(:B2) AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"

LORE: ******** OR-branching ********

LORE: or-expansion-subheap (create addr=0x7f2bac0464d8)
****************
QUERY BLOCK TEXT
****************
SELECT /*+ OPT_PARAM('_optimizer_cbqt_or_expansion' 'off') */ null FROM l, t1, t2 WHERE  
(  ( t1.m = :v1 AND t2.c1 BETWEEN 11 AND 12)       OR 
   ( t1.m = :v2 AND t2.c1 = 103 AND t2.c2 = 13  )   )  AND 
    ( l.id = t1.id AND l.id2 = t2.id )
---------------------
QUERY BLOCK SIGNATURE
---------------------
signature (optimizer): qb_name=SEL$1 nbfros=3 flg=0
  fro(0): flg=0 objn=73644 hint_alias="L"@"SEL$1"
  fro(1): flg=0 objn=73646 hint_alias="T1"@"SEL$1"
  fro(2): flg=0 objn=73648 hint_alias="T2"@"SEL$1"

-----------------------------
SYSTEM STATISTICS INFORMATION
-----------------------------
Using dictionary system stats.
  Using NOWORKLOAD Stats
  CPUSPEEDNW: 2467 millions instructions/sec (default is 100)
  IOTFRSPEED: 4096 bytes per millisecond (default is 4096)
  IOSEEKTIM:  10 milliseconds (default is 10)
  MBRC:       NO VALUE blocks (default is 8)

***************************************
BASE STATISTICAL INFORMATION
***********************
Table Stats::
  Table: T2  Alias: T2
  #Rows: 10000  SSZ: 0  LGR: 0  #Blks:  25  AvgRowLen:  10.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): C1(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#3): C2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#1): ID(NUMBER)
    AvgLen: 4 NDV: 10000 Nulls: 0 Density: 0.000100 Min: 1.000000 Max: 10000.000000
Index Stats::
  Index: T2_C1_C2_ID  Col#: 2 3 1
  LVLS: 1  #LB: 30  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 210.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
  Index: T2_ID  Col#: 1
  LVLS: 1  #LB: 20  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 21.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table: T1  Alias: T1
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): M(NUMBER)
    AvgLen: 3 NDV: 5 Nulls: 0 Density: 0.200000 Min: 0.000000 Max: 4.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: T1_M_ID  Col#: 2 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table:  L  Alias:  L
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
  Column (#2): ID2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: L_ID  Col#: 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
=======================================
SPD: BEGIN context at query block level
=======================================
Query Block SEL$1 (#0)
Return code in qosdSetupDirCtx4QB: NOCTX
=====================================
SPD: END context at query block level
=====================================
Access path analysis for L
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for L[L] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Table: L  Alias: L
    Card: Original: 10.000000  Rounded: 10  Computed: 10.000000  Non Adjusted: 10.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                       =   30185.760000
  Access Path: TableScan
    Cost:  3.001020  Resp: 3.001020  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 30186
      Resp_io: 3.000000  Resp_cpu: 30186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: TableScan
         Cost: 3.001020  Degree: 1  Resp: 3.001020  Card: 10.000000  Bytes: 0.000000

Access path analysis for T1
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T1[T1] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE


 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)
  Estimated selectivity: 0.200000 , col: #2 

 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1)
  Estimated selectivity: 0.200000 , col: #2 
  Table: T1  Alias: T1
    Card: Original: 10.000000  Rounded: 1  Computed: 0.800000  Non Adjusted: 0.800000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Access Path: TableScan
    Cost:  3.001088  Resp: 3.001088  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 32226
      Resp_io: 3.000000  Resp_cpu: 32226
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  2.000350  Resp: 2.000350  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 10361
      Resp_io: 2.000000  Resp_cpu: 10361
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    Cost: 1.000272  Resp: 1.000272  Degree: 1
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T1_M_ID
         Cost: 1.000272  Degree: 1  Resp: 1.000272  Card: 0.800000  Bytes: 0.000000

Access path analysis for T2
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T2[T2] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Estimated selectivity: 0.100000 , col: #2 
  Estimated selectivity: 0.100000 , col: #3 


 kkecdn: Single Table Predicate:"T2"."C1"=103
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C2"=13
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1">=11
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1"<=12
  Estimated selectivity: 1.000000 , col: #2 
  Table: T2  Alias: T2
    Card: Original: 10000.000000  Rounded: 1  Computed: 0.000000  Non Adjusted: 0.000000
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2065  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500026.496914 (cpu filter eval) (= 50.002650 (per row) * 10000.000000 (#rows))
                       =   2578062.496914
  Access Path: TableScan
    Cost:  9.087077  Resp: 9.087077  Degree: 0
      Cost_io: 9.000000  Cost_cpu: 2578062
      Resp_io: 9.000000  Resp_cpu: 2578062
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913670
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  10.064636  Resp: 10.064636  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 1913670
      Resp_io: 10.000000  Resp_cpu: 1913670
kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 2.000000  resc_cpu: 14443
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.1605e-07 
    Cost: 2.000490  Resp: 2.000490  Degree: 1
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T2_C1_C2_ID
         Cost: 2.000490  Degree: 1  Resp: 2.000490  Card: 0.000000  Bytes: 0.000000

(newjo-restore) [2 1 0 ]
***************************************


OPTIMIZER STATISTICS AND COMPUTATIONS
PJE:  Bypassed; QB is OR expanded SEL$1 (#0)
***************************************
GENERAL PLANS
***************************************
Considering cardinality-based initial join order.
Permutations for Starting Table :0
Join order[1]:  L[L]#0  T1[T1]#1  T2[T2]#2

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 704.000000 (cpu filter eval) (= 70.400000 (per row) * 10.000000 (#rows))
                       =   30889.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 15.011453  Resp: 15.011453  Degree: 1
      Cost_io: 15.000000  Cost_cpu: 339083
      Resp_io: 15.000000  Resp_cpu: 339083
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9025
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.004068  Resp: 7.004068  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 120440
      Resp_io: 7.000000  Resp_cpu: 120440
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 3.001465  Resp: 3.001465  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 43386
      Resp_io: 3.000000  Resp_cpu: 43386
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.001465
          resc: 3.001465  resc_io: 3.000000  resc_cpu: 43386
          resp: 3.001465  resp_io: 3.000000  resc_cpu: 43386
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  2.000000 = outer (10.000000) * inner (2.000000) * sel (0.100000)
Join Card - Rounded: 2 Computed: 2.000000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
SM Join (with index on outer)
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 2.000000  resc_cpu: 17943
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 2.000606  Resp: 2.000606  Degree: 1
  Outer table:  L  Alias: L
    resc: 2.000606  card 10.000000  bytes:   deg: 1  resp: 2.000606
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 4.000878  Resp: 4.000878  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021615  Resp: 4.021615  [multiMatchCost=0.000003]
HA Join
  HA cost: 4.021615  
     resc: 4.021615 resc_io: 4.000000 resc_cpu: 639947
     resp: 4.021615 resp_io: 4.000000 resp_cpu: 639947
Best:: JoinMethod: NestedLoop
       Cost: 3.001465  Degree: 1  Resp: 3.001465  Card: 2.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 2.000000  Cost: 3.001465  Resp: 3.001465  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.500000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2065  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   7.500000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.500000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.026470 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.026470
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 18.175618  Resp: 18.175618  Degree: 1
      Cost_io: 18.000000  Cost_cpu: 5199508
      Resp_io: 18.000000  Resp_cpu: 5199508
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 9.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 21.130737  Resp: 21.130737  Degree: 1
      Cost_io: 21.000000  Cost_cpu: 3870722
      Resp_io: 21.000000  Resp_cpu: 3870722
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 5.002091  Resp: 5.002091  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 61909
      Resp_io: 5.000000  Resp_cpu: 61909
kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.1605e-11 
    NL Join : Cost: 5.002021  Resp: 5.002021  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 59836
      Resp_io: 5.000000  Resp_cpu: 59836
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 5.002091  Resp: 5.002091  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 61909
      Resp_io: 5.000000  Resp_cpu: 61909
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.002021
          resc: 5.002021  resc_io: 5.000000  resc_cpu: 59836
          resp: 5.002021  resp_io: 5.000000  resc_cpu: 59836
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (2.000000) * inner (0.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T1  Alias: T1
    resc: 3.001465  card 2.000000  bytes:   deg: 1  resp: 3.001465
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 7.001958  Resp: 7.001958  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001958 
     resc: 7.001958 resc_io: 5.000000 resc_cpu: 59271656
     resp: 7.001958 resp_io: 5.000000 resp_cpu: 59271656
  Outer table:  T1  Alias: T1
    resc: 3.001465  card 2.000000  bytes:   deg: 1  resp: 3.001465
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020279  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.022234  Resp: 5.022234  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.022234  
     resc: 5.022234 resc_io: 5.000000 resc_cpu: 658283
     resp: 5.022234 resp_io: 5.000000 resp_cpu: 658283
Best:: JoinMethod: NestedLoop
       Cost: 5.002021  Degree: 1  Resp: 5.002021  Card: 0.000000 Bytes: 
***********************
Best so far:  Table#: 0  cost: 3.001020  card: 10.000000  bytes: 60.000000
              Table#: 1  cost: 3.001465  card: 2.000000  bytes: 24.000000
              Table#: 2  cost: 5.002021  card: 0.000000  bytes: 22.000000
***********************
Join order[2]:  L[L]#0  T2[T2]#2  T1[T1]#1

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.026470 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.026470
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 72.871785  Resp: 72.871785  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 25810796
      Resp_io: 72.000000  Resp_cpu: 25810796
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 86.647380  Resp: 86.647380  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 19166868
      Resp_io: 86.000000  Resp_cpu: 19166868
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004148  Resp: 13.004148  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122800
      Resp_io: 13.000000  Resp_cpu: 122800
kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.1605e-11 
    NL Join : Cost: 13.003798  Resp: 13.003798  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 112439
      Resp_io: 13.000000  Resp_cpu: 112439
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004148  Resp: 13.004148  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122800
      Resp_io: 13.000000  Resp_cpu: 122800
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 13.003798
          resc: 13.003798  resc_io: 13.000000  resc_cpu: 112439
          resp: 13.003798  resp_io: 13.000000  resc_cpu: 112439
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (10.000000) * inner (0.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259862
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259862
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021829  Resp: 5.021829  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021829  
     resc: 5.021829 resc_io: 5.000000 resc_cpu: 646283
     resp: 5.021829 resp_io: 5.000000 resp_cpu: 646283
Join order aborted: cost > best plan cost
***********************
Join order[3]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 4.001309  Resp: 4.001309  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 38747
      Resp_io: 4.000000  Resp_cpu: 38747
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000554
          resc: 2.000554  resc_io: 2.000000  resc_cpu: 16403
          resp: 2.000554  resp_io: 2.000000  resc_cpu: 16403
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  2.000000 = outer (2.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 2 Computed: 2.000000
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021596  Resp: 4.021596  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021596  
     resc: 4.021596 resc_io: 4.000000 resc_cpu: 639397
     resp: 4.021596 resp_io: 4.000000 resp_cpu: 639397
Best:: JoinMethod: NestedLoop
       Cost: 2.000554  Degree: 1  Resp: 2.000554  Card: 2.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 2.000000  Cost: 2.000554  Resp: 2.000554  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.500000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   7.500000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.500000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.026470 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.026470
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 17.174707  Resp: 17.174707  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 5172525
      Resp_io: 17.000000  Resp_cpu: 5172525
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 9.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 20.129826  Resp: 20.129826  Degree: 1
      Cost_io: 20.000000  Cost_cpu: 3843739
      Resp_io: 20.000000  Resp_cpu: 3843739
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001180  Resp: 4.001180  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 34926
      Resp_io: 4.000000  Resp_cpu: 34926
kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.1605e-11 
    NL Join : Cost: 4.001110  Resp: 4.001110  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 32854
      Resp_io: 4.000000  Resp_cpu: 32854
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001180  Resp: 4.001180  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 34926
      Resp_io: 4.000000  Resp_cpu: 34926
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001110
          resc: 4.001110  resc_io: 4.000000  resc_cpu: 32854
          resp: 4.001110  resp_io: 4.000000  resc_cpu: 32854
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (2.000000) * inner (0.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  L  Alias: L
    resc: 2.000554  card 2.000000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 6.001047  Resp: 6.001047  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001047 
     resc: 6.001047 resc_io: 4.000000 resc_cpu: 59244673
     resp: 6.001047 resp_io: 4.000000 resp_cpu: 59244673
  Outer table:  L  Alias: L
    resc: 2.000554  card 2.000000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020279  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021323  Resp: 4.021323  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021323  
     resc: 4.021323 resc_io: 4.000000 resc_cpu: 631300
     resp: 4.021323 resp_io: 4.000000 resp_cpu: 631300
Best:: JoinMethod: NestedLoop
       Cost: 4.001110  Degree: 1  Resp: 4.001110  Card: 0.000000 Bytes: 
***********************
Best so far:  Table#: 1  cost: 1.000272  card: 0.800000  bytes: 6.000000
              Table#: 0  cost: 2.000554  card: 2.000000  bytes: 24.000000
              Table#: 2  cost: 4.001110  card: 0.000000  bytes: 22.000000
***********************
Join order[4]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500026.496914 (cpu filter eval) (= 50.002650 (per row) * 10000.000000 (#rows))
                       =   2578062.496914
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 10.087349  Resp: 10.087349  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 2586124
      Resp_io: 10.000000  Resp_cpu: 2586124
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913670
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 11.064908  Resp: 11.064908  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1921731
      Resp_io: 11.000000  Resp_cpu: 1921731
kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.1605e-07 
    NL Join : Cost: 2.000550  Resp: 2.000550  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16287
      Resp_io: 2.000000  Resp_cpu: 16287
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000550
          resc: 2.000550  resc_io: 2.000000  resc_cpu: 16287
          resp: 2.000550  resp_io: 2.000000  resc_cpu: 16287
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (2.000000) * inner (0.000000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 2.000550  Degree: 1  Resp: 2.000550  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000550  Resp: 2.000550  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001587  Resp: 5.001587  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46973
      Resp_io: 5.000000  Resp_cpu: 46973
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000834  Resp: 3.000834  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24678
      Resp_io: 3.000000  Resp_cpu: 24678
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000834  Resp: 3.000834  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24678
      Resp_io: 3.000000  Resp_cpu: 24678
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000834
          resc: 3.000834  resc_io: 3.000000  resc_cpu: 24678
          resp: 3.000834  resp_io: 3.000000  resc_cpu: 24678
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.000000  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001620  Resp: 7.001620  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001620 
     resc: 7.001620 resc_io: 5.000000 resc_cpu: 59261652
     resp: 7.001620 resp_io: 5.000000 resp_cpu: 59261652
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.000000  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021874  Resp: 5.021874  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021874  
     resc: 5.021874 resc_io: 5.000000 resc_cpu: 647623
     resp: 5.021874 resp_io: 5.000000 resp_cpu: 647623
Best:: JoinMethod: NestedLoop
       Cost: 3.000834  Degree: 1  Resp: 3.000834  Card: 0.000000 Bytes: 
***********************
Best so far:  Table#: 1  cost: 1.000272  card: 0.800000  bytes: 6.000000
              Table#: 2  cost: 2.000550  card: 0.000000  bytes: 16.000000
              Table#: 0  cost: 3.000834  card: 0.000000  bytes: 22.000000
***********************
Join order[5]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001526  Resp: 5.001526  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45183
      Resp_io: 5.000000  Resp_cpu: 45183
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001526
          resc: 5.001526  resc_io: 5.000000  resc_cpu: 45183
          resp: 5.001526  resp_io: 5.000000  resc_cpu: 45183
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259862
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259862
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021814  Resp: 5.021814  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021814  
     resc: 5.021814 resc_io: 5.000000 resc_cpu: 645833
     resp: 5.021814 resp_io: 5.000000 resp_cpu: 645833
Join order aborted: cost > best plan cost
***********************
Join order[6]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001578  Resp: 5.001578  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46723
      Resp_io: 5.000000  Resp_cpu: 46723
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000840  Resp: 4.000840  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 24858
      Resp_io: 4.000000  Resp_cpu: 24858
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    NL Join : Cost: 3.000762  Resp: 3.000762  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 22558
      Resp_io: 3.000000  Resp_cpu: 22558
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000762
          resc: 3.000762  resc_io: 3.000000  resc_cpu: 22558
          resp: 3.000762  resp_io: 3.000000  resc_cpu: 22558
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (2.000000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 3.000762  Degree: 1  Resp: 3.000762  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 3.000762  Resp: 3.000762  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.001798  Resp: 6.001798  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 53244
      Resp_io: 6.000000  Resp_cpu: 53244
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30950
      Resp_io: 4.000000  Resp_cpu: 30950
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30950
      Resp_io: 4.000000  Resp_cpu: 30950
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001045
          resc: 4.001045  resc_io: 4.000000  resc_cpu: 30950
          resp: 4.001045  resp_io: 4.000000  resc_cpu: 30950
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.001832  Resp: 8.001832  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.001832 
     resc: 8.001832 resc_io: 6.000000 resc_cpu: 59267924
     resp: 8.001832 resp_io: 6.000000 resp_cpu: 59267924
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022086  Resp: 6.022086  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022086  
     resc: 6.022086 resc_io: 6.000000 resc_cpu: 653894
     resp: 6.022086 resp_io: 6.000000 resp_cpu: 653894
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :1
Join order[7]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001526  Resp: 5.001526  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45183
      Resp_io: 5.000000  Resp_cpu: 45183
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001526
          resc: 5.001526  resc_io: 5.000000  resc_cpu: 45183
          resp: 5.001526  resp_io: 5.000000  resc_cpu: 45183
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259862
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259862
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021814  Resp: 5.021814  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021814  
     resc: 5.021814 resc_io: 5.000000 resc_cpu: 645833
     resp: 5.021814 resp_io: 5.000000 resp_cpu: 645833
Join order aborted: cost > best plan cost
***********************
Join order[8]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001578  Resp: 5.001578  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46723
      Resp_io: 5.000000  Resp_cpu: 46723
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000840  Resp: 4.000840  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 24858
      Resp_io: 4.000000  Resp_cpu: 24858
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    NL Join : Cost: 3.000762  Resp: 3.000762  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 22558
      Resp_io: 3.000000  Resp_cpu: 22558
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000762
          resc: 3.000762  resc_io: 3.000000  resc_cpu: 22558
          resp: 3.000762  resp_io: 3.000000  resc_cpu: 22558
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (2.000000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 3.000762  Degree: 1  Resp: 3.000762  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 3.000762  Resp: 3.000762  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.001798  Resp: 6.001798  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 53244
      Resp_io: 6.000000  Resp_cpu: 53244
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30950
      Resp_io: 4.000000  Resp_cpu: 30950
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30950
      Resp_io: 4.000000  Resp_cpu: 30950
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001045
          resc: 4.001045  resc_io: 4.000000  resc_cpu: 30950
          resp: 4.001045  resp_io: 4.000000  resc_cpu: 30950
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.001832  Resp: 8.001832  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.001832 
     resc: 8.001832 resc_io: 6.000000 resc_cpu: 59267924
     resp: 8.001832 resp_io: 6.000000 resp_cpu: 59267924
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022086  Resp: 6.022086  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022086  
     resc: 6.022086 resc_io: 6.000000 resc_cpu: 653894
     resp: 6.022086 resp_io: 6.000000 resp_cpu: 653894
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :2
Join order[9]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 4.001309  Resp: 4.001309  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 38747
      Resp_io: 4.000000  Resp_cpu: 38747
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000554
          resc: 2.000554  resc_io: 2.000000  resc_cpu: 16403
          resp: 2.000554  resp_io: 2.000000  resc_cpu: 16403
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  2.000000 = outer (2.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 2 Computed: 2.000000
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021596  Resp: 4.021596  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021596  
     resc: 4.021596 resc_io: 4.000000 resc_cpu: 639397
     resp: 4.021596 resp_io: 4.000000 resp_cpu: 639397
Best:: JoinMethod: NestedLoop
       Cost: 2.000554  Degree: 1  Resp: 2.000554  Card: 2.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 2.000000  Cost: 2.000554  Resp: 2.000554  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.500000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2065  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   7.500000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.500000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.026470 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.026470
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 17.174707  Resp: 17.174707  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 5172525
      Resp_io: 17.000000  Resp_cpu: 5172525
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 9.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 20.129826  Resp: 20.129826  Degree: 1
      Cost_io: 20.000000  Cost_cpu: 3843739
      Resp_io: 20.000000  Resp_cpu: 3843739
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001180  Resp: 4.001180  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 34926
      Resp_io: 4.000000  Resp_cpu: 34926
kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.1605e-11 
    NL Join : Cost: 4.001110  Resp: 4.001110  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 32854
      Resp_io: 4.000000  Resp_cpu: 32854
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001180  Resp: 4.001180  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 34926
      Resp_io: 4.000000  Resp_cpu: 34926
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001110
          resc: 4.001110  resc_io: 4.000000  resc_cpu: 32854
          resp: 4.001110  resp_io: 4.000000  resc_cpu: 32854
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (2.000000) * inner (0.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  L  Alias: L
    resc: 2.000554  card 2.000000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 6.001047  Resp: 6.001047  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001047 
     resc: 6.001047 resc_io: 4.000000 resc_cpu: 59244673
     resp: 6.001047 resp_io: 4.000000 resp_cpu: 59244673
  Outer table:  L  Alias: L
    resc: 2.000554  card 2.000000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020279  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021323  Resp: 4.021323  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021323  
     resc: 4.021323 resc_io: 4.000000 resc_cpu: 631300
     resp: 4.021323 resp_io: 4.000000 resp_cpu: 631300
Join order aborted: cost > best plan cost
***********************
Join order[10]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500026.496914 (cpu filter eval) (= 50.002650 (per row) * 10000.000000 (#rows))
                       =   2578062.496914
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 10.087349  Resp: 10.087349  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 2586124
      Resp_io: 10.000000  Resp_cpu: 2586124
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913670
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 11.064908  Resp: 11.064908  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1921731
      Resp_io: 11.000000  Resp_cpu: 1921731
kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.1605e-07 
    NL Join : Cost: 2.000550  Resp: 2.000550  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16287
      Resp_io: 2.000000  Resp_cpu: 16287
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000550
          resc: 2.000550  resc_io: 2.000000  resc_cpu: 16287
          resp: 2.000550  resp_io: 2.000000  resc_cpu: 16287
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (2.000000) * inner (0.000000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 2.000550  Degree: 1  Resp: 2.000550  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000550  Resp: 2.000550  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001587  Resp: 5.001587  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46973
      Resp_io: 5.000000  Resp_cpu: 46973
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000834  Resp: 3.000834  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24678
      Resp_io: 3.000000  Resp_cpu: 24678
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000834  Resp: 3.000834  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24678
      Resp_io: 3.000000  Resp_cpu: 24678
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000834
          resc: 3.000834  resc_io: 3.000000  resc_cpu: 24678
          resp: 3.000834  resp_io: 3.000000  resc_cpu: 24678
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.000000  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001620  Resp: 7.001620  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001620 
     resc: 7.001620 resc_io: 5.000000 resc_cpu: 59261652
     resp: 7.001620 resp_io: 5.000000 resp_cpu: 59261652
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.000000  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021874  Resp: 5.021874  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021874  
     resc: 5.021874 resc_io: 5.000000 resc_cpu: 647623
     resp: 5.021874 resp_io: 5.000000 resp_cpu: 647623
Join order aborted: cost > best plan cost
***********************
Join order[11]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001526  Resp: 5.001526  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45183
      Resp_io: 5.000000  Resp_cpu: 45183
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001526
          resc: 5.001526  resc_io: 5.000000  resc_cpu: 45183
          resp: 5.001526  resp_io: 5.000000  resc_cpu: 45183
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259862
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259862
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021814  Resp: 5.021814  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021814  
     resc: 5.021814 resc_io: 5.000000 resc_cpu: 645833
     resp: 5.021814 resp_io: 5.000000 resp_cpu: 645833
Join order aborted: cost > best plan cost
***********************
Join order[12]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001578  Resp: 5.001578  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46723
      Resp_io: 5.000000  Resp_cpu: 46723
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000840  Resp: 4.000840  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 24858
      Resp_io: 4.000000  Resp_cpu: 24858
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    NL Join : Cost: 3.000762  Resp: 3.000762  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 22558
      Resp_io: 3.000000  Resp_cpu: 22558
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000762
          resc: 3.000762  resc_io: 3.000000  resc_cpu: 22558
          resp: 3.000762  resp_io: 3.000000  resc_cpu: 22558
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (2.000000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 3.000762  Degree: 1  Resp: 3.000762  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 3.000762  Resp: 3.000762  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.001798  Resp: 6.001798  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 53244
      Resp_io: 6.000000  Resp_cpu: 53244
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30950
      Resp_io: 4.000000  Resp_cpu: 30950
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30950
      Resp_io: 4.000000  Resp_cpu: 30950
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001045
          resc: 4.001045  resc_io: 4.000000  resc_cpu: 30950
          resp: 4.001045  resp_io: 4.000000  resc_cpu: 30950
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.001832  Resp: 8.001832  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.001832 
     resc: 8.001832 resc_io: 6.000000 resc_cpu: 59267924
     resp: 8.001832 resp_io: 6.000000 resp_cpu: 59267924
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022086  Resp: 6.022086  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022086  
     resc: 6.022086 resc_io: 6.000000 resc_cpu: 653894
     resp: 6.022086 resp_io: 6.000000 resp_cpu: 653894
Join order aborted: cost > best plan cost
***********************
(newjo-stop-1) k:2, spcnt:2, perm:12, maxperm:120

*********************************
Number of join permutations tried: 12
*********************************
Enumerating distribution method (advanced)
--- Distribution method for 
join between T1[T1](serial) and T2[T2](serial); jm = 14; right side access path = IndexRange
---- serial Hash-Join -> NONE
--- Distribution method for 
join between T2[T2](serial) and L[L](serial); jm = 14; right side access path = IndexUnique
kkopqIsSerialJoin: serial NLJ: both inputs serial
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL

LORE: or-expansion-subheap (delete addr=0x7f2bac0464d8, in-use=116240, alloc=121920)

LORE: ******** OR-branching ********

LORE: or-expansion-subheap (create addr=0x7f2bac0464d8)
****************
QUERY BLOCK TEXT
****************
SELECT /*+ OPT_PARAM('_optimizer_cbqt_or_expansion' 'off') */ null FROM l, t1, t2 WHERE  
(  ( t1.m = :v1 AND t2.c1 BETWEEN 11 AND 12)       OR 
   ( t1.m = :v2 AND t2.c1 = 103 AND t2.c2 = 13  )   )  AND 
    ( l.id = t1.id AND l.id2 = t2.id )
---------------------
QUERY BLOCK SIGNATURE
---------------------
signature (optimizer): qb_name=SEL$1 nbfros=3 flg=0
  fro(0): flg=0 objn=73644 hint_alias="L"@"SEL$1"
  fro(1): flg=0 objn=73646 hint_alias="T1"@"SEL$1"
  fro(2): flg=0 objn=73648 hint_alias="T2"@"SEL$1"

-----------------------------
SYSTEM STATISTICS INFORMATION
-----------------------------
Using dictionary system stats.
  Using NOWORKLOAD Stats
  CPUSPEEDNW: 2467 millions instructions/sec (default is 100)
  IOTFRSPEED: 4096 bytes per millisecond (default is 4096)
  IOSEEKTIM:  10 milliseconds (default is 10)
  MBRC:       NO VALUE blocks (default is 8)

***************************************
BASE STATISTICAL INFORMATION
***********************
Table Stats::
  Table: T2  Alias: T2
  #Rows: 10000  SSZ: 0  LGR: 0  #Blks:  25  AvgRowLen:  10.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): C1(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#3): C2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#1): ID(NUMBER)
    AvgLen: 4 NDV: 10000 Nulls: 0 Density: 0.000100 Min: 1.000000 Max: 10000.000000
Index Stats::
  Index: T2_C1_C2_ID  Col#: 2 3 1
  LVLS: 1  #LB: 30  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 210.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
  Index: T2_ID  Col#: 1
  LVLS: 1  #LB: 20  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 21.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table: T1  Alias: T1
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): M(NUMBER)
    AvgLen: 3 NDV: 5 Nulls: 0 Density: 0.200000 Min: 0.000000 Max: 4.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: T1_M_ID  Col#: 2 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table:  L  Alias:  L
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
  Column (#2): ID2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: L_ID  Col#: 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
=======================================
SPD: BEGIN context at query block level
=======================================
Query Block SEL$1 (#0)
Return code in qosdSetupDirCtx4QB: NOCTX
=====================================
SPD: END context at query block level
=====================================
Access path analysis for L
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for L[L] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Table: L  Alias: L
    Card: Original: 10.000000  Rounded: 10  Computed: 10.000000  Non Adjusted: 10.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                       =   30185.760000
  Access Path: TableScan
    Cost:  3.001020  Resp: 3.001020  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 30186
      Resp_io: 3.000000  Resp_cpu: 30186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: TableScan
         Cost: 3.001020  Degree: 1  Resp: 3.001020  Card: 10.000000  Bytes: 0.000000

Access path analysis for T1
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T1[T1] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE


 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)
  Estimated selectivity: 0.200000 , col: #2 

 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1)
  Estimated selectivity: 0.200000 , col: #2 
  Table: T1  Alias: T1
    Card: Original: 10.000000  Rounded: 1  Computed: 0.800000  Non Adjusted: 0.800000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Access Path: TableScan
    Cost:  3.001088  Resp: 3.001088  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 32226
      Resp_io: 3.000000  Resp_cpu: 32226
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  2.000350  Resp: 2.000350  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 10361
      Resp_io: 2.000000  Resp_cpu: 10361
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    Cost: 1.000272  Resp: 1.000272  Degree: 1
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T1_M_ID
         Cost: 1.000272  Degree: 1  Resp: 1.000272  Card: 0.800000  Bytes: 0.000000

Access path analysis for T2
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T2[T2] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Estimated selectivity: 0.100000 , col: #2 
  Estimated selectivity: 0.100000 , col: #3 


 kkecdn: Single Table Predicate:"T2"."C1"=103
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C2"=13
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1"=103
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C2"=13
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Table: T2  Alias: T2
    Card: Original: 10000.000000  Rounded: 1  Computed: 0.027778  Non Adjusted: 0.027778
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2065  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.001319 (cpu filter eval) (= 50.002500 (per row) * 10000.000000 (#rows))
                       =   2578061.001319
  Access Path: TableScan
    Cost:  9.087077  Resp: 9.087077  Degree: 0
      Cost_io: 9.000000  Cost_cpu: 2578061
      Resp_io: 9.000000  Resp_cpu: 2578061
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  10.064636  Resp: 10.064636  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 1913668
      Resp_io: 10.000000  Resp_cpu: 1913668
kkofmx: index filter:"T2"."C1"=103

kkofmx: index filter:"T2"."C2"=13

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 2.000000  resc_cpu: 14443
    ix_sel: 2.7778e-06  ix_sel_with_filters: 7.7160e-12 
    Cost: 2.000490  Resp: 2.000490  Degree: 1
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T2_C1_C2_ID
         Cost: 2.000490  Degree: 1  Resp: 2.000490  Card: 0.027778  Bytes: 0.000000

(newjo-restore) [2 1 0 ]
***************************************


OPTIMIZER STATISTICS AND COMPUTATIONS
PJE:  Bypassed; QB is OR expanded SEL$1 (#0)
***************************************
GENERAL PLANS
***************************************
Considering cardinality-based initial join order.
Permutations for Starting Table :0
Join order[1]:  L[L]#0  T1[T1]#1  T2[T2]#2

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 704.000000 (cpu filter eval) (= 70.400000 (per row) * 10.000000 (#rows))
                       =   30889.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 15.011453  Resp: 15.011453  Degree: 1
      Cost_io: 15.000000  Cost_cpu: 339083
      Resp_io: 15.000000  Resp_cpu: 339083
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9025
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.004068  Resp: 7.004068  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 120440
      Resp_io: 7.000000  Resp_cpu: 120440
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 3.001465  Resp: 3.001465  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 43386
      Resp_io: 3.000000  Resp_cpu: 43386
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.001465
          resc: 3.001465  resc_io: 3.000000  resc_cpu: 43386
          resp: 3.001465  resp_io: 3.000000  resc_cpu: 43386
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  2.000000 = outer (10.000000) * inner (2.000000) * sel (0.100000)
Join Card - Rounded: 2 Computed: 2.000000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
SM Join (with index on outer)
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 2.000000  resc_cpu: 17943
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 2.000606  Resp: 2.000606  Degree: 1
  Outer table:  L  Alias: L
    resc: 2.000606  card 10.000000  bytes:   deg: 1  resp: 2.000606
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 4.000878  Resp: 4.000878  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021615  Resp: 4.021615  [multiMatchCost=0.000003]
HA Join
  HA cost: 4.021615  
     resc: 4.021615 resc_io: 4.000000 resc_cpu: 639947
     resp: 4.021615 resp_io: 4.000000 resp_cpu: 639947
Best:: JoinMethod: NestedLoop
       Cost: 3.001465  Degree: 1  Resp: 3.001465  Card: 2.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 2.000000  Cost: 3.001465  Resp: 3.001465  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.500000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2081  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2080  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   7.500000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.500000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.001251 (cpu filter eval) (= 50.002500 (per row) * 10000.000000 (#rows))
                       =   2578061.001251
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 18.175618  Resp: 18.175618  Degree: 1
      Cost_io: 18.000000  Cost_cpu: 5199508
      Resp_io: 18.000000  Resp_cpu: 5199508
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 9.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 21.130737  Resp: 21.130737  Degree: 1
      Cost_io: 21.000000  Cost_cpu: 3870722
      Resp_io: 21.000000  Resp_cpu: 3870722
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 5.002091  Resp: 5.002091  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 61909
      Resp_io: 5.000000  Resp_cpu: 61909
kkofmx: index filter:"T2"."C1"=103

kkofmx: index filter:"T2"."C2"=13

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 7.7160e-16 
    NL Join : Cost: 5.002021  Resp: 5.002021  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 59829
      Resp_io: 5.000000  Resp_cpu: 59829
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 5.002091  Resp: 5.002091  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 61909
      Resp_io: 5.000000  Resp_cpu: 61909
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.002021
          resc: 5.002021  resc_io: 5.000000  resc_cpu: 59829
          resp: 5.002021  resp_io: 5.000000  resc_cpu: 59829
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.005556 = outer (2.000000) * inner (0.027778) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.005556
  Outer table:  T1  Alias: T1
    resc: 3.001465  card 2.000000  bytes:   deg: 1  resp: 3.001465
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.027778  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 7.001958  Resp: 7.001958  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001958 
     resc: 7.001958 resc_io: 5.000000 resc_cpu: 59271652
     resp: 7.001958 resp_io: 5.000000 resp_cpu: 59271652
  Outer table:  T1  Alias: T1
    resc: 3.001465  card 2.000000  bytes:   deg: 1  resp: 3.001465
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.027778  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020279  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.022234  Resp: 5.022234  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.022234  
     resc: 5.022234 resc_io: 5.000000 resc_cpu: 658279
     resp: 5.022234 resp_io: 5.000000 resp_cpu: 658279
Best:: JoinMethod: NestedLoop
       Cost: 5.002021  Degree: 1  Resp: 5.002021  Card: 0.005556 Bytes: 
***********************
Best so far:  Table#: 0  cost: 3.001020  card: 10.000000  bytes: 60.000000
              Table#: 1  cost: 3.001465  card: 2.000000  bytes: 24.000000
              Table#: 2  cost: 5.002021  card: 0.005556  bytes: 22.000000
***********************
Join order[2]:  L[L]#0  T2[T2]#2  T1[T1]#1

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.001251 (cpu filter eval) (= 50.002500 (per row) * 10000.000000 (#rows))
                       =   2578061.001251
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 72.871785  Resp: 72.871785  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 25810796
      Resp_io: 72.000000  Resp_cpu: 25810796
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 86.647380  Resp: 86.647380  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 19166868
      Resp_io: 86.000000  Resp_cpu: 19166868
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004148  Resp: 13.004148  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122800
      Resp_io: 13.000000  Resp_cpu: 122800
kkofmx: index filter:"T2"."C1"=103

kkofmx: index filter:"T2"."C2"=13

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 7.7160e-16 
    NL Join : Cost: 13.003796  Resp: 13.003796  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 112400
      Resp_io: 13.000000  Resp_cpu: 112400
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004148  Resp: 13.004148  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122800
      Resp_io: 13.000000  Resp_cpu: 122800
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 13.003796
          resc: 13.003796  resc_io: 13.000000  resc_cpu: 112400
          resp: 13.003796  resp_io: 13.000000  resc_cpu: 112400
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.027778 = outer (10.000000) * inner (0.027778) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.027778
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.027778  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259859
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259859
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.027778  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021829  Resp: 5.021829  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021829  
     resc: 5.021829 resc_io: 5.000000 resc_cpu: 646279
     resp: 5.021829 resp_io: 5.000000 resp_cpu: 646279
Join order aborted: cost > best plan cost
***********************
Join order[3]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 4.001309  Resp: 4.001309  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 38747
      Resp_io: 4.000000  Resp_cpu: 38747
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000554
          resc: 2.000554  resc_io: 2.000000  resc_cpu: 16403
          resp: 2.000554  resp_io: 2.000000  resc_cpu: 16403
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  2.000000 = outer (2.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 2 Computed: 2.000000
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021596  Resp: 4.021596  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021596  
     resc: 4.021596 resc_io: 4.000000 resc_cpu: 639397
     resp: 4.021596 resp_io: 4.000000 resp_cpu: 639397
Best:: JoinMethod: NestedLoop
       Cost: 2.000554  Degree: 1  Resp: 2.000554  Card: 2.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 2.000000  Cost: 2.000554  Resp: 2.000554  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.500000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   7.500000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.500000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.001251 (cpu filter eval) (= 50.002500 (per row) * 10000.000000 (#rows))
                       =   2578061.001251
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 17.174707  Resp: 17.174707  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 5172525
      Resp_io: 17.000000  Resp_cpu: 5172525
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 9.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 20.129826  Resp: 20.129826  Degree: 1
      Cost_io: 20.000000  Cost_cpu: 3843739
      Resp_io: 20.000000  Resp_cpu: 3843739
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001180  Resp: 4.001180  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 34926
      Resp_io: 4.000000  Resp_cpu: 34926
kkofmx: index filter:"T2"."C1"=103

kkofmx: index filter:"T2"."C2"=13

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 7.7160e-16 
    NL Join : Cost: 4.001109  Resp: 4.001109  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 32846
      Resp_io: 4.000000  Resp_cpu: 32846
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001180  Resp: 4.001180  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 34926
      Resp_io: 4.000000  Resp_cpu: 34926
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001109
          resc: 4.001109  resc_io: 4.000000  resc_cpu: 32846
          resp: 4.001109  resp_io: 4.000000  resc_cpu: 32846
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.005556 = outer (2.000000) * inner (0.027778) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.005556
  Outer table:  L  Alias: L
    resc: 2.000554  card 2.000000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.027778  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 6.001047  Resp: 6.001047  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001047 
     resc: 6.001047 resc_io: 4.000000 resc_cpu: 59244669
     resp: 6.001047 resp_io: 4.000000 resp_cpu: 59244669
  Outer table:  L  Alias: L
    resc: 2.000554  card 2.000000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.027778  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020279  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021323  Resp: 4.021323  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021323  
     resc: 4.021323 resc_io: 4.000000 resc_cpu: 631296
     resp: 4.021323 resp_io: 4.000000 resp_cpu: 631296
Best:: JoinMethod: NestedLoop
       Cost: 4.001109  Degree: 1  Resp: 4.001109  Card: 0.005556 Bytes: 
***********************
Best so far:  Table#: 1  cost: 1.000272  card: 0.800000  bytes: 6.000000
              Table#: 0  cost: 2.000554  card: 2.000000  bytes: 24.000000
              Table#: 2  cost: 4.001109  card: 0.005556  bytes: 22.000000
***********************
Join order[4]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.001319 (cpu filter eval) (= 50.002500 (per row) * 10000.000000 (#rows))
                       =   2578061.001319
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 10.087349  Resp: 10.087349  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 2586122
      Resp_io: 10.000000  Resp_cpu: 2586122
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 11.064908  Resp: 11.064908  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1921730
      Resp_io: 11.000000  Resp_cpu: 1921730
kkofmx: index filter:"T2"."C1"=103

kkofmx: index filter:"T2"."C2"=13

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-06  ix_sel_with_filters: 7.7160e-12 
    NL Join : Cost: 2.000550  Resp: 2.000550  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16283
      Resp_io: 2.000000  Resp_cpu: 16283
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000550
          resc: 2.000550  resc_io: 2.000000  resc_cpu: 16283
          resp: 2.000550  resp_io: 2.000000  resc_cpu: 16283
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.055556 = outer (2.000000) * inner (0.027778) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.055556
Best:: JoinMethod: NestedLoop
       Cost: 2.000550  Degree: 1  Resp: 2.000550  Card: 0.055556 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.055556  Cost: 2.000550  Resp: 2.000550  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001586  Resp: 5.001586  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46969
      Resp_io: 5.000000  Resp_cpu: 46969
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000833  Resp: 3.000833  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24674
      Resp_io: 3.000000  Resp_cpu: 24674
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000833  Resp: 3.000833  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24674
      Resp_io: 3.000000  Resp_cpu: 24674
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000833
          resc: 3.000833  resc_io: 3.000000  resc_cpu: 24674
          resp: 3.000833  resp_io: 3.000000  resc_cpu: 24674
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.005556 = outer (0.055556) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.005556
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.055556  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001620  Resp: 7.001620  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001620 
     resc: 7.001620 resc_io: 5.000000 resc_cpu: 59261649
     resp: 7.001620 resp_io: 5.000000 resp_cpu: 59261649
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.055556  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021874  Resp: 5.021874  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021874  
     resc: 5.021874 resc_io: 5.000000 resc_cpu: 647619
     resp: 5.021874 resp_io: 5.000000 resp_cpu: 647619
Plan cardinality mismatch: best card= 0.00555555556   curr card= 0.00555555556
Best:: JoinMethod: NestedLoop
       Cost: 3.000833  Degree: 1  Resp: 3.000833  Card: 0.005556 Bytes: 
***********************
Best so far:  Table#: 1  cost: 1.000272  card: 0.800000  bytes: 6.000000
              Table#: 2  cost: 2.000550  card: 0.055556  bytes: 16.000000
              Table#: 0  cost: 3.000833  card: 0.005556  bytes: 22.000000
***********************
Join order[5]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001526  Resp: 5.001526  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45179
      Resp_io: 5.000000  Resp_cpu: 45179
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001526
          resc: 5.001526  resc_io: 5.000000  resc_cpu: 45179
          resp: 5.001526  resp_io: 5.000000  resc_cpu: 45179
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.027778 = outer (0.027778) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.027778
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.027778  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259859
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259859
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.027778  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021813  Resp: 5.021813  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021813  
     resc: 5.021813 resc_io: 5.000000 resc_cpu: 645829
     resp: 5.021813 resp_io: 5.000000 resp_cpu: 645829
Join order aborted: cost > best plan cost
***********************
Join order[6]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001578  Resp: 5.001578  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46719
      Resp_io: 5.000000  Resp_cpu: 46719
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000839  Resp: 4.000839  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 24854
      Resp_io: 4.000000  Resp_cpu: 24854
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    NL Join : Cost: 3.000762  Resp: 3.000762  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 22554
      Resp_io: 3.000000  Resp_cpu: 22554
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000762
          resc: 3.000762  resc_io: 3.000000  resc_cpu: 22554
          resp: 3.000762  resp_io: 3.000000  resc_cpu: 22554
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.055556 = outer (0.027778) * inner (2.000000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.055556
Best:: JoinMethod: NestedLoop
       Cost: 3.000762  Degree: 1  Resp: 3.000762  Card: 0.055556 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.055556  Cost: 3.000762  Resp: 3.000762  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.001798  Resp: 6.001798  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 53241
      Resp_io: 6.000000  Resp_cpu: 53241
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30946
      Resp_io: 4.000000  Resp_cpu: 30946
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30946
      Resp_io: 4.000000  Resp_cpu: 30946
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001045
          resc: 4.001045  resc_io: 4.000000  resc_cpu: 30946
          resp: 4.001045  resp_io: 4.000000  resc_cpu: 30946
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.005556 = outer (0.055556) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.005556
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.055556  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.001832  Resp: 8.001832  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.001832 
     resc: 8.001832 resc_io: 6.000000 resc_cpu: 59267920
     resp: 8.001832 resp_io: 6.000000 resp_cpu: 59267920
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.055556  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022086  Resp: 6.022086  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022086  
     resc: 6.022086 resc_io: 6.000000 resc_cpu: 653890
     resp: 6.022086 resp_io: 6.000000 resp_cpu: 653890
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :1
Join order[7]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001526  Resp: 5.001526  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45179
      Resp_io: 5.000000  Resp_cpu: 45179
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001526
          resc: 5.001526  resc_io: 5.000000  resc_cpu: 45179
          resp: 5.001526  resp_io: 5.000000  resc_cpu: 45179
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.027778 = outer (0.027778) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.027778
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.027778  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259859
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259859
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.027778  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021813  Resp: 5.021813  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021813  
     resc: 5.021813 resc_io: 5.000000 resc_cpu: 645829
     resp: 5.021813 resp_io: 5.000000 resp_cpu: 645829
Join order aborted: cost > best plan cost
***********************
Join order[8]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001578  Resp: 5.001578  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46719
      Resp_io: 5.000000  Resp_cpu: 46719
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000839  Resp: 4.000839  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 24854
      Resp_io: 4.000000  Resp_cpu: 24854
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    NL Join : Cost: 3.000762  Resp: 3.000762  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 22554
      Resp_io: 3.000000  Resp_cpu: 22554
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000762
          resc: 3.000762  resc_io: 3.000000  resc_cpu: 22554
          resp: 3.000762  resp_io: 3.000000  resc_cpu: 22554
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.055556 = outer (0.027778) * inner (2.000000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.055556
Best:: JoinMethod: NestedLoop
       Cost: 3.000762  Degree: 1  Resp: 3.000762  Card: 0.055556 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.055556  Cost: 3.000762  Resp: 3.000762  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.001798  Resp: 6.001798  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 53241
      Resp_io: 6.000000  Resp_cpu: 53241
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30946
      Resp_io: 4.000000  Resp_cpu: 30946
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30946
      Resp_io: 4.000000  Resp_cpu: 30946
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001045
          resc: 4.001045  resc_io: 4.000000  resc_cpu: 30946
          resp: 4.001045  resp_io: 4.000000  resc_cpu: 30946
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.005556 = outer (0.055556) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.005556
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.055556  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.001832  Resp: 8.001832  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.001832 
     resc: 8.001832 resc_io: 6.000000 resc_cpu: 59267920
     resp: 8.001832 resp_io: 6.000000 resp_cpu: 59267920
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.055556  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022086  Resp: 6.022086  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022086  
     resc: 6.022086 resc_io: 6.000000 resc_cpu: 653890
     resp: 6.022086 resp_io: 6.000000 resp_cpu: 653890
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :2
Join order[9]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 4.001309  Resp: 4.001309  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 38747
      Resp_io: 4.000000  Resp_cpu: 38747
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000554
          resc: 2.000554  resc_io: 2.000000  resc_cpu: 16403
          resp: 2.000554  resp_io: 2.000000  resc_cpu: 16403
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  2.000000 = outer (2.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 2 Computed: 2.000000
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021596  Resp: 4.021596  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021596  
     resc: 4.021596 resc_io: 4.000000 resc_cpu: 639397
     resp: 4.021596 resp_io: 4.000000 resp_cpu: 639397
Best:: JoinMethod: NestedLoop
       Cost: 2.000554  Degree: 1  Resp: 2.000554  Card: 2.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 2.000000  Cost: 2.000554  Resp: 2.000554  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.500000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2081  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2080  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   7.500000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.500000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.001251 (cpu filter eval) (= 50.002500 (per row) * 10000.000000 (#rows))
                       =   2578061.001251
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 17.174707  Resp: 17.174707  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 5172525
      Resp_io: 17.000000  Resp_cpu: 5172525
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 9.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 20.129826  Resp: 20.129826  Degree: 1
      Cost_io: 20.000000  Cost_cpu: 3843739
      Resp_io: 20.000000  Resp_cpu: 3843739
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001180  Resp: 4.001180  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 34926
      Resp_io: 4.000000  Resp_cpu: 34926
kkofmx: index filter:"T2"."C1"=103

kkofmx: index filter:"T2"."C2"=13

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 7.7160e-16 
    NL Join : Cost: 4.001109  Resp: 4.001109  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 32846
      Resp_io: 4.000000  Resp_cpu: 32846
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001180  Resp: 4.001180  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 34926
      Resp_io: 4.000000  Resp_cpu: 34926
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001109
          resc: 4.001109  resc_io: 4.000000  resc_cpu: 32846
          resp: 4.001109  resp_io: 4.000000  resc_cpu: 32846
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.005556 = outer (2.000000) * inner (0.027778) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.005556
  Outer table:  L  Alias: L
    resc: 2.000554  card 2.000000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.027778  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 6.001047  Resp: 6.001047  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001047 
     resc: 6.001047 resc_io: 4.000000 resc_cpu: 59244669
     resp: 6.001047 resp_io: 4.000000 resp_cpu: 59244669
  Outer table:  L  Alias: L
    resc: 2.000554  card 2.000000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.027778  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020279  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021323  Resp: 4.021323  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021323  
     resc: 4.021323 resc_io: 4.000000 resc_cpu: 631296
     resp: 4.021323 resp_io: 4.000000 resp_cpu: 631296
Plan cardinality mismatch: best card= 0.00555555556   curr card= 0.00555555556
Join order aborted: cost > best plan cost
***********************
Join order[10]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.001319 (cpu filter eval) (= 50.002500 (per row) * 10000.000000 (#rows))
                       =   2578061.001319
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 10.087349  Resp: 10.087349  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 2586122
      Resp_io: 10.000000  Resp_cpu: 2586122
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 11.064908  Resp: 11.064908  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1921730
      Resp_io: 11.000000  Resp_cpu: 1921730
kkofmx: index filter:"T2"."C1"=103

kkofmx: index filter:"T2"."C2"=13

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-06  ix_sel_with_filters: 7.7160e-12 
    NL Join : Cost: 2.000550  Resp: 2.000550  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16283
      Resp_io: 2.000000  Resp_cpu: 16283
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000550
          resc: 2.000550  resc_io: 2.000000  resc_cpu: 16283
          resp: 2.000550  resp_io: 2.000000  resc_cpu: 16283
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.055556 = outer (2.000000) * inner (0.027778) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.055556
Best:: JoinMethod: NestedLoop
       Cost: 2.000550  Degree: 1  Resp: 2.000550  Card: 0.055556 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.055556  Cost: 2.000550  Resp: 2.000550  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001586  Resp: 5.001586  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46969
      Resp_io: 5.000000  Resp_cpu: 46969
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000833  Resp: 3.000833  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24674
      Resp_io: 3.000000  Resp_cpu: 24674
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000833  Resp: 3.000833  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24674
      Resp_io: 3.000000  Resp_cpu: 24674
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000833
          resc: 3.000833  resc_io: 3.000000  resc_cpu: 24674
          resp: 3.000833  resp_io: 3.000000  resc_cpu: 24674
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.005556 = outer (0.055556) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.005556
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.055556  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001620  Resp: 7.001620  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001620 
     resc: 7.001620 resc_io: 5.000000 resc_cpu: 59261649
     resp: 7.001620 resp_io: 5.000000 resp_cpu: 59261649
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.055556  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021874  Resp: 5.021874  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021874  
     resc: 5.021874 resc_io: 5.000000 resc_cpu: 647619
     resp: 5.021874 resp_io: 5.000000 resp_cpu: 647619
Join order aborted: cost > best plan cost
***********************
Join order[11]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001526  Resp: 5.001526  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45179
      Resp_io: 5.000000  Resp_cpu: 45179
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001526
          resc: 5.001526  resc_io: 5.000000  resc_cpu: 45179
          resp: 5.001526  resp_io: 5.000000  resc_cpu: 45179
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.027778 = outer (0.027778) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.027778
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.027778  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259859
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259859
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.027778  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021813  Resp: 5.021813  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021813  
     resc: 5.021813 resc_io: 5.000000 resc_cpu: 645829
     resp: 5.021813 resp_io: 5.000000 resp_cpu: 645829
Join order aborted: cost > best plan cost
***********************
Join order[12]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001578  Resp: 5.001578  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46719
      Resp_io: 5.000000  Resp_cpu: 46719
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000839  Resp: 4.000839  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 24854
      Resp_io: 4.000000  Resp_cpu: 24854
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    NL Join : Cost: 3.000762  Resp: 3.000762  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 22554
      Resp_io: 3.000000  Resp_cpu: 22554
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000762
          resc: 3.000762  resc_io: 3.000000  resc_cpu: 22554
          resp: 3.000762  resp_io: 3.000000  resc_cpu: 22554
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.055556 = outer (0.027778) * inner (2.000000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.055556
Best:: JoinMethod: NestedLoop
       Cost: 3.000762  Degree: 1  Resp: 3.000762  Card: 0.055556 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.055556  Cost: 3.000762  Resp: 3.000762  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.001798  Resp: 6.001798  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 53241
      Resp_io: 6.000000  Resp_cpu: 53241
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30946
      Resp_io: 4.000000  Resp_cpu: 30946
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30946
      Resp_io: 4.000000  Resp_cpu: 30946
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001045
          resc: 4.001045  resc_io: 4.000000  resc_cpu: 30946
          resp: 4.001045  resp_io: 4.000000  resc_cpu: 30946
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.005556 = outer (0.055556) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.005556
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.055556  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.001832  Resp: 8.001832  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.001832 
     resc: 8.001832 resc_io: 6.000000 resc_cpu: 59267920
     resp: 8.001832 resp_io: 6.000000 resp_cpu: 59267920
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.055556  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022086  Resp: 6.022086  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022086  
     resc: 6.022086 resc_io: 6.000000 resc_cpu: 653890
     resp: 6.022086 resp_io: 6.000000 resp_cpu: 653890
Join order aborted: cost > best plan cost
***********************
(newjo-stop-1) k:2, spcnt:2, perm:12, maxperm:120

*********************************
Number of join permutations tried: 12
*********************************
Enumerating distribution method (advanced)
--- Distribution method for 
join between T1[T1](serial) and T2[T2](serial); jm = 14; right side access path = IndexRange
---- serial Hash-Join -> NONE
--- Distribution method for 
join between T2[T2](serial) and L[L](serial); jm = 14; right side access path = IndexUnique
kkopqIsSerialJoin: serial NLJ: both inputs serial
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL

LORE: or-expansion-subheap (delete addr=0x7f2bac0464d8, in-use=116384, alloc=124800)
LORE: or-expansion is worse cost:6.001667
****************
QUERY BLOCK TEXT
****************
SELECT /*+ OPT_PARAM('_optimizer_cbqt_or_expansion' 'off') */ null FROM l, t1, t2 WHERE  
(  ( t1.m = :v1 AND t2.c1 BETWEEN 11 AND 12)       OR 
   ( t1.m = :v2 AND t2.c1 = 103 AND t2.c2 = 13  )   )  AND 
    ( l.id = t1.id AND l.id2 = t2.id )
---------------------
QUERY BLOCK SIGNATURE
---------------------
signature (optimizer): qb_name=SEL$1 nbfros=3 flg=0
  fro(0): flg=4 objn=73644 hint_alias="L"@"SEL$1"
  fro(1): flg=4 objn=73646 hint_alias="T1"@"SEL$1"
  fro(2): flg=4 objn=73648 hint_alias="T2"@"SEL$1"

-----------------------------
SYSTEM STATISTICS INFORMATION
-----------------------------
Using dictionary system stats.
  Using NOWORKLOAD Stats
  CPUSPEEDNW: 2467 millions instructions/sec (default is 100)
  IOTFRSPEED: 4096 bytes per millisecond (default is 4096)
  IOSEEKTIM:  10 milliseconds (default is 10)
  MBRC:       NO VALUE blocks (default is 8)

***************************************
BASE STATISTICAL INFORMATION
***********************
Table Stats::
  Table: T2  Alias: T2
  #Rows: 10000  SSZ: 0  LGR: 0  #Blks:  25  AvgRowLen:  10.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): C1(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#3): C2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#1): ID(NUMBER)
    AvgLen: 4 NDV: 10000 Nulls: 0 Density: 0.000100 Min: 1.000000 Max: 10000.000000
Index Stats::
  Index: T2_C1_C2_ID  Col#: 2 3 1
  LVLS: 1  #LB: 30  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 210.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
  Index: T2_ID  Col#: 1
  LVLS: 1  #LB: 20  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 21.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table: T1  Alias: T1
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): M(NUMBER)
    AvgLen: 3 NDV: 5 Nulls: 0 Density: 0.200000 Min: 0.000000 Max: 4.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: T1_M_ID  Col#: 2 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table:  L  Alias:  L
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
  Column (#2): ID2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: L_ID  Col#: 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
=======================================
SPD: BEGIN context at query block level
=======================================
Query Block SEL$1 (#0)
Return code in qosdSetupDirCtx4QB: NOCTX
=====================================
SPD: END context at query block level
=====================================
Access path analysis for L
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for L[L] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Table: L  Alias: L
    Card: Original: 10.000000  Rounded: 10  Computed: 10.000000  Non Adjusted: 10.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                       =   30185.760000
  Access Path: TableScan
    Cost:  3.001020  Resp: 3.001020  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 30186
      Resp_io: 3.000000  Resp_cpu: 30186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: TableScan
         Cost: 3.001020  Degree: 1  Resp: 3.001020  Card: 10.000000  Bytes: 0.000000

Access path analysis for T1
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T1[T1] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE

 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)
  Estimated selectivity: 0.200000 , col: #2 
  Table: T1  Alias: T1
    Card: Original: 10.000000  Rounded: 4  Computed: 4.000000  Non Adjusted: 4.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2700.000000 (cpu filter eval) (= 270.000000 (per row) * 10.000000 (#rows))
                       =   32885.760000
  Access Path: TableScan
    Cost:  3.001111  Resp: 3.001111  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 32886
      Resp_io: 3.000000  Resp_cpu: 32886
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 11021
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  2.000372  Resp: 2.000372  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 11021
      Resp_io: 2.000000  Resp_cpu: 11021
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.400000 
    Cost: 1.000508  Resp: 1.000508  Degree: 1
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    Cost: 1.000254  Resp: 1.000254  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    Cost: 1.000254  Resp: 1.000254  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 2.000267, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T1_M_ID
         Cost: 1.000508  Degree: 1  Resp: 1.000508  Card: 4.000000  Bytes: 0.000000

Access path analysis for T2
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T2[T2] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE


 kkecdn: Single Table Predicate: ?? 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1">=11
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1"<=12
  Estimated selectivity: 1.000000 , col: #2 
  Table: T2  Alias: T2
    Card: Original: 10000.000000  Rounded: 1000  Computed: 999.997222  Non Adjusted: 999.997222
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2065  ("T2"."C1">=11)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 577779.614198 (cpu filter eval) (= 57.777961 (per row) * 10000.000000 (#rows))
                       =   2655815.614198
  Access Path: TableScan
    Cost:  9.089703  Resp: 9.089703  Degree: 0
      Cost_io: 9.000000  Cost_cpu: 2655816
      Resp_io: 9.000000  Resp_cpu: 2655816
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1991423
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  10.067262  Resp: 10.067262  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 1991423
      Resp_io: 10.000000  Resp_cpu: 1991423
kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 4.000000  resc_cpu: 228486
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    Cost: 4.009406  Resp: 4.009406  Degree: 1
  ****** trying bitmap/domain indexes ******

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 4.000000  resc_cpu: 228486
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    Cost: 4.007717  Resp: 4.007717  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 4.000000  resc_cpu: 228486
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    Cost: 4.007717  Resp: 4.007717  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_C1_C2_ID
      Cost = 5.027447, sel = 0.100000
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T2_C1_C2_ID
         Cost: 4.009406  Degree: 1  Resp: 4.009406  Card: 999.997222  Bytes: 0.000000

(newjo-restore) [2 1 0 ]
***************************************


OPTIMIZER STATISTICS AND COMPUTATIONS
PJE:  Bypassed; QB is OR expanded SEL$1 (#0)
***************************************
GENERAL PLANS
***************************************
Considering cardinality-based initial join order.
Permutations for Starting Table :0
Join order[1]:  L[L]#0  T1[T1]#1  T2[T2]#2

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 770.000000 (cpu filter eval) (= 77.000000 (per row) * 10.000000 (#rows))
                       =   30955.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 15.011475  Resp: 15.011475  Degree: 1
      Cost_io: 15.000000  Cost_cpu: 339743
      Resp_io: 15.000000  Resp_cpu: 339743
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9091
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.004090  Resp: 7.004090  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 121100
      Resp_io: 7.000000  Resp_cpu: 121100
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 13.005965  Resp: 13.005965  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 176615
      Resp_io: 13.000000  Resp_cpu: 176615
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.001374  Resp: 3.001374  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 40686
      Resp_io: 3.000000  Resp_cpu: 40686

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.001374  Resp: 3.001374  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 40686
      Resp_io: 3.000000  Resp_cpu: 40686
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 13.003560  Resp: 13.003560  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 105400
      Resp_io: 13.000000  Resp_cpu: 105400
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 3.001375, sel = 0.020000
    Used T1_M_ID
      Cost = 3.001375, sel = 0.020000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 7.004090
          resc: 7.004090  resc_io: 7.000000  resc_cpu: 121100
          resp: 7.004090  resp_io: 7.000000  resc_cpu: 121100
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  4.000000 = outer (10.000000) * inner (4.000000) * sel (0.100000)
Join Card - Rounded: 4 Computed: 4.000000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 6.001590  Resp: 6.001590  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001590 
     resc: 6.001590 resc_io: 4.000000 resc_cpu: 59260769
     resp: 6.001590 resp_io: 4.000000 resp_cpu: 59260769
SM Join (with index on outer)
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 2.000000  resc_cpu: 17943
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 2.000606  Resp: 2.000606  Degree: 1
  Outer table:  L  Alias: L
    resc: 2.000606  card 10.000000  bytes:   deg: 1  resp: 2.000606
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 4.001126  Resp: 4.001126  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020330  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021857  Resp: 4.021857  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021857  
     resc: 4.021857 resc_io: 4.000000 resc_cpu: 647129
     resp: 4.021857 resp_io: 4.000000 resp_cpu: 647129
Best:: JoinMethod: SortMerge
       Cost: 4.001126  Degree: 1  Resp: 4.001126  Card: 4.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 4.000000  Cost: 4.001126  Resp: 4.001126  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.250000
  Scan CPU Cost (Disk) =   2078036.000000

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Cost of predicates:
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 2048  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 2048  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   7.250000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.250000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500748.560954 (cpu filter eval) (= 50.074856 (per row) * 10000.000000 (#rows))
                       =   2578784.560954
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 33.349530  Resp: 33.349530  Degree: 1
      Cost_io: 32.000000  Cost_cpu: 39955326
      Resp_io: 32.000000  Resp_cpu: 39955326
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.500000  resc_cpu: 1914392
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 38.259768  Resp: 38.259768  Degree: 1
      Cost_io: 37.000000  Cost_cpu: 37297755
      Resp_io: 37.000000  Resp_cpu: 37297755
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9286
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 8.002381  Resp: 8.002381  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 29677333
      Resp_io: 7.000000  Resp_cpu: 29677333
kkofmx: index filter: ?? 

kkofmx: index filter: ?? 

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 2.0000e-07 
    NL Join : Cost: 16.037947  Resp: 16.037947  Degree: 1
      Cost_io: 15.000000  Cost_cpu: 30730319
      Resp_io: 15.000000  Resp_cpu: 30730319
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9286
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 8.002381  Resp: 8.002381  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 29677333
      Resp_io: 7.000000  Resp_cpu: 29677333
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001383  Resp: 4.001383  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 29647788
      Resp_io: 3.000000  Resp_cpu: 29647788

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 16.031148  Resp: 16.031148  Degree: 1
      Cost_io: 15.000000  Cost_cpu: 30529045
      Resp_io: 15.000000  Resp_cpu: 30529045
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 4.001429, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 17.050889, sel = 0.100000
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 8.002381
          resc: 8.002381  resc_io: 7.000000  resc_cpu: 29677333
          resp: 8.002381  resp_io: 7.000000  resc_cpu: 29677333
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.080002 = outer (4.000000) * inner (999.997222) * sel (2.0001e-05)
Join cardinality for HJ/SMJ (no post filters):  3.999989, outer: 4.000000, inner: 999.997222, sel: 2.0001e-05
Join Card - Rounded: 1 Computed: 0.080002
  Outer table:  T1  Alias: T1
    resc: 4.001126  card 4.000000  bytes:   deg: 1  resp: 4.001126
  Inner table:  T2  Alias: T2
    resc: 4.009406  card: 999.997222  bytes:   deg: 1  resp: 4.009406
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 10.025710  Resp: 10.025710  [multiMatchCost=0.000000]
SM Join
  SM cost: 10.025710 
     resc: 10.025710 resc_io: 7.000000 resc_cpu: 89581724
     resp: 10.025710 resp_io: 7.000000 resp_cpu: 89581724
  Outer table:  T1  Alias: T1
    resc: 4.001126  card 4.000000  bytes:   deg: 1  resp: 4.001126
  Inner table:  T2  Alias: T2
    resc: 4.009406  card: 999.997222  bytes:   deg: 1  resp: 4.009406
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023663  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 8.034196  Resp: 8.034196  [multiMatchCost=0.000000]
HA Join
  HA cost: 8.034196  
     resc: 8.034196 resc_io: 7.000000 resc_cpu: 30619276
     resp: 8.034196 resp_io: 7.000000 resp_cpu: 30619276
Best:: JoinMethod: NestedLoop
       Cost: 8.002381  Degree: 1  Resp: 8.002381  Card: 0.080002 Bytes: 
***********************
Best so far:  Table#: 0  cost: 2.000606  card: 10.000000  bytes: 60.000000
              Table#: 1  cost: 4.001126  card: 4.000000  bytes: 48.000000
              Table#: 2  cost: 8.002381  card: 0.080002  bytes: 22.000000
***********************
Join order[2]:  L[L]#0  T2[T2]#2  T1[T1]#1

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2065  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500577.779614 (cpu filter eval) (= 50.057778 (per row) * 10000.000000 (#rows))
                       =   2578613.779614
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 72.871972  Resp: 72.871972  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 25816324
      Resp_io: 72.000000  Resp_cpu: 25816324
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1914221
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 86.647566  Resp: 86.647566  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 19172396
      Resp_io: 86.000000  Resp_cpu: 19172396
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9269
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004150  Resp: 13.004150  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122878
      Resp_io: 13.000000  Resp_cpu: 122878
kkofmx: index filter: ?? 

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 1.0000e-05 
    NL Join : Cost: 33.092979  Resp: 33.092979  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 2752829
      Resp_io: 33.000000  Resp_cpu: 2752829
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9269
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004150  Resp: 13.004150  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122878
      Resp_io: 13.000000  Resp_cpu: 122878
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.001661  Resp: 3.001661  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 49186
      Resp_io: 3.000000  Resp_cpu: 49186

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 33.076075  Resp: 33.076075  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 2252329
      Resp_io: 33.000000  Resp_cpu: 2252329
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 33.076075  Resp: 33.076075  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 2252329
      Resp_io: 33.000000  Resp_cpu: 2252329
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 3.001707, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 34.095833, sel = 0.100000
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 13.004150
          resc: 13.004150  resc_io: 13.000000  resc_cpu: 122878
          resp: 13.004150  resp_io: 13.000000  resc_cpu: 122878
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  9.999972 = outer (10.000000) * inner (999.997222) * sel (0.001000)
Join Card - Rounded: 10 Computed: 9.999972
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 4.009406  card: 999.997222  bytes:   deg: 1  resp: 4.009406
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 9.025642  Resp: 9.025642  [multiMatchCost=0.000000]
SM Join
  SM cost: 9.025642 
     resc: 9.025642 resc_io: 7.000000 resc_cpu: 59972858
     resp: 9.025642 resp_io: 7.000000 resp_cpu: 59972858
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 4.009406  card: 999.997222  bytes:   deg: 1  resp: 4.009406
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023694  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 7.034120  Resp: 7.034120  [multiMatchCost=0.000000]
HA Join
  HA cost: 7.034120  
     resc: 7.034120 resc_io: 7.000000 resc_cpu: 1010174
     resp: 7.034120 resp_io: 7.000000 resp_cpu: 1010174
Best:: JoinMethod: Hash
       Cost: 7.034120  Degree: 1  Resp: 7.034120  Card: 9.999972 Bytes: 

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 9.999972  Cost: 7.034120  Resp: 7.034120  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 822.978415 (cpu filter eval) (= 82.297841 (per row) * 10.000000 (#rows))
                       =   31008.738415
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 19.044593  Resp: 19.044593  Degree: 1
      Cost_io: 19.000000  Cost_cpu: 1320261
      Resp_io: 19.000000  Resp_cpu: 1320261
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9144
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 11.037208  Resp: 11.037208  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1101618
      Resp_io: 11.000000  Resp_cpu: 1101618
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.004000 
    NL Join : Cost: 17.039280  Resp: 17.039280  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 1162954
      Resp_io: 17.000000  Resp_cpu: 1162954
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 7.034474  Resp: 7.034474  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 1020674
      Resp_io: 7.000000  Resp_cpu: 1020674

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 7.034474  Resp: 7.034474  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 1020674
      Resp_io: 7.000000  Resp_cpu: 1020674
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 17.036660  Resp: 17.036660  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 1085388
      Resp_io: 17.000000  Resp_cpu: 1085388
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 7.034475, sel = 0.020000
    Used T1_M_ID
      Cost = 7.034475, sel = 0.020000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 11.037208
          resc: 11.037208  resc_io: 11.000000  resc_cpu: 1101618
          resp: 11.037208  resp_io: 11.000000  resc_cpu: 1101618
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.080002 = outer (9.999972) * inner (4.000000) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  3.999989, outer: 9.999972, inner: 4.000000, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.080002
  Outer table:  T2  Alias: T2
    resc: 7.034120  card 9.999972  bytes:   deg: 1  resp: 7.034120
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 10.034690  Resp: 10.034690  [multiMatchCost=0.000000]
SM Join
  SM cost: 10.034690 
     resc: 10.034690 resc_io: 8.000000 resc_cpu: 60240757
     resp: 10.034690 resp_io: 8.000000 resp_cpu: 60240757
  Outer table:  T2  Alias: T2
    resc: 7.034120  card 9.999972  bytes:   deg: 1  resp: 7.034120
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020330  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 8.054957  Resp: 8.054957  [multiMatchCost=0.000000]
HA Join
  HA cost: 8.054957  
     resc: 8.054957 resc_io: 8.000000 resc_cpu: 1627117
     resp: 8.054957 resp_io: 8.000000 resp_cpu: 1627117
Plan cardinality mismatch: best card= 0.08000195555   curr card= 0.08000195555
Join order aborted: cost > best plan cost
***********************
Join order[3]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   1.500000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.500000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.500000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 7.004654  Resp: 7.004654  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 137786
      Resp_io: 7.000000  Resp_cpu: 137786
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001635
          resc: 5.001635  resc_io: 5.000000  resc_cpu: 48409
          resp: 5.001635  resp_io: 5.000000  resc_cpu: 48409
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  4.000000 = outer (4.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 4 Computed: 4.000000
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001590  Resp: 6.001590  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001590 
     resc: 6.001590 resc_io: 4.000000 resc_cpu: 59260769
     resp: 6.001590 resp_io: 4.000000 resp_cpu: 59260769
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021847  Resp: 4.021847  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021847  
     resc: 4.021847 resc_io: 4.000000 resc_cpu: 646829
     resp: 4.021847 resp_io: 4.000000 resp_cpu: 646829
Best:: JoinMethod: Hash
       Cost: 4.021847  Degree: 1  Resp: 4.021847  Card: 4.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 4.000000  Cost: 4.021847  Resp: 4.021847  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.250000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   7.250000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.250000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500748.560954 (cpu filter eval) (= 50.074856 (per row) * 10000.000000 (#rows))
                       =   2578784.560954
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 33.370251  Resp: 33.370251  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 10961967
      Resp_io: 33.000000  Resp_cpu: 10961967
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.500000  resc_cpu: 1914392
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 38.280489  Resp: 38.280489  Degree: 1
      Cost_io: 38.000000  Cost_cpu: 8304396
      Resp_io: 38.000000  Resp_cpu: 8304396
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9286
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 8.023102  Resp: 8.023102  Degree: 1
      Cost_io: 8.000000  Cost_cpu: 683974
      Resp_io: 8.000000  Resp_cpu: 683974
kkofmx: index filter: ?? 

kkofmx: index filter: ?? 

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 2.0000e-07 
    NL Join : Cost: 16.058668  Resp: 16.058668  Degree: 1
      Cost_io: 16.000000  Cost_cpu: 1736960
      Resp_io: 16.000000  Resp_cpu: 1736960
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9286
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 8.023102  Resp: 8.023102  Degree: 1
      Cost_io: 8.000000  Cost_cpu: 683974
      Resp_io: 8.000000  Resp_cpu: 683974
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.022104  Resp: 4.022104  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 654429
      Resp_io: 4.000000  Resp_cpu: 654429

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 16.051869  Resp: 16.051869  Degree: 1
      Cost_io: 16.000000  Cost_cpu: 1535686
      Resp_io: 16.000000  Resp_cpu: 1535686
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 4.022150, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 17.071611, sel = 0.100000
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 8.023102
          resc: 8.023102  resc_io: 8.000000  resc_cpu: 683974
          resp: 8.023102  resp_io: 8.000000  resc_cpu: 683974
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.080002 = outer (4.000000) * inner (999.997222) * sel (2.0001e-05)
Join cardinality for HJ/SMJ (no post filters):  3.999989, outer: 4.000000, inner: 999.997222, sel: 2.0001e-05
Join Card - Rounded: 1 Computed: 0.080002
  Outer table:  L  Alias: L
    resc: 4.021847  card 4.000000  bytes:   deg: 1  resp: 4.021847
  Inner table:  T2  Alias: T2
    resc: 4.009406  card: 999.997222  bytes:   deg: 1  resp: 4.009406
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 10.046431  Resp: 10.046431  [multiMatchCost=0.000000]
SM Join
  SM cost: 10.046431 
     resc: 10.046431 resc_io: 8.000000 resc_cpu: 60588365
     resp: 10.046431 resp_io: 8.000000 resp_cpu: 60588365
  Outer table:  L  Alias: L
    resc: 4.021847  card 4.000000  bytes:   deg: 1  resp: 4.021847
  Inner table:  T2  Alias: T2
    resc: 4.009406  card: 999.997222  bytes:   deg: 1  resp: 4.009406
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023663  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 8.054917  Resp: 8.054917  [multiMatchCost=0.000000]
HA Join
  HA cost: 8.054917  
     resc: 8.054917 resc_io: 8.000000 resc_cpu: 1625917
     resp: 8.054917 resp_io: 8.000000 resp_cpu: 1625917
Join order aborted: cost > best plan cost
***********************
Join order[4]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.250000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2065  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   7.250000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.250000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 748560.954013 (cpu filter eval) (= 74.856095 (per row) * 10000.000000 (#rows))
                       =   2826596.954013
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 30.382392  Resp: 30.382392  Degree: 1
      Cost_io: 30.000000  Cost_cpu: 11321431
      Resp_io: 30.000000  Resp_cpu: 11321431
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.500000  resc_cpu: 2162204
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 35.292630  Resp: 35.292630  Degree: 1
      Cost_io: 35.000000  Cost_cpu: 8663859
      Resp_io: 35.000000  Resp_cpu: 8663859
kkofmx: index filter: ?? 

kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.002000 
    NL Join : Cost: 13.073571  Resp: 13.073571  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 2178214
      Resp_io: 13.000000  Resp_cpu: 2178214
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 13.073571
          resc: 13.073571  resc_io: 13.000000  resc_cpu: 2178214
          resp: 13.073571  resp_io: 13.000000  resc_cpu: 2178214
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  80.001956 = outer (4.000000) * inner (999.997222) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  3999.988889, outer: 4.000000, inner: 999.997222, sel: 0.020001
Join Card - Rounded: 80 Computed: 80.001956
Join order aborted: cost > best plan cost
***********************
Join order[5]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 999.997222  Cost: 4.009406  Resp: 4.009406  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   1.085000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   1.085000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.085000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 1090.045848  Resp: 1090.045848  Degree: 1
      Cost_io: 1089.000000  Cost_cpu: 30964248
      Resp_io: 1089.000000  Resp_cpu: 30964248
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 1090.045848
          resc: 1090.045848  resc_io: 1089.000000  resc_cpu: 30964248
          resp: 1090.045848  resp_io: 1089.000000  resc_cpu: 30964248
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  9.999972 = outer (999.997222) * inner (10.000000) * sel (0.001000)
Join Card - Rounded: 10 Computed: 9.999972
  Outer table:  T2  Alias: T2
    resc: 4.009406  card 999.997222  bytes:   deg: 1  resp: 4.009406
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 9.025642  Resp: 9.025642  [multiMatchCost=0.000000]
SM Join
  SM cost: 9.025642 
     resc: 9.025642 resc_io: 7.000000 resc_cpu: 59972858
     resp: 9.025642 resp_io: 7.000000 resp_cpu: 59972858
  Outer table:  T2  Alias: T2
    resc: 4.009406  card 999.997222  bytes:   deg: 1  resp: 4.009406
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.025366  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 3  probefrag: 1  ppasses: 1
  Hash join: Resc: 7.035792  Resp: 7.035792  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 4.009406  card: 999.997222  bytes:   deg: 1  resp: 4.009406
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023694  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 7.034120  Resp: 7.034120  [multiMatchCost=0.000000]
HA Join
  HA cost: 7.034120 swapped 
     resc: 7.034120 resc_io: 7.000000 resc_cpu: 1010174
     resp: 7.034120 resp_io: 7.000000 resp_cpu: 1010174
Best:: JoinMethod: Hash
       Cost: 7.034120  Degree: 1  Resp: 7.034120  Card: 9.999972 Bytes: 

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 9.999972  Cost: 7.034120  Resp: 7.034120  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2080  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 822.978415 (cpu filter eval) (= 82.297841 (per row) * 10.000000 (#rows))
                       =   31008.738415
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 19.044593  Resp: 19.044593  Degree: 1
      Cost_io: 19.000000  Cost_cpu: 1320261
      Resp_io: 19.000000  Resp_cpu: 1320261
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9144
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 11.037208  Resp: 11.037208  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1101618
      Resp_io: 11.000000  Resp_cpu: 1101618
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.004000 
    NL Join : Cost: 17.039280  Resp: 17.039280  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 1162954
      Resp_io: 17.000000  Resp_cpu: 1162954
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 7.034474  Resp: 7.034474  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 1020674
      Resp_io: 7.000000  Resp_cpu: 1020674

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 7.034474  Resp: 7.034474  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 1020674
      Resp_io: 7.000000  Resp_cpu: 1020674
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 17.036660  Resp: 17.036660  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 1085388
      Resp_io: 17.000000  Resp_cpu: 1085388
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 7.034475, sel = 0.020000
    Used T1_M_ID
      Cost = 7.034475, sel = 0.020000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 11.037208
          resc: 11.037208  resc_io: 11.000000  resc_cpu: 1101618
          resp: 11.037208  resp_io: 11.000000  resc_cpu: 1101618
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.080002 = outer (9.999972) * inner (4.000000) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  3.999989, outer: 9.999972, inner: 4.000000, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.080002
  Outer table:  L  Alias: L
    resc: 7.034120  card 9.999972  bytes:   deg: 1  resp: 7.034120
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 10.034690  Resp: 10.034690  [multiMatchCost=0.000000]
SM Join
  SM cost: 10.034690 
     resc: 10.034690 resc_io: 8.000000 resc_cpu: 60240757
     resp: 10.034690 resp_io: 8.000000 resp_cpu: 60240757
  Outer table:  L  Alias: L
    resc: 7.034120  card 9.999972  bytes:   deg: 1  resp: 7.034120
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020330  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 8.054957  Resp: 8.054957  [multiMatchCost=0.000000]
HA Join
  HA cost: 8.054957  
     resc: 8.054957 resc_io: 8.000000 resc_cpu: 1627117
     resp: 8.054957 resp_io: 8.000000 resp_cpu: 1627117
Plan cardinality mismatch: best card= 0.08000195555   curr card= 0.08000195555
Join order aborted: cost > best plan cost
***********************
Join order[6]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 999.997222  Cost: 4.009406  Resp: 4.009406  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.085000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   1.085000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.085000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 3229.784148 (cpu filter eval) (= 322.978415 (per row) * 10.000000 (#rows))
                       =   33415.544148
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 1090.138049  Resp: 1090.138049  Degree: 1
      Cost_io: 1089.000000  Cost_cpu: 33694032
      Resp_io: 1089.000000  Resp_cpu: 33694032
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.272000  resc_cpu: 11551
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 276.399560  Resp: 276.399560  Degree: 1
      Cost_io: 276.000000  Cost_cpu: 11829712
      Resp_io: 276.000000  Resp_cpu: 11829712
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 1004.560400  Resp: 1004.560400  Degree: 1
      Cost_io: 1004.000000  Cost_cpu: 16591681
      Resp_io: 1004.000000  Resp_cpu: 16591681
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 1004.263450  Resp: 1004.263450  Degree: 1
      Cost_io: 1004.000000  Cost_cpu: 7799928
      Resp_io: 1004.000000  Resp_cpu: 7799928
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 1004.263450  Resp: 1004.263450  Degree: 1
      Cost_io: 1004.000000  Cost_cpu: 7799928
      Resp_io: 1004.000000  Resp_cpu: 7799928
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 2974.540257, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 276.399560
          resc: 276.399560  resc_io: 276.000000  resc_cpu: 11829712
          resp: 276.399560  resp_io: 276.000000  resc_cpu: 11829712
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  80.001956 = outer (999.997222) * inner (4.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  3999.988889, outer: 999.997222, inner: 4.000000, sel: 0.020001
Join Card - Rounded: 80 Computed: 80.001956
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :1
Join order[7]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 999.997222  Cost: 4.009406  Resp: 4.009406  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   1.085000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   1.085000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.085000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 1090.045848  Resp: 1090.045848  Degree: 1
      Cost_io: 1089.000000  Cost_cpu: 30964248
      Resp_io: 1089.000000  Resp_cpu: 30964248
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 1090.045848
          resc: 1090.045848  resc_io: 1089.000000  resc_cpu: 30964248
          resp: 1090.045848  resp_io: 1089.000000  resc_cpu: 30964248
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  9.999972 = outer (999.997222) * inner (10.000000) * sel (0.001000)
Join Card - Rounded: 10 Computed: 9.999972
  Outer table:  T2  Alias: T2
    resc: 4.009406  card 999.997222  bytes:   deg: 1  resp: 4.009406
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 9.025642  Resp: 9.025642  [multiMatchCost=0.000000]
SM Join
  SM cost: 9.025642 
     resc: 9.025642 resc_io: 7.000000 resc_cpu: 59972858
     resp: 9.025642 resp_io: 7.000000 resp_cpu: 59972858
  Outer table:  T2  Alias: T2
    resc: 4.009406  card 999.997222  bytes:   deg: 1  resp: 4.009406
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.025366  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 3  probefrag: 1  ppasses: 1
  Hash join: Resc: 7.035792  Resp: 7.035792  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 4.009406  card: 999.997222  bytes:   deg: 1  resp: 4.009406
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023694  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 7.034120  Resp: 7.034120  [multiMatchCost=0.000000]
HA Join
  HA cost: 7.034120 swapped 
     resc: 7.034120 resc_io: 7.000000 resc_cpu: 1010174
     resp: 7.034120 resp_io: 7.000000 resp_cpu: 1010174
Best:: JoinMethod: Hash
       Cost: 7.034120  Degree: 1  Resp: 7.034120  Card: 9.999972 Bytes: 

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 9.999972  Cost: 7.034120  Resp: 7.034120  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 822.978415 (cpu filter eval) (= 82.297841 (per row) * 10.000000 (#rows))
                       =   31008.738415
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 19.044593  Resp: 19.044593  Degree: 1
      Cost_io: 19.000000  Cost_cpu: 1320261
      Resp_io: 19.000000  Resp_cpu: 1320261
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9144
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 11.037208  Resp: 11.037208  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1101618
      Resp_io: 11.000000  Resp_cpu: 1101618
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.004000 
    NL Join : Cost: 17.039280  Resp: 17.039280  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 1162954
      Resp_io: 17.000000  Resp_cpu: 1162954
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 7.034474  Resp: 7.034474  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 1020674
      Resp_io: 7.000000  Resp_cpu: 1020674

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 7.034474  Resp: 7.034474  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 1020674
      Resp_io: 7.000000  Resp_cpu: 1020674
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 17.036660  Resp: 17.036660  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 1085388
      Resp_io: 17.000000  Resp_cpu: 1085388
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 7.034475, sel = 0.020000
    Used T1_M_ID
      Cost = 7.034475, sel = 0.020000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 11.037208
          resc: 11.037208  resc_io: 11.000000  resc_cpu: 1101618
          resp: 11.037208  resp_io: 11.000000  resc_cpu: 1101618
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.080002 = outer (9.999972) * inner (4.000000) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  3.999989, outer: 9.999972, inner: 4.000000, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.080002
  Outer table:  L  Alias: L
    resc: 7.034120  card 9.999972  bytes:   deg: 1  resp: 7.034120
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 10.034690  Resp: 10.034690  [multiMatchCost=0.000000]
SM Join
  SM cost: 10.034690 
     resc: 10.034690 resc_io: 8.000000 resc_cpu: 60240757
     resp: 10.034690 resp_io: 8.000000 resp_cpu: 60240757
  Outer table:  L  Alias: L
    resc: 7.034120  card 9.999972  bytes:   deg: 1  resp: 7.034120
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020330  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 8.054957  Resp: 8.054957  [multiMatchCost=0.000000]
HA Join
  HA cost: 8.054957  
     resc: 8.054957 resc_io: 8.000000 resc_cpu: 1627117
     resp: 8.054957 resp_io: 8.000000 resp_cpu: 1627117
Plan cardinality mismatch: best card= 0.08000195555   curr card= 0.08000195555
Join order aborted: cost > best plan cost
***********************
Join order[8]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 999.997222  Cost: 4.009406  Resp: 4.009406  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.085000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   1.085000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.085000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 3229.784148 (cpu filter eval) (= 322.978415 (per row) * 10.000000 (#rows))
                       =   33415.544148
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 1090.138049  Resp: 1090.138049  Degree: 1
      Cost_io: 1089.000000  Cost_cpu: 33694032
      Resp_io: 1089.000000  Resp_cpu: 33694032
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.272000  resc_cpu: 11551
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 276.399560  Resp: 276.399560  Degree: 1
      Cost_io: 276.000000  Cost_cpu: 11829712
      Resp_io: 276.000000  Resp_cpu: 11829712
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 1004.560400  Resp: 1004.560400  Degree: 1
      Cost_io: 1004.000000  Cost_cpu: 16591681
      Resp_io: 1004.000000  Resp_cpu: 16591681
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 1004.263450  Resp: 1004.263450  Degree: 1
      Cost_io: 1004.000000  Cost_cpu: 7799928
      Resp_io: 1004.000000  Resp_cpu: 7799928
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 1004.263450  Resp: 1004.263450  Degree: 1
      Cost_io: 1004.000000  Cost_cpu: 7799928
      Resp_io: 1004.000000  Resp_cpu: 7799928
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 2974.540257, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 276.399560
          resc: 276.399560  resc_io: 276.000000  resc_cpu: 11829712
          resp: 276.399560  resp_io: 276.000000  resc_cpu: 11829712
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  80.001956 = outer (999.997222) * inner (4.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  3999.988889, outer: 999.997222, inner: 4.000000, sel: 0.020001
Join Card - Rounded: 80 Computed: 80.001956
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :2
Join order[9]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   1.500000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.500000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.500000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 7.004654  Resp: 7.004654  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 137786
      Resp_io: 7.000000  Resp_cpu: 137786
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001635
          resc: 5.001635  resc_io: 5.000000  resc_cpu: 48409
          resp: 5.001635  resp_io: 5.000000  resc_cpu: 48409
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  4.000000 = outer (4.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 4 Computed: 4.000000
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001590  Resp: 6.001590  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001590 
     resc: 6.001590 resc_io: 4.000000 resc_cpu: 59260769
     resp: 6.001590 resp_io: 4.000000 resp_cpu: 59260769
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021847  Resp: 4.021847  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021847  
     resc: 4.021847 resc_io: 4.000000 resc_cpu: 646829
     resp: 4.021847 resp_io: 4.000000 resp_cpu: 646829
Best:: JoinMethod: Hash
       Cost: 4.021847  Degree: 1  Resp: 4.021847  Card: 4.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 4.000000  Cost: 4.021847  Resp: 4.021847  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.250000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2080  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2065  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   7.250000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.250000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500748.560954 (cpu filter eval) (= 50.074856 (per row) * 10000.000000 (#rows))
                       =   2578784.560954
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 33.370251  Resp: 33.370251  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 10961967
      Resp_io: 33.000000  Resp_cpu: 10961967
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.500000  resc_cpu: 1914392
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 38.280489  Resp: 38.280489  Degree: 1
      Cost_io: 38.000000  Cost_cpu: 8304396
      Resp_io: 38.000000  Resp_cpu: 8304396
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9286
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 8.023102  Resp: 8.023102  Degree: 1
      Cost_io: 8.000000  Cost_cpu: 683974
      Resp_io: 8.000000  Resp_cpu: 683974
kkofmx: index filter: ?? 

kkofmx: index filter: ?? 

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 2.0000e-07 
    NL Join : Cost: 16.058668  Resp: 16.058668  Degree: 1
      Cost_io: 16.000000  Cost_cpu: 1736960
      Resp_io: 16.000000  Resp_cpu: 1736960
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9286
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 8.023102  Resp: 8.023102  Degree: 1
      Cost_io: 8.000000  Cost_cpu: 683974
      Resp_io: 8.000000  Resp_cpu: 683974
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.022104  Resp: 4.022104  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 654429
      Resp_io: 4.000000  Resp_cpu: 654429

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 16.051869  Resp: 16.051869  Degree: 1
      Cost_io: 16.000000  Cost_cpu: 1535686
      Resp_io: 16.000000  Resp_cpu: 1535686
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 4.022150, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 17.071611, sel = 0.100000
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 8.023102
          resc: 8.023102  resc_io: 8.000000  resc_cpu: 683974
          resp: 8.023102  resp_io: 8.000000  resc_cpu: 683974
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.080002 = outer (4.000000) * inner (999.997222) * sel (2.0001e-05)
Join cardinality for HJ/SMJ (no post filters):  3.999989, outer: 4.000000, inner: 999.997222, sel: 2.0001e-05
Join Card - Rounded: 1 Computed: 0.080002
  Outer table:  L  Alias: L
    resc: 4.021847  card 4.000000  bytes:   deg: 1  resp: 4.021847
  Inner table:  T2  Alias: T2
    resc: 4.009406  card: 999.997222  bytes:   deg: 1  resp: 4.009406
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 10.046431  Resp: 10.046431  [multiMatchCost=0.000000]
SM Join
  SM cost: 10.046431 
     resc: 10.046431 resc_io: 8.000000 resc_cpu: 60588365
     resp: 10.046431 resp_io: 8.000000 resp_cpu: 60588365
  Outer table:  L  Alias: L
    resc: 4.021847  card 4.000000  bytes:   deg: 1  resp: 4.021847
  Inner table:  T2  Alias: T2
    resc: 4.009406  card: 999.997222  bytes:   deg: 1  resp: 4.009406
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023663  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 8.054917  Resp: 8.054917  [multiMatchCost=0.000000]
HA Join
  HA cost: 8.054917  
     resc: 8.054917 resc_io: 8.000000 resc_cpu: 1625917
     resp: 8.054917 resp_io: 8.000000 resp_cpu: 1625917
Join order aborted: cost > best plan cost
***********************
Join order[10]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.250000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2065  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   7.250000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.250000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 748560.954013 (cpu filter eval) (= 74.856095 (per row) * 10000.000000 (#rows))
                       =   2826596.954013
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 30.382392  Resp: 30.382392  Degree: 1
      Cost_io: 30.000000  Cost_cpu: 11321431
      Resp_io: 30.000000  Resp_cpu: 11321431
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.500000  resc_cpu: 2162204
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 35.292630  Resp: 35.292630  Degree: 1
      Cost_io: 35.000000  Cost_cpu: 8663859
      Resp_io: 35.000000  Resp_cpu: 8663859
kkofmx: index filter: ?? 

kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.002000 
    NL Join : Cost: 13.073571  Resp: 13.073571  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 2178214
      Resp_io: 13.000000  Resp_cpu: 2178214
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 13.073571
          resc: 13.073571  resc_io: 13.000000  resc_cpu: 2178214
          resp: 13.073571  resp_io: 13.000000  resc_cpu: 2178214
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  80.001956 = outer (4.000000) * inner (999.997222) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  3999.988889, outer: 4.000000, inner: 999.997222, sel: 0.020001
Join Card - Rounded: 80 Computed: 80.001956
Join order aborted: cost > best plan cost
***********************
Join order[11]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 999.997222  Cost: 4.009406  Resp: 4.009406  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   1.085000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   1.085000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.085000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 1090.045848  Resp: 1090.045848  Degree: 1
      Cost_io: 1089.000000  Cost_cpu: 30964248
      Resp_io: 1089.000000  Resp_cpu: 30964248
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 1090.045848
          resc: 1090.045848  resc_io: 1089.000000  resc_cpu: 30964248
          resp: 1090.045848  resp_io: 1089.000000  resc_cpu: 30964248
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  9.999972 = outer (999.997222) * inner (10.000000) * sel (0.001000)
Join Card - Rounded: 10 Computed: 9.999972
  Outer table:  T2  Alias: T2
    resc: 4.009406  card 999.997222  bytes:   deg: 1  resp: 4.009406
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 9.025642  Resp: 9.025642  [multiMatchCost=0.000000]
SM Join
  SM cost: 9.025642 
     resc: 9.025642 resc_io: 7.000000 resc_cpu: 59972858
     resp: 9.025642 resp_io: 7.000000 resp_cpu: 59972858
  Outer table:  T2  Alias: T2
    resc: 4.009406  card 999.997222  bytes:   deg: 1  resp: 4.009406
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.025366  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 3  probefrag: 1  ppasses: 1
  Hash join: Resc: 7.035792  Resp: 7.035792  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 4.009406  card: 999.997222  bytes:   deg: 1  resp: 4.009406
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023694  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 7.034120  Resp: 7.034120  [multiMatchCost=0.000000]
HA Join
  HA cost: 7.034120 swapped 
     resc: 7.034120 resc_io: 7.000000 resc_cpu: 1010174
     resp: 7.034120 resp_io: 7.000000 resp_cpu: 1010174
Best:: JoinMethod: Hash
       Cost: 7.034120  Degree: 1  Resp: 7.034120  Card: 9.999972 Bytes: 

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 9.999972  Cost: 7.034120  Resp: 7.034120  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2080  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 822.978415 (cpu filter eval) (= 82.297841 (per row) * 10.000000 (#rows))
                       =   31008.738415
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 19.044593  Resp: 19.044593  Degree: 1
      Cost_io: 19.000000  Cost_cpu: 1320261
      Resp_io: 19.000000  Resp_cpu: 1320261
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9144
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 11.037208  Resp: 11.037208  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1101618
      Resp_io: 11.000000  Resp_cpu: 1101618
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.004000 
    NL Join : Cost: 17.039280  Resp: 17.039280  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 1162954
      Resp_io: 17.000000  Resp_cpu: 1162954
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 7.034474  Resp: 7.034474  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 1020674
      Resp_io: 7.000000  Resp_cpu: 1020674

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 7.034474  Resp: 7.034474  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 1020674
      Resp_io: 7.000000  Resp_cpu: 1020674
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 17.036660  Resp: 17.036660  Degree: 1
      Cost_io: 17.000000  Cost_cpu: 1085388
      Resp_io: 17.000000  Resp_cpu: 1085388
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 7.034475, sel = 0.020000
    Used T1_M_ID
      Cost = 7.034475, sel = 0.020000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 11.037208
          resc: 11.037208  resc_io: 11.000000  resc_cpu: 1101618
          resp: 11.037208  resp_io: 11.000000  resc_cpu: 1101618
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.080002 = outer (9.999972) * inner (4.000000) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  3.999989, outer: 9.999972, inner: 4.000000, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.080002
  Outer table:  L  Alias: L
    resc: 7.034120  card 9.999972  bytes:   deg: 1  resp: 7.034120
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 10.034690  Resp: 10.034690  [multiMatchCost=0.000000]
SM Join
  SM cost: 10.034690 
     resc: 10.034690 resc_io: 8.000000 resc_cpu: 60240757
     resp: 10.034690 resp_io: 8.000000 resp_cpu: 60240757
  Outer table:  L  Alias: L
    resc: 7.034120  card 9.999972  bytes:   deg: 1  resp: 7.034120
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020330  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 8.054957  Resp: 8.054957  [multiMatchCost=0.000000]
HA Join
  HA cost: 8.054957  
     resc: 8.054957 resc_io: 8.000000 resc_cpu: 1627117
     resp: 8.054957 resp_io: 8.000000 resp_cpu: 1627117
Plan cardinality mismatch: best card= 0.08000195555   curr card= 0.08000195555
Join order aborted: cost > best plan cost
***********************
Join order[12]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 999.997222  Cost: 4.009406  Resp: 4.009406  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.085000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   1.085000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.085000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 3229.784148 (cpu filter eval) (= 322.978415 (per row) * 10.000000 (#rows))
                       =   33415.544148
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 1090.138049  Resp: 1090.138049  Degree: 1
      Cost_io: 1089.000000  Cost_cpu: 33694032
      Resp_io: 1089.000000  Resp_cpu: 33694032
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.272000  resc_cpu: 11551
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 276.399560  Resp: 276.399560  Degree: 1
      Cost_io: 276.000000  Cost_cpu: 11829712
      Resp_io: 276.000000  Resp_cpu: 11829712
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 1004.560400  Resp: 1004.560400  Degree: 1
      Cost_io: 1004.000000  Cost_cpu: 16591681
      Resp_io: 1004.000000  Resp_cpu: 16591681
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 1004.263450  Resp: 1004.263450  Degree: 1
      Cost_io: 1004.000000  Cost_cpu: 7799928
      Resp_io: 1004.000000  Resp_cpu: 7799928
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 1004.263450  Resp: 1004.263450  Degree: 1
      Cost_io: 1004.000000  Cost_cpu: 7799928
      Resp_io: 1004.000000  Resp_cpu: 7799928
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 2974.540257, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 276.399560
          resc: 276.399560  resc_io: 276.000000  resc_cpu: 11829712
          resp: 276.399560  resp_io: 276.000000  resc_cpu: 11829712
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  80.001956 = outer (999.997222) * inner (4.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  3999.988889, outer: 999.997222, inner: 4.000000, sel: 0.020001
Join Card - Rounded: 80 Computed: 80.001956
Join order aborted: cost > best plan cost
***********************
(newjo-stop-1) k:2, spcnt:2, perm:12, maxperm:120

*********************************
Number of join permutations tried: 12
*********************************
Enumerating distribution method (advanced)
--- Distribution method for 
join between L[L](serial) and T1[T1](serial); jm = 8; right side access path = IndexRange
---- serial Sort-Merge-Join -> NONE
--- Distribution method for 
join between T1[T1](serial) and T2[T2](serial); jm = 14; right side access path = IndexUnique
kkopqIsSerialJoin: serial - SMJ/HJ: both input serial
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL

LORE: Trying or-Expansion on query block SEL$1 (#0)
LORE: Or-expansion bypassed: No index driver found in OR chain: 
id=0  predicate=(LNNVL("T2"."C1"=103) OR LNNVL("T2"."C2"=13)) AND "T2"."C1">=11 AND "T2"."C1"<=12 AND ("T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)) AND ("T1"."M"=TO_NUMBER(:B3) AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=TO_NUMBER(:B4) AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"

LORE: ******** Next OR predicate ********

LORE: Trying or-Expansion on query block SEL$1 (#0) on OR chain:
id=0  predicate=("T1"."M"=TO_NUMBER(:B1) AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=TO_NUMBER(:B2) AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"

LORE: ******** OR-branching ********

LORE: or-expansion-subheap (create addr=0x7f2babc7ee58)
****************
QUERY BLOCK TEXT
****************
SELECT /*+ OPT_PARAM('_optimizer_cbqt_or_expansion' 'off') */ null FROM l, t1, t2 WHERE  
(  ( t1.m = :v1 AND t2.c1 BETWEEN 11 AND 12)       OR 
   ( t1.m = :v2 AND t2.c1 = 103 AND t2.c2 = 13  )   )  AND 
    ( l.id = t1.id AND l.id2 = t2.id )
---------------------
QUERY BLOCK SIGNATURE
---------------------
signature (optimizer): qb_name=SEL$1 nbfros=3 flg=0
  fro(0): flg=4 objn=73644 hint_alias="L"@"SEL$1"
  fro(1): flg=4 objn=73646 hint_alias="T1"@"SEL$1"
  fro(2): flg=4 objn=73648 hint_alias="T2"@"SEL$1"

-----------------------------
SYSTEM STATISTICS INFORMATION
-----------------------------
Using dictionary system stats.
  Using NOWORKLOAD Stats
  CPUSPEEDNW: 2467 millions instructions/sec (default is 100)
  IOTFRSPEED: 4096 bytes per millisecond (default is 4096)
  IOSEEKTIM:  10 milliseconds (default is 10)
  MBRC:       NO VALUE blocks (default is 8)

***************************************
BASE STATISTICAL INFORMATION
***********************
Table Stats::
  Table: T2  Alias: T2
  #Rows: 10000  SSZ: 0  LGR: 0  #Blks:  25  AvgRowLen:  10.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): C1(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#3): C2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#1): ID(NUMBER)
    AvgLen: 4 NDV: 10000 Nulls: 0 Density: 0.000100 Min: 1.000000 Max: 10000.000000
Index Stats::
  Index: T2_C1_C2_ID  Col#: 2 3 1
  LVLS: 1  #LB: 30  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 210.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
  Index: T2_ID  Col#: 1
  LVLS: 1  #LB: 20  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 21.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table: T1  Alias: T1
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): M(NUMBER)
    AvgLen: 3 NDV: 5 Nulls: 0 Density: 0.200000 Min: 0.000000 Max: 4.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: T1_M_ID  Col#: 2 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table:  L  Alias:  L
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
  Column (#2): ID2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: L_ID  Col#: 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
=======================================
SPD: BEGIN context at query block level
=======================================
Query Block SEL$1 (#0)
Return code in qosdSetupDirCtx4QB: NOCTX
=====================================
SPD: END context at query block level
=====================================
Access path analysis for L
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for L[L] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Table: L  Alias: L
    Card: Original: 10.000000  Rounded: 10  Computed: 10.000000  Non Adjusted: 10.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                       =   30185.760000
  Access Path: TableScan
    Cost:  3.001020  Resp: 3.001020  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 30186
      Resp_io: 3.000000  Resp_cpu: 30186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: TableScan
         Cost: 3.001020  Degree: 1  Resp: 3.001020  Card: 10.000000  Bytes: 0.000000

Access path analysis for T1
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T1[T1] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE


 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)
  Estimated selectivity: 0.200000 , col: #2 

 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1)
  Estimated selectivity: 0.200000 , col: #2 
  Table: T1  Alias: T1
    Card: Original: 10.000000  Rounded: 1  Computed: 0.800000  Non Adjusted: 0.800000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Access Path: TableScan
    Cost:  3.001088  Resp: 3.001088  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 32226
      Resp_io: 3.000000  Resp_cpu: 32226
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  2.000350  Resp: 2.000350  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 10361
      Resp_io: 2.000000  Resp_cpu: 10361
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    Cost: 1.000272  Resp: 1.000272  Degree: 1
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T1_M_ID
         Cost: 1.000272  Degree: 1  Resp: 1.000272  Card: 0.800000  Bytes: 0.000000

Access path analysis for T2
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T2[T2] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE


 kkecdn: Single Table Predicate: ?? 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1">=11
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1"<=12
  Estimated selectivity: 1.000000 , col: #2 

 kkecdn: Single Table Predicate:"T2"."C1">=11
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1"<=12
  Estimated selectivity: 1.000000 , col: #2 
  Table: T2  Alias: T2
    Card: Original: 10000.000000  Rounded: 1000  Computed: 999.997222  Non Adjusted: 999.997222
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2065  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2080  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 547963.097394 (cpu filter eval) (= 54.796310 (per row) * 10000.000000 (#rows))
                       =   2625999.097394
  Access Path: TableScan
    Cost:  9.088696  Resp: 9.088696  Degree: 0
      Cost_io: 9.000000  Cost_cpu: 2625999
      Resp_io: 9.000000  Resp_cpu: 2625999
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1961606
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  10.066255  Resp: 10.066255  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 1961606
      Resp_io: 10.000000  Resp_cpu: 1961606
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 4.000000  resc_cpu: 228486
    ix_sel: 0.100000  ix_sel_with_filters: 0.007778 
    Cost: 4.009669  Resp: 4.009669  Degree: 1
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T2_C1_C2_ID
         Cost: 4.009669  Degree: 1  Resp: 4.009669  Card: 999.997222  Bytes: 0.000000

(newjo-restore) [2 1 0 ]
***************************************


OPTIMIZER STATISTICS AND COMPUTATIONS
PJE:  Bypassed; QB is OR expanded SEL$1 (#0)
***************************************
GENERAL PLANS
***************************************
Considering cardinality-based initial join order.
Permutations for Starting Table :0
Join order[1]:  L[L]#0  T1[T1]#1  T2[T2]#2

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 704.000000 (cpu filter eval) (= 70.400000 (per row) * 10.000000 (#rows))
                       =   30889.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 15.011453  Resp: 15.011453  Degree: 1
      Cost_io: 15.000000  Cost_cpu: 339083
      Resp_io: 15.000000  Resp_cpu: 339083
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9025
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.004068  Resp: 7.004068  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 120440
      Resp_io: 7.000000  Resp_cpu: 120440
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 3.001465  Resp: 3.001465  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 43386
      Resp_io: 3.000000  Resp_cpu: 43386
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.001465
          resc: 3.001465  resc_io: 3.000000  resc_cpu: 43386
          resp: 3.001465  resp_io: 3.000000  resc_cpu: 43386
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.800000 = outer (10.000000) * inner (0.800000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.800000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
SM Join (with index on outer)
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 2.000000  resc_cpu: 17943
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 2.000606  Resp: 2.000606  Degree: 1
  Outer table:  L  Alias: L
    resc: 2.000606  card 10.000000  bytes:   deg: 1  resp: 2.000606
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 4.000878  Resp: 4.000878  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021611  Resp: 4.021611  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021611  
     resc: 4.021611 resc_io: 4.000000 resc_cpu: 639847
     resp: 4.021611 resp_io: 4.000000 resp_cpu: 639847
Best:: JoinMethod: NestedLoop
       Cost: 3.001465  Degree: 1  Resp: 3.001465  Card: 0.800000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 3.001465  Resp: 3.001465  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2080  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2065  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500547.963097 (cpu filter eval) (= 50.054796 (per row) * 10000.000000 (#rows))
                       =   2578583.963097
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 12.088560  Resp: 12.088560  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 2621970
      Resp_io: 12.000000  Resp_cpu: 2621970
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1914191
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 13.066119  Resp: 13.066119  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 1957577
      Resp_io: 13.000000  Resp_cpu: 1957577
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9266
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001778  Resp: 4.001778  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 52652
      Resp_io: 4.000000  Resp_cpu: 52652
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 7.7778e-07 
    NL Join : Cost: 6.010662  Resp: 6.010662  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 315658
      Resp_io: 6.000000  Resp_cpu: 315658
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9266
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001778  Resp: 4.001778  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 52652
      Resp_io: 4.000000  Resp_cpu: 52652
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.001530  Resp: 3.001530  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 45286
      Resp_io: 3.000000  Resp_cpu: 45286

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 6.008971  Resp: 6.008971  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 265600
      Resp_io: 6.000000  Resp_cpu: 265600
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 3.001575, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 7.028702, sel = 0.100000
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001778
          resc: 4.001778  resc_io: 4.000000  resc_cpu: 52652
          resp: 4.001778  resp_io: 4.000000  resc_cpu: 52652
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.799998 = outer (0.800000) * inner (999.997222) * sel (0.001000)
Join Card - Rounded: 1 Computed: 0.799998
  Outer table:  T1  Alias: T1
    resc: 3.001465  card 0.800000  bytes:   deg: 1  resp: 3.001465
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 9.026300  Resp: 9.026300  [multiMatchCost=0.000000]
SM Join
  SM cost: 9.026300 
     resc: 9.026300 resc_io: 7.000000 resc_cpu: 59992337
     resp: 9.026300 resp_io: 7.000000 resp_cpu: 59992337
  Outer table:  T1  Alias: T1
    resc: 3.001465  card 0.800000  bytes:   deg: 1  resp: 3.001465
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023648  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 7.034782  Resp: 7.034782  [multiMatchCost=0.000000]
HA Join
  HA cost: 7.034782  
     resc: 7.034782 resc_io: 7.000000 resc_cpu: 1029799
     resp: 7.034782 resp_io: 7.000000 resp_cpu: 1029799
Best:: JoinMethod: NestedLoop
       Cost: 4.001778  Degree: 1  Resp: 4.001778  Card: 0.799998 Bytes: 
***********************
Best so far:  Table#: 0  cost: 3.001020  card: 10.000000  bytes: 60.000000
              Table#: 1  cost: 3.001465  card: 0.800000  bytes: 12.000000
              Table#: 2  cost: 4.001778  card: 0.799998  bytes: 22.000000
***********************
Join order[2]:  L[L]#0  T2[T2]#2  T1[T1]#1

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2065  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500547.963097 (cpu filter eval) (= 50.054796 (per row) * 10000.000000 (#rows))
                       =   2578583.963097
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 72.871961  Resp: 72.871961  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 25816025
      Resp_io: 72.000000  Resp_cpu: 25816025
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1914191
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 86.647556  Resp: 86.647556  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 19172097
      Resp_io: 86.000000  Resp_cpu: 19172097
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9266
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004149  Resp: 13.004149  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122848
      Resp_io: 13.000000  Resp_cpu: 122848
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 7.7778e-07 
    NL Join : Cost: 33.092982  Resp: 33.092982  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 2752907
      Resp_io: 33.000000  Resp_cpu: 2752907
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9266
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004149  Resp: 13.004149  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122848
      Resp_io: 13.000000  Resp_cpu: 122848
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.001661  Resp: 3.001661  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 49186
      Resp_io: 3.000000  Resp_cpu: 49186

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 33.076075  Resp: 33.076075  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 2252329
      Resp_io: 33.000000  Resp_cpu: 2252329
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 3.001707, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 34.095833, sel = 0.100000
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 13.004149
          resc: 13.004149  resc_io: 13.000000  resc_cpu: 122848
          resp: 13.004149  resp_io: 13.000000  resc_cpu: 122848
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  9.999972 = outer (10.000000) * inner (999.997222) * sel (0.001000)
Join Card - Rounded: 10 Computed: 9.999972
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 9.025904  Resp: 9.025904  [multiMatchCost=0.000000]
SM Join
  SM cost: 9.025904 
     resc: 9.025904 resc_io: 7.000000 resc_cpu: 59980634
     resp: 9.025904 resp_io: 7.000000 resp_cpu: 59980634
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023694  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 7.034382  Resp: 7.034382  [multiMatchCost=0.000000]
HA Join
  HA cost: 7.034382  
     resc: 7.034382 resc_io: 7.000000 resc_cpu: 1017949
     resp: 7.034382 resp_io: 7.000000 resp_cpu: 1017949
Join order aborted: cost > best plan cost
***********************
Join order[3]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 4.001309  Resp: 4.001309  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 38747
      Resp_io: 4.000000  Resp_cpu: 38747
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000554
          resc: 2.000554  resc_io: 2.000000  resc_cpu: 16403
          resp: 2.000554  resp_io: 2.000000  resc_cpu: 16403
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.800000 = outer (0.800000) * inner (10.000000) * sel (0.100000)
Join cardinality for NL:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join cardinality without POSQ:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join Card - Rounded: 1 Computed: 0.800000
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021596  Resp: 4.021596  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021596  
     resc: 4.021596 resc_io: 4.000000 resc_cpu: 639397
     resp: 4.021596 resp_io: 4.000000 resp_cpu: 639397
Best:: JoinMethod: NestedLoop
       Cost: 2.000554  Degree: 1  Resp: 2.000554  Card: 0.800000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 2.000554  Resp: 2.000554  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2065  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500547.963097 (cpu filter eval) (= 50.054796 (per row) * 10000.000000 (#rows))
                       =   2578583.963097
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 11.087648  Resp: 11.087648  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 2594987
      Resp_io: 11.000000  Resp_cpu: 2594987
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1914191
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 12.065208  Resp: 12.065208  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 1930594
      Resp_io: 12.000000  Resp_cpu: 1930594
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9266
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25669
      Resp_io: 3.000000  Resp_cpu: 25669
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 7.7778e-07 
    NL Join : Cost: 5.009750  Resp: 5.009750  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 288675
      Resp_io: 5.000000  Resp_cpu: 288675
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9266
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25669
      Resp_io: 3.000000  Resp_cpu: 25669
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 2.000618  Resp: 2.000618  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 18303
      Resp_io: 2.000000  Resp_cpu: 18303

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.008060  Resp: 5.008060  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 238617
      Resp_io: 5.000000  Resp_cpu: 238617
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 2.000664, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 6.027790, sel = 0.100000
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000867
          resc: 3.000867  resc_io: 3.000000  resc_cpu: 25669
          resp: 3.000867  resp_io: 3.000000  resc_cpu: 25669
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.799998 = outer (0.800000) * inner (999.997222) * sel (0.001000)
Join Card - Rounded: 1 Computed: 0.799998
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 8.025388  Resp: 8.025388  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.025388 
     resc: 8.025388 resc_io: 6.000000 resc_cpu: 59965354
     resp: 8.025388 resp_io: 6.000000 resp_cpu: 59965354
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023648  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 6.033871  Resp: 6.033871  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.033871  
     resc: 6.033871 resc_io: 6.000000 resc_cpu: 1002817
     resp: 6.033871 resp_io: 6.000000 resp_cpu: 1002817
Plan cardinality mismatch: best card= 0.79999777778   curr card= 0.79999777778
Best:: JoinMethod: NestedLoop
       Cost: 3.000867  Degree: 1  Resp: 3.000867  Card: 0.799998 Bytes: 
***********************
Best so far:  Table#: 1  cost: 1.000272  card: 0.800000  bytes: 6.000000
              Table#: 0  cost: 2.000554  card: 0.800000  bytes: 12.000000
              Table#: 2  cost: 3.000867  card: 0.799998  bytes: 22.000000
***********************
Join order[4]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2065  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 547963.097394 (cpu filter eval) (= 54.796310 (per row) * 10000.000000 (#rows))
                       =   2625999.097394
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 10.088968  Resp: 10.088968  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 2634061
      Resp_io: 10.000000  Resp_cpu: 2634061
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1961606
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 11.066527  Resp: 11.066527  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1969668
      Resp_io: 11.000000  Resp_cpu: 1969668
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.007778 
    NL Join : Cost: 4.009729  Resp: 4.009729  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 288054
      Resp_io: 4.000000  Resp_cpu: 288054
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.009729
          resc: 4.009729  resc_io: 4.000000  resc_cpu: 288054
          resp: 4.009729  resp_io: 4.000000  resc_cpu: 288054
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  799.997778 = outer (0.800000) * inner (999.997222) * sel (1.000000)
Join Card - Rounded: 800 Computed: 799.997778
Join order aborted: cost > best plan cost
***********************
Join order[5]:  T2[T2]#2  L[L]#0  T1[T1]#1
Join order aborted: cost > best plan cost
***********************
Join order[6]:  T2[T2]#2  T1[T1]#1  L[L]#0
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :1
Join order[7]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 4.001309  Resp: 4.001309  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 38747
      Resp_io: 4.000000  Resp_cpu: 38747
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000554
          resc: 2.000554  resc_io: 2.000000  resc_cpu: 16403
          resp: 2.000554  resp_io: 2.000000  resc_cpu: 16403
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.800000 = outer (0.800000) * inner (10.000000) * sel (0.100000)
Join cardinality for NL:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join cardinality without POSQ:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join Card - Rounded: 1 Computed: 0.800000
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021596  Resp: 4.021596  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021596  
     resc: 4.021596 resc_io: 4.000000 resc_cpu: 639397
     resp: 4.021596 resp_io: 4.000000 resp_cpu: 639397
Best:: JoinMethod: NestedLoop
       Cost: 2.000554  Degree: 1  Resp: 2.000554  Card: 0.800000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 2.000554  Resp: 2.000554  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2080  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2065  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500547.963097 (cpu filter eval) (= 50.054796 (per row) * 10000.000000 (#rows))
                       =   2578583.963097
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 11.087648  Resp: 11.087648  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 2594987
      Resp_io: 11.000000  Resp_cpu: 2594987
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1914191
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 12.065208  Resp: 12.065208  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 1930594
      Resp_io: 12.000000  Resp_cpu: 1930594
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9266
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25669
      Resp_io: 3.000000  Resp_cpu: 25669
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 7.7778e-07 
    NL Join : Cost: 5.009750  Resp: 5.009750  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 288675
      Resp_io: 5.000000  Resp_cpu: 288675
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9266
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25669
      Resp_io: 3.000000  Resp_cpu: 25669
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 2.000618  Resp: 2.000618  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 18303
      Resp_io: 2.000000  Resp_cpu: 18303

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.008060  Resp: 5.008060  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 238617
      Resp_io: 5.000000  Resp_cpu: 238617
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 2.000664, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 6.027790, sel = 0.100000
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000867
          resc: 3.000867  resc_io: 3.000000  resc_cpu: 25669
          resp: 3.000867  resp_io: 3.000000  resc_cpu: 25669
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.799998 = outer (0.800000) * inner (999.997222) * sel (0.001000)
Join Card - Rounded: 1 Computed: 0.799998
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 8.025388  Resp: 8.025388  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.025388 
     resc: 8.025388 resc_io: 6.000000 resc_cpu: 59965354
     resp: 8.025388 resp_io: 6.000000 resp_cpu: 59965354
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023648  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 6.033871  Resp: 6.033871  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.033871  
     resc: 6.033871 resc_io: 6.000000 resc_cpu: 1002817
     resp: 6.033871 resp_io: 6.000000 resp_cpu: 1002817
Join order aborted: cost > best plan cost
***********************
Join order[8]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2065  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 547963.097394 (cpu filter eval) (= 54.796310 (per row) * 10000.000000 (#rows))
                       =   2625999.097394
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 10.088968  Resp: 10.088968  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 2634061
      Resp_io: 10.000000  Resp_cpu: 2634061
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1961606
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 11.066527  Resp: 11.066527  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1969668
      Resp_io: 11.000000  Resp_cpu: 1969668
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.007778 
    NL Join : Cost: 4.009729  Resp: 4.009729  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 288054
      Resp_io: 4.000000  Resp_cpu: 288054
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.009729
          resc: 4.009729  resc_io: 4.000000  resc_cpu: 288054
          resp: 4.009729  resp_io: 4.000000  resc_cpu: 288054
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  799.997778 = outer (0.800000) * inner (999.997222) * sel (1.000000)
Join Card - Rounded: 800 Computed: 799.997778
Join order aborted: cost > best plan cost
***********************
Join order[9]:  T2[T2]#2  L[L]#0  T1[T1]#1
Join order aborted: cost > best plan cost
***********************
Join order[10]:  T2[T2]#2  T1[T1]#1  L[L]#0
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :2
Join order[11]:  T2[T2]#2  L[L]#0  T1[T1]#1
Join order aborted: cost > best plan cost
***********************
Join order[12]:  T2[T2]#2  T1[T1]#1  L[L]#0
Join order aborted: cost > best plan cost
***********************
(newjo-stop-1) k:2, spcnt:2, perm:12, maxperm:120

*********************************
Number of join permutations tried: 12
*********************************
Enumerating distribution method (advanced)
--- Distribution method for 
join between T1[T1](serial) and L[L](serial); jm = 14; right side access path = IndexUnique
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL
--- Distribution method for 
join between L[L](serial) and T2[T2](serial); jm = 14; right side access path = IndexUnique
kkopqIsSerialJoin: serial NLJ: both inputs serial
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL

LORE: or-expansion-subheap (delete addr=0x7f2babc7ee58, in-use=123640, alloc=135864)

LORE: ******** OR-branching ********

LORE: or-expansion-subheap (create addr=0x7f2babc7ee58)
****************
QUERY BLOCK TEXT
****************
SELECT /*+ OPT_PARAM('_optimizer_cbqt_or_expansion' 'off') */ null FROM l, t1, t2 WHERE  
(  ( t1.m = :v1 AND t2.c1 BETWEEN 11 AND 12)       OR 
   ( t1.m = :v2 AND t2.c1 = 103 AND t2.c2 = 13  )   )  AND 
    ( l.id = t1.id AND l.id2 = t2.id )
---------------------
QUERY BLOCK SIGNATURE
---------------------
signature (optimizer): qb_name=SEL$1 nbfros=3 flg=0
  fro(0): flg=4 objn=73644 hint_alias="L"@"SEL$1"
  fro(1): flg=4 objn=73646 hint_alias="T1"@"SEL$1"
  fro(2): flg=4 objn=73648 hint_alias="T2"@"SEL$1"

-----------------------------
SYSTEM STATISTICS INFORMATION
-----------------------------
Using dictionary system stats.
  Using NOWORKLOAD Stats
  CPUSPEEDNW: 2467 millions instructions/sec (default is 100)
  IOTFRSPEED: 4096 bytes per millisecond (default is 4096)
  IOSEEKTIM:  10 milliseconds (default is 10)
  MBRC:       NO VALUE blocks (default is 8)

***************************************
BASE STATISTICAL INFORMATION
***********************
Table Stats::
  Table: T2  Alias: T2
  #Rows: 10000  SSZ: 0  LGR: 0  #Blks:  25  AvgRowLen:  10.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): C1(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#3): C2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#1): ID(NUMBER)
    AvgLen: 4 NDV: 10000 Nulls: 0 Density: 0.000100 Min: 1.000000 Max: 10000.000000
Index Stats::
  Index: T2_C1_C2_ID  Col#: 2 3 1
  LVLS: 1  #LB: 30  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 210.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
  Index: T2_ID  Col#: 1
  LVLS: 1  #LB: 20  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 21.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table: T1  Alias: T1
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): M(NUMBER)
    AvgLen: 3 NDV: 5 Nulls: 0 Density: 0.200000 Min: 0.000000 Max: 4.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: T1_M_ID  Col#: 2 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table:  L  Alias:  L
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
  Column (#2): ID2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: L_ID  Col#: 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
=======================================
SPD: BEGIN context at query block level
=======================================
Query Block SEL$1 (#0)
Return code in qosdSetupDirCtx4QB: NOCTX
=====================================
SPD: END context at query block level
=====================================
Access path analysis for L
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for L[L] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Table: L  Alias: L
    Card: Original: 10.000000  Rounded: 10  Computed: 10.000000  Non Adjusted: 10.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                       =   30185.760000
  Access Path: TableScan
    Cost:  3.001020  Resp: 3.001020  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 30186
      Resp_io: 3.000000  Resp_cpu: 30186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: TableScan
         Cost: 3.001020  Degree: 1  Resp: 3.001020  Card: 10.000000  Bytes: 0.000000

Access path analysis for T1
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T1[T1] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE


 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)
  Estimated selectivity: 0.200000 , col: #2 

 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1)
  Estimated selectivity: 0.200000 , col: #2 
  Table: T1  Alias: T1
    Card: Original: 10.000000  Rounded: 1  Computed: 0.800000  Non Adjusted: 0.800000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Access Path: TableScan
    Cost:  3.001088  Resp: 3.001088  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 32226
      Resp_io: 3.000000  Resp_cpu: 32226
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  2.000350  Resp: 2.000350  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 10361
      Resp_io: 2.000000  Resp_cpu: 10361
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    Cost: 1.000272  Resp: 1.000272  Degree: 1
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T1_M_ID
         Cost: 1.000272  Degree: 1  Resp: 1.000272  Card: 0.800000  Bytes: 0.000000

Access path analysis for T2
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T2[T2] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Estimated selectivity: 0.100000 , col: #3 


 kkecdn: Single Table Predicate: ?? 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1">=11
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1"<=12
  Estimated selectivity: 1.000000 , col: #2 

 kkecdn: Single Table Predicate:"T2"."C1"=103
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C2"=13
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Table: T2  Alias: T2
    Card: Original: 10000.000000  Rounded: 1  Computed: 0.000000  Non Adjusted: 0.000000
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2065  ("T2"."C1">=11)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2080  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500026.604943 (cpu filter eval) (= 50.002660 (per row) * 10000.000000 (#rows))
                       =   2578062.604943
  Access Path: TableScan
    Cost:  9.087077  Resp: 9.087077  Degree: 0
      Cost_io: 9.000000  Cost_cpu: 2578063
      Resp_io: 9.000000  Resp_cpu: 2578063
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913670
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  10.064636  Resp: 10.064636  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 1913670
      Resp_io: 10.000000  Resp_cpu: 1913670
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 2.000000  resc_cpu: 14443
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.1605e-07 
    Cost: 2.000490  Resp: 2.000490  Degree: 1
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T2_C1_C2_ID
         Cost: 2.000490  Degree: 1  Resp: 2.000490  Card: 0.000000  Bytes: 0.000000

(newjo-restore) [2 1 0 ]
***************************************


OPTIMIZER STATISTICS AND COMPUTATIONS
PJE:  Bypassed; QB is OR expanded SEL$1 (#0)
***************************************
GENERAL PLANS
***************************************
Considering cardinality-based initial join order.
Permutations for Starting Table :0
Join order[1]:  L[L]#0  T1[T1]#1  T2[T2]#2

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 704.000000 (cpu filter eval) (= 70.400000 (per row) * 10.000000 (#rows))
                       =   30889.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 15.011453  Resp: 15.011453  Degree: 1
      Cost_io: 15.000000  Cost_cpu: 339083
      Resp_io: 15.000000  Resp_cpu: 339083
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9025
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.004068  Resp: 7.004068  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 120440
      Resp_io: 7.000000  Resp_cpu: 120440
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 3.001465  Resp: 3.001465  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 43386
      Resp_io: 3.000000  Resp_cpu: 43386
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.001465
          resc: 3.001465  resc_io: 3.000000  resc_cpu: 43386
          resp: 3.001465  resp_io: 3.000000  resc_cpu: 43386
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.800000 = outer (10.000000) * inner (0.800000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.800000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
SM Join (with index on outer)
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 2.000000  resc_cpu: 17943
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 2.000606  Resp: 2.000606  Degree: 1
  Outer table:  L  Alias: L
    resc: 2.000606  card 10.000000  bytes:   deg: 1  resp: 2.000606
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 4.000878  Resp: 4.000878  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021611  Resp: 4.021611  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021611  
     resc: 4.021611 resc_io: 4.000000 resc_cpu: 639847
     resp: 4.021611 resp_io: 4.000000 resp_cpu: 639847
Best:: JoinMethod: NestedLoop
       Cost: 3.001465  Degree: 1  Resp: 3.001465  Card: 0.800000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 3.001465  Resp: 3.001465  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2080  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2081  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.026605 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.026605
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 12.088542  Resp: 12.088542  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 2621447
      Resp_io: 12.000000  Resp_cpu: 2621447
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 13.066101  Resp: 13.066101  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 1957054
      Resp_io: 13.000000  Resp_cpu: 1957054
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001778  Resp: 4.001778  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 52647
      Resp_io: 4.000000  Resp_cpu: 52647
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.1605e-11 
    NL Join : Cost: 4.001743  Resp: 4.001743  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 51615
      Resp_io: 4.000000  Resp_cpu: 51615
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001778  Resp: 4.001778  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 52647
      Resp_io: 4.000000  Resp_cpu: 52647
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001743
          resc: 4.001743  resc_io: 4.000000  resc_cpu: 51615
          resp: 4.001743  resp_io: 4.000000  resc_cpu: 51615
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.800000) * inner (0.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T1  Alias: T1
    resc: 3.001465  card 0.800000  bytes:   deg: 1  resp: 3.001465
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 7.001955  Resp: 7.001955  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001955 
     resc: 7.001955 resc_io: 5.000000 resc_cpu: 59271570
     resp: 7.001955 resp_io: 5.000000 resp_cpu: 59271570
  Outer table:  T1  Alias: T1
    resc: 3.001465  card 0.800000  bytes:   deg: 1  resp: 3.001465
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020274  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.022229  Resp: 5.022229  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.022229  
     resc: 5.022229 resc_io: 5.000000 resc_cpu: 658136
     resp: 5.022229 resp_io: 5.000000 resp_cpu: 658136
Best:: JoinMethod: NestedLoop
       Cost: 4.001743  Degree: 1  Resp: 4.001743  Card: 0.000000 Bytes: 
***********************
Best so far:  Table#: 0  cost: 3.001020  card: 10.000000  bytes: 60.000000
              Table#: 1  cost: 3.001465  card: 0.800000  bytes: 12.000000
              Table#: 2  cost: 4.001743  card: 0.000000  bytes: 22.000000
***********************
Join order[2]:  L[L]#0  T2[T2]#2  T1[T1]#1

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.026605 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.026605
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 72.871785  Resp: 72.871785  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 25810796
      Resp_io: 72.000000  Resp_cpu: 25810796
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 86.647380  Resp: 86.647380  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 19166868
      Resp_io: 86.000000  Resp_cpu: 19166868
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004148  Resp: 13.004148  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122800
      Resp_io: 13.000000  Resp_cpu: 122800
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.1605e-11 
    NL Join : Cost: 13.003799  Resp: 13.003799  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 112478
      Resp_io: 13.000000  Resp_cpu: 112478
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004148  Resp: 13.004148  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122800
      Resp_io: 13.000000  Resp_cpu: 122800
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 13.003799
          resc: 13.003799  resc_io: 13.000000  resc_cpu: 112478
          resp: 13.003799  resp_io: 13.000000  resc_cpu: 112478
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (10.000000) * inner (0.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259866
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259866
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021829  Resp: 5.021829  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021829  
     resc: 5.021829 resc_io: 5.000000 resc_cpu: 646286
     resp: 5.021829 resp_io: 5.000000 resp_cpu: 646286
Join order aborted: cost > best plan cost
***********************
Join order[3]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 4.001309  Resp: 4.001309  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 38747
      Resp_io: 4.000000  Resp_cpu: 38747
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000554
          resc: 2.000554  resc_io: 2.000000  resc_cpu: 16403
          resp: 2.000554  resp_io: 2.000000  resc_cpu: 16403
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.800000 = outer (0.800000) * inner (10.000000) * sel (0.100000)
Join cardinality for NL:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join cardinality without POSQ:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join Card - Rounded: 1 Computed: 0.800000
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021596  Resp: 4.021596  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021596  
     resc: 4.021596 resc_io: 4.000000 resc_cpu: 639397
     resp: 4.021596 resp_io: 4.000000 resp_cpu: 639397
Best:: JoinMethod: NestedLoop
       Cost: 2.000554  Degree: 1  Resp: 2.000554  Card: 0.800000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 2.000554  Resp: 2.000554  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.026605 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.026605
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 11.087631  Resp: 11.087631  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 2594464
      Resp_io: 11.000000  Resp_cpu: 2594464
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 12.065190  Resp: 12.065190  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 1930071
      Resp_io: 12.000000  Resp_cpu: 1930071
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25664
      Resp_io: 3.000000  Resp_cpu: 25664
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.1605e-11 
    NL Join : Cost: 3.000832  Resp: 3.000832  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24632
      Resp_io: 3.000000  Resp_cpu: 24632
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25664
      Resp_io: 3.000000  Resp_cpu: 25664
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000832
          resc: 3.000832  resc_io: 3.000000  resc_cpu: 24632
          resp: 3.000832  resp_io: 3.000000  resc_cpu: 24632
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.800000) * inner (0.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 6.001044  Resp: 6.001044  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001044 
     resc: 6.001044 resc_io: 4.000000 resc_cpu: 59244587
     resp: 6.001044 resp_io: 4.000000 resp_cpu: 59244587
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020274  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021318  Resp: 4.021318  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021318  
     resc: 4.021318 resc_io: 4.000000 resc_cpu: 631154
     resp: 4.021318 resp_io: 4.000000 resp_cpu: 631154
Best:: JoinMethod: NestedLoop
       Cost: 3.000832  Degree: 1  Resp: 3.000832  Card: 0.000000 Bytes: 
***********************
Best so far:  Table#: 1  cost: 1.000272  card: 0.800000  bytes: 6.000000
              Table#: 0  cost: 2.000554  card: 0.800000  bytes: 12.000000
              Table#: 2  cost: 3.000832  card: 0.000000  bytes: 22.000000
***********************
Join order[4]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500026.604943 (cpu filter eval) (= 50.002660 (per row) * 10000.000000 (#rows))
                       =   2578062.604943
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 10.087349  Resp: 10.087349  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 2586124
      Resp_io: 10.000000  Resp_cpu: 2586124
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913670
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 11.064908  Resp: 11.064908  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1921731
      Resp_io: 11.000000  Resp_cpu: 1921731
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.1605e-07 
    NL Join : Cost: 2.000550  Resp: 2.000550  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16291
      Resp_io: 2.000000  Resp_cpu: 16291
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000550
          resc: 2.000550  resc_io: 2.000000  resc_cpu: 16291
          resp: 2.000550  resp_io: 2.000000  resc_cpu: 16291
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.800000) * inner (0.000000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 2.000550  Degree: 1  Resp: 2.000550  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000550  Resp: 2.000550  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.500000 (cpu filter eval) (= 50.050000 (per row) * 10.000000 (#rows))
                       =   30686.260000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001587  Resp: 5.001587  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46977
      Resp_io: 5.000000  Resp_cpu: 46977
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000834  Resp: 3.000834  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24682
      Resp_io: 3.000000  Resp_cpu: 24682
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000834  Resp: 3.000834  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24682
      Resp_io: 3.000000  Resp_cpu: 24682
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000834
          resc: 3.000834  resc_io: 3.000000  resc_cpu: 24682
          resp: 3.000834  resp_io: 3.000000  resc_cpu: 24682
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.000000  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001620  Resp: 7.001620  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001620 
     resc: 7.001620 resc_io: 5.000000 resc_cpu: 59261656
     resp: 7.001620 resp_io: 5.000000 resp_cpu: 59261656
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.000000  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021874  Resp: 5.021874  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021874  
     resc: 5.021874 resc_io: 5.000000 resc_cpu: 647626
     resp: 5.021874 resp_io: 5.000000 resp_cpu: 647626
Join order aborted: cost > best plan cost
***********************
Join order[5]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001526  Resp: 5.001526  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45186
      Resp_io: 5.000000  Resp_cpu: 45186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001526
          resc: 5.001526  resc_io: 5.000000  resc_cpu: 45186
          resp: 5.001526  resp_io: 5.000000  resc_cpu: 45186
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259866
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259866
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021814  Resp: 5.021814  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021814  
     resc: 5.021814 resc_io: 5.000000 resc_cpu: 645836
     resp: 5.021814 resp_io: 5.000000 resp_cpu: 645836
Join order aborted: cost > best plan cost
***********************
Join order[6]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001578  Resp: 5.001578  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46726
      Resp_io: 5.000000  Resp_cpu: 46726
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000840  Resp: 4.000840  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 24862
      Resp_io: 4.000000  Resp_cpu: 24862
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    NL Join : Cost: 3.000762  Resp: 3.000762  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 22562
      Resp_io: 3.000000  Resp_cpu: 22562
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000762
          resc: 3.000762  resc_io: 3.000000  resc_cpu: 22562
          resp: 3.000762  resp_io: 3.000000  resc_cpu: 22562
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (0.800000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 3.000762  Degree: 1  Resp: 3.000762  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 3.000762  Resp: 3.000762  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.500000 (cpu filter eval) (= 50.050000 (per row) * 10.000000 (#rows))
                       =   30686.260000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.001799  Resp: 6.001799  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 53248
      Resp_io: 6.000000  Resp_cpu: 53248
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30954
      Resp_io: 4.000000  Resp_cpu: 30954
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30954
      Resp_io: 4.000000  Resp_cpu: 30954
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001045
          resc: 4.001045  resc_io: 4.000000  resc_cpu: 30954
          resp: 4.001045  resp_io: 4.000000  resc_cpu: 30954
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.001832  Resp: 8.001832  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.001832 
     resc: 8.001832 resc_io: 6.000000 resc_cpu: 59267928
     resp: 8.001832 resp_io: 6.000000 resp_cpu: 59267928
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022086  Resp: 6.022086  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022086  
     resc: 6.022086 resc_io: 6.000000 resc_cpu: 653898
     resp: 6.022086 resp_io: 6.000000 resp_cpu: 653898
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :1
Join order[7]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001526  Resp: 5.001526  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45186
      Resp_io: 5.000000  Resp_cpu: 45186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001526
          resc: 5.001526  resc_io: 5.000000  resc_cpu: 45186
          resp: 5.001526  resp_io: 5.000000  resc_cpu: 45186
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259866
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259866
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021814  Resp: 5.021814  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021814  
     resc: 5.021814 resc_io: 5.000000 resc_cpu: 645836
     resp: 5.021814 resp_io: 5.000000 resp_cpu: 645836
Join order aborted: cost > best plan cost
***********************
Join order[8]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001578  Resp: 5.001578  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46726
      Resp_io: 5.000000  Resp_cpu: 46726
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000840  Resp: 4.000840  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 24862
      Resp_io: 4.000000  Resp_cpu: 24862
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    NL Join : Cost: 3.000762  Resp: 3.000762  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 22562
      Resp_io: 3.000000  Resp_cpu: 22562
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000762
          resc: 3.000762  resc_io: 3.000000  resc_cpu: 22562
          resp: 3.000762  resp_io: 3.000000  resc_cpu: 22562
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (0.800000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 3.000762  Degree: 1  Resp: 3.000762  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 3.000762  Resp: 3.000762  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.500000 (cpu filter eval) (= 50.050000 (per row) * 10.000000 (#rows))
                       =   30686.260000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.001799  Resp: 6.001799  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 53248
      Resp_io: 6.000000  Resp_cpu: 53248
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30954
      Resp_io: 4.000000  Resp_cpu: 30954
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30954
      Resp_io: 4.000000  Resp_cpu: 30954
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001045
          resc: 4.001045  resc_io: 4.000000  resc_cpu: 30954
          resp: 4.001045  resp_io: 4.000000  resc_cpu: 30954
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.001832  Resp: 8.001832  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.001832 
     resc: 8.001832 resc_io: 6.000000 resc_cpu: 59267928
     resp: 8.001832 resp_io: 6.000000 resp_cpu: 59267928
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022086  Resp: 6.022086  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022086  
     resc: 6.022086 resc_io: 6.000000 resc_cpu: 653898
     resp: 6.022086 resp_io: 6.000000 resp_cpu: 653898
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :2
Join order[9]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 4.001309  Resp: 4.001309  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 38747
      Resp_io: 4.000000  Resp_cpu: 38747
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000554
          resc: 2.000554  resc_io: 2.000000  resc_cpu: 16403
          resp: 2.000554  resp_io: 2.000000  resc_cpu: 16403
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.800000 = outer (0.800000) * inner (10.000000) * sel (0.100000)
Join cardinality for NL:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join cardinality without POSQ:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join Card - Rounded: 1 Computed: 0.800000
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021596  Resp: 4.021596  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021596  
     resc: 4.021596 resc_io: 4.000000 resc_cpu: 639397
     resp: 4.021596 resp_io: 4.000000 resp_cpu: 639397
Best:: JoinMethod: NestedLoop
       Cost: 2.000554  Degree: 1  Resp: 2.000554  Card: 0.800000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 2.000554  Resp: 2.000554  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2080  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2081  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.026605 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.026605
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 11.087631  Resp: 11.087631  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 2594464
      Resp_io: 11.000000  Resp_cpu: 2594464
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 12.065190  Resp: 12.065190  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 1930071
      Resp_io: 12.000000  Resp_cpu: 1930071
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25664
      Resp_io: 3.000000  Resp_cpu: 25664
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.1605e-11 
    NL Join : Cost: 3.000832  Resp: 3.000832  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24632
      Resp_io: 3.000000  Resp_cpu: 24632
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25664
      Resp_io: 3.000000  Resp_cpu: 25664
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000832
          resc: 3.000832  resc_io: 3.000000  resc_cpu: 24632
          resp: 3.000832  resp_io: 3.000000  resc_cpu: 24632
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.800000) * inner (0.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 6.001044  Resp: 6.001044  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001044 
     resc: 6.001044 resc_io: 4.000000 resc_cpu: 59244587
     resp: 6.001044 resp_io: 4.000000 resp_cpu: 59244587
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020274  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021318  Resp: 4.021318  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021318  
     resc: 4.021318 resc_io: 4.000000 resc_cpu: 631154
     resp: 4.021318 resp_io: 4.000000 resp_cpu: 631154
Join order aborted: cost > best plan cost
***********************
Join order[10]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500026.604943 (cpu filter eval) (= 50.002660 (per row) * 10000.000000 (#rows))
                       =   2578062.604943
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 10.087349  Resp: 10.087349  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 2586124
      Resp_io: 10.000000  Resp_cpu: 2586124
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913670
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 11.064908  Resp: 11.064908  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1921731
      Resp_io: 11.000000  Resp_cpu: 1921731
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.1605e-07 
    NL Join : Cost: 2.000550  Resp: 2.000550  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16291
      Resp_io: 2.000000  Resp_cpu: 16291
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000550
          resc: 2.000550  resc_io: 2.000000  resc_cpu: 16291
          resp: 2.000550  resp_io: 2.000000  resc_cpu: 16291
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.800000) * inner (0.000000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 2.000550  Degree: 1  Resp: 2.000550  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000550  Resp: 2.000550  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.500000 (cpu filter eval) (= 50.050000 (per row) * 10.000000 (#rows))
                       =   30686.260000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001587  Resp: 5.001587  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46977
      Resp_io: 5.000000  Resp_cpu: 46977
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000834  Resp: 3.000834  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24682
      Resp_io: 3.000000  Resp_cpu: 24682
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000834  Resp: 3.000834  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24682
      Resp_io: 3.000000  Resp_cpu: 24682
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000834
          resc: 3.000834  resc_io: 3.000000  resc_cpu: 24682
          resp: 3.000834  resp_io: 3.000000  resc_cpu: 24682
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.000000  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001620  Resp: 7.001620  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001620 
     resc: 7.001620 resc_io: 5.000000 resc_cpu: 59261656
     resp: 7.001620 resp_io: 5.000000 resp_cpu: 59261656
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.000000  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021874  Resp: 5.021874  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021874  
     resc: 5.021874 resc_io: 5.000000 resc_cpu: 647626
     resp: 5.021874 resp_io: 5.000000 resp_cpu: 647626
Join order aborted: cost > best plan cost
***********************
Join order[11]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001526  Resp: 5.001526  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45186
      Resp_io: 5.000000  Resp_cpu: 45186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001526
          resc: 5.001526  resc_io: 5.000000  resc_cpu: 45186
          resp: 5.001526  resp_io: 5.000000  resc_cpu: 45186
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259866
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259866
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021814  Resp: 5.021814  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021814  
     resc: 5.021814 resc_io: 5.000000 resc_cpu: 645836
     resp: 5.021814 resp_io: 5.000000 resp_cpu: 645836
Join order aborted: cost > best plan cost
***********************
Join order[12]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001578  Resp: 5.001578  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46726
      Resp_io: 5.000000  Resp_cpu: 46726
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000840  Resp: 4.000840  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 24862
      Resp_io: 4.000000  Resp_cpu: 24862
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    NL Join : Cost: 3.000762  Resp: 3.000762  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 22562
      Resp_io: 3.000000  Resp_cpu: 22562
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000762
          resc: 3.000762  resc_io: 3.000000  resc_cpu: 22562
          resp: 3.000762  resp_io: 3.000000  resc_cpu: 22562
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (0.800000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 3.000762  Degree: 1  Resp: 3.000762  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 3.000762  Resp: 3.000762  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.500000 (cpu filter eval) (= 50.050000 (per row) * 10.000000 (#rows))
                       =   30686.260000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.001799  Resp: 6.001799  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 53248
      Resp_io: 6.000000  Resp_cpu: 53248
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30954
      Resp_io: 4.000000  Resp_cpu: 30954
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30954
      Resp_io: 4.000000  Resp_cpu: 30954
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001045
          resc: 4.001045  resc_io: 4.000000  resc_cpu: 30954
          resp: 4.001045  resp_io: 4.000000  resc_cpu: 30954
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.001832  Resp: 8.001832  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.001832 
     resc: 8.001832 resc_io: 6.000000 resc_cpu: 59267928
     resp: 8.001832 resp_io: 6.000000 resp_cpu: 59267928
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022086  Resp: 6.022086  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022086  
     resc: 6.022086 resc_io: 6.000000 resc_cpu: 653898
     resp: 6.022086 resp_io: 6.000000 resp_cpu: 653898
Join order aborted: cost > best plan cost
***********************
(newjo-stop-1) k:2, spcnt:2, perm:12, maxperm:120

*********************************
Number of join permutations tried: 12
*********************************
Enumerating distribution method (advanced)
--- Distribution method for 
join between T1[T1](serial) and L[L](serial); jm = 14; right side access path = IndexUnique
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL
--- Distribution method for 
join between L[L](serial) and T2[T2](serial); jm = 14; right side access path = IndexRange
kkopqIsSerialJoin: serial NLJ: both inputs serial
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL

LORE: or-expansion-subheap (delete addr=0x7f2babc7ee58, in-use=123728, alloc=130104)
LORE: or-expansion is better cost:6.001699

LORE: ******** Same chain after expansion ********
****************
QUERY BLOCK TEXT
****************
SELECT /*+ OPT_PARAM('_optimizer_cbqt_or_expansion' 'off') */ null FROM l, t1, t2 WHERE  
(  ( t1.m = :v1 AND t2.c1 BETWEEN 11 AND 12)       OR 
   ( t1.m = :v2 AND t2.c1 = 103 AND t2.c2 = 13  )   )  AND 
    ( l.id = t1.id AND l.id2 = t2.id )
---------------------
QUERY BLOCK SIGNATURE
---------------------
signature (optimizer): qb_name=SEL$1 nbfros=3 flg=0
  fro(0): flg=4 objn=73644 hint_alias="L"@"SEL$1"
  fro(1): flg=4 objn=73646 hint_alias="T1"@"SEL$1"
  fro(2): flg=4 objn=73648 hint_alias="T2"@"SEL$1"

-----------------------------
SYSTEM STATISTICS INFORMATION
-----------------------------
Using dictionary system stats.
  Using NOWORKLOAD Stats
  CPUSPEEDNW: 2467 millions instructions/sec (default is 100)
  IOTFRSPEED: 4096 bytes per millisecond (default is 4096)
  IOSEEKTIM:  10 milliseconds (default is 10)
  MBRC:       NO VALUE blocks (default is 8)

***************************************
BASE STATISTICAL INFORMATION
***********************
Table Stats::
  Table: T2  Alias: T2
  #Rows: 10000  SSZ: 0  LGR: 0  #Blks:  25  AvgRowLen:  10.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): C1(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#3): C2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#1): ID(NUMBER)
    AvgLen: 4 NDV: 10000 Nulls: 0 Density: 0.000100 Min: 1.000000 Max: 10000.000000
Index Stats::
  Index: T2_C1_C2_ID  Col#: 2 3 1
  LVLS: 1  #LB: 30  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 210.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
  Index: T2_ID  Col#: 1
  LVLS: 1  #LB: 20  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 21.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table: T1  Alias: T1
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): M(NUMBER)
    AvgLen: 3 NDV: 5 Nulls: 0 Density: 0.200000 Min: 0.000000 Max: 4.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: T1_M_ID  Col#: 2 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table:  L  Alias:  L
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
  Column (#2): ID2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: L_ID  Col#: 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
=======================================
SPD: BEGIN context at query block level
=======================================
Query Block SEL$1 (#0)
Return code in qosdSetupDirCtx4QB: NOCTX
=====================================
SPD: END context at query block level
=====================================
Access path analysis for L
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for L[L] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Table: L  Alias: L
    Card: Original: 10.000000  Rounded: 10  Computed: 10.000000  Non Adjusted: 10.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                       =   30185.760000
  Access Path: TableScan
    Cost:  3.001020  Resp: 3.001020  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 30186
      Resp_io: 3.000000  Resp_cpu: 30186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: TableScan
         Cost: 3.001020  Degree: 1  Resp: 3.001020  Card: 10.000000  Bytes: 0.000000

Access path analysis for T1
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T1[T1] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE


 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1)
  Estimated selectivity: 0.200000 , col: #2 

 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)
  Estimated selectivity: 0.200000 , col: #2 
  Table: T1  Alias: T1
    Card: Original: 10.000000  Rounded: 1  Computed: 0.800000  Non Adjusted: 0.800000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Access Path: TableScan
    Cost:  3.001088  Resp: 3.001088  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 32226
      Resp_io: 3.000000  Resp_cpu: 32226
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  2.000350  Resp: 2.000350  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 10361
      Resp_io: 2.000000  Resp_cpu: 10361
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    Cost: 1.000272  Resp: 1.000272  Degree: 1
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T1_M_ID
         Cost: 1.000272  Degree: 1  Resp: 1.000272  Card: 0.800000  Bytes: 0.000000

Access path analysis for T2
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T2[T2] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Estimated selectivity: 0.100000 , col: #2 
  Estimated selectivity: 0.100000 , col: #3 


 kkecdn: Single Table Predicate:"T2"."C1"=103
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C2"=13
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate: ?? 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1">=11
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1"<=12
  Estimated selectivity: 1.000000 , col: #2 
  Table: T2  Alias: T2
    Card: Original: 10000.000000  Rounded: 1  Computed: 0.000000  Non Adjusted: 0.000000
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2081  ("T2"."C1">=11)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2080  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500026.604943 (cpu filter eval) (= 50.002660 (per row) * 10000.000000 (#rows))
                       =   2578062.604943
  Access Path: TableScan
    Cost:  9.087077  Resp: 9.087077  Degree: 0
      Cost_io: 9.000000  Cost_cpu: 2578063
      Resp_io: 9.000000  Resp_cpu: 2578063
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913670
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  10.064636  Resp: 10.064636  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 1913670
      Resp_io: 10.000000  Resp_cpu: 1913670
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 2.000000  resc_cpu: 14443
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.1605e-07 
    Cost: 2.000490  Resp: 2.000490  Degree: 1
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T2_C1_C2_ID
         Cost: 2.000490  Degree: 1  Resp: 2.000490  Card: 0.000000  Bytes: 0.000000

(newjo-restore) [2 1 0 ]
***************************************


OPTIMIZER STATISTICS AND COMPUTATIONS
PJE:  Bypassed; QB is OR expanded SEL$1 (#0)
***************************************
GENERAL PLANS
***************************************
Considering cardinality-based initial join order.
Permutations for Starting Table :0
Join order[1]:  L[L]#0  T1[T1]#1  T2[T2]#2

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 704.000000 (cpu filter eval) (= 70.400000 (per row) * 10.000000 (#rows))
                       =   30889.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 15.011453  Resp: 15.011453  Degree: 1
      Cost_io: 15.000000  Cost_cpu: 339083
      Resp_io: 15.000000  Resp_cpu: 339083
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9025
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.004068  Resp: 7.004068  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 120440
      Resp_io: 7.000000  Resp_cpu: 120440
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 3.001465  Resp: 3.001465  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 43386
      Resp_io: 3.000000  Resp_cpu: 43386
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.001465
          resc: 3.001465  resc_io: 3.000000  resc_cpu: 43386
          resp: 3.001465  resp_io: 3.000000  resc_cpu: 43386
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.800000 = outer (10.000000) * inner (0.800000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.800000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
SM Join (with index on outer)
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 2.000000  resc_cpu: 17943
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 2.000606  Resp: 2.000606  Degree: 1
  Outer table:  L  Alias: L
    resc: 2.000606  card 10.000000  bytes:   deg: 1  resp: 2.000606
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 4.000878  Resp: 4.000878  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021611  Resp: 4.021611  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021611  
     resc: 4.021611 resc_io: 4.000000 resc_cpu: 639847
     resp: 4.021611 resp_io: 4.000000 resp_cpu: 639847
Best:: JoinMethod: NestedLoop
       Cost: 3.001465  Degree: 1  Resp: 3.001465  Card: 0.800000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 3.001465  Resp: 3.001465  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2080  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2081  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.026605 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.026605
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 12.088542  Resp: 12.088542  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 2621447
      Resp_io: 12.000000  Resp_cpu: 2621447
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 13.066101  Resp: 13.066101  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 1957054
      Resp_io: 13.000000  Resp_cpu: 1957054
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001778  Resp: 4.001778  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 52647
      Resp_io: 4.000000  Resp_cpu: 52647
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.1605e-11 
    NL Join : Cost: 4.001743  Resp: 4.001743  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 51615
      Resp_io: 4.000000  Resp_cpu: 51615
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001778  Resp: 4.001778  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 52647
      Resp_io: 4.000000  Resp_cpu: 52647
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001743
          resc: 4.001743  resc_io: 4.000000  resc_cpu: 51615
          resp: 4.001743  resp_io: 4.000000  resc_cpu: 51615
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.800000) * inner (0.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T1  Alias: T1
    resc: 3.001465  card 0.800000  bytes:   deg: 1  resp: 3.001465
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 7.001955  Resp: 7.001955  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001955 
     resc: 7.001955 resc_io: 5.000000 resc_cpu: 59271570
     resp: 7.001955 resp_io: 5.000000 resp_cpu: 59271570
  Outer table:  T1  Alias: T1
    resc: 3.001465  card 0.800000  bytes:   deg: 1  resp: 3.001465
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020274  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.022229  Resp: 5.022229  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.022229  
     resc: 5.022229 resc_io: 5.000000 resc_cpu: 658136
     resp: 5.022229 resp_io: 5.000000 resp_cpu: 658136
Best:: JoinMethod: NestedLoop
       Cost: 4.001743  Degree: 1  Resp: 4.001743  Card: 0.000000 Bytes: 
***********************
Best so far:  Table#: 0  cost: 3.001020  card: 10.000000  bytes: 60.000000
              Table#: 1  cost: 3.001465  card: 0.800000  bytes: 12.000000
              Table#: 2  cost: 4.001743  card: 0.000000  bytes: 22.000000
***********************
Join order[2]:  L[L]#0  T2[T2]#2  T1[T1]#1

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.026605 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.026605
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 72.871785  Resp: 72.871785  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 25810796
      Resp_io: 72.000000  Resp_cpu: 25810796
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 86.647380  Resp: 86.647380  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 19166868
      Resp_io: 86.000000  Resp_cpu: 19166868
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004148  Resp: 13.004148  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122800
      Resp_io: 13.000000  Resp_cpu: 122800
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.1605e-11 
    NL Join : Cost: 13.003799  Resp: 13.003799  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 112478
      Resp_io: 13.000000  Resp_cpu: 112478
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004148  Resp: 13.004148  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122800
      Resp_io: 13.000000  Resp_cpu: 122800
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 13.003799
          resc: 13.003799  resc_io: 13.000000  resc_cpu: 112478
          resp: 13.003799  resp_io: 13.000000  resc_cpu: 112478
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (10.000000) * inner (0.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259866
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259866
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021829  Resp: 5.021829  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021829  
     resc: 5.021829 resc_io: 5.000000 resc_cpu: 646286
     resp: 5.021829 resp_io: 5.000000 resp_cpu: 646286
Join order aborted: cost > best plan cost
***********************
Join order[3]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 4.001309  Resp: 4.001309  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 38747
      Resp_io: 4.000000  Resp_cpu: 38747
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000554
          resc: 2.000554  resc_io: 2.000000  resc_cpu: 16403
          resp: 2.000554  resp_io: 2.000000  resc_cpu: 16403
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.800000 = outer (0.800000) * inner (10.000000) * sel (0.100000)
Join cardinality for NL:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join cardinality without POSQ:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join Card - Rounded: 1 Computed: 0.800000
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021596  Resp: 4.021596  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021596  
     resc: 4.021596 resc_io: 4.000000 resc_cpu: 639397
     resp: 4.021596 resp_io: 4.000000 resp_cpu: 639397
Best:: JoinMethod: NestedLoop
       Cost: 2.000554  Degree: 1  Resp: 2.000554  Card: 0.800000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 2.000554  Resp: 2.000554  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.026605 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.026605
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 11.087631  Resp: 11.087631  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 2594464
      Resp_io: 11.000000  Resp_cpu: 2594464
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 12.065190  Resp: 12.065190  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 1930071
      Resp_io: 12.000000  Resp_cpu: 1930071
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25664
      Resp_io: 3.000000  Resp_cpu: 25664
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.1605e-11 
    NL Join : Cost: 3.000832  Resp: 3.000832  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24632
      Resp_io: 3.000000  Resp_cpu: 24632
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25664
      Resp_io: 3.000000  Resp_cpu: 25664
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000832
          resc: 3.000832  resc_io: 3.000000  resc_cpu: 24632
          resp: 3.000832  resp_io: 3.000000  resc_cpu: 24632
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.800000) * inner (0.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 6.001044  Resp: 6.001044  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001044 
     resc: 6.001044 resc_io: 4.000000 resc_cpu: 59244587
     resp: 6.001044 resp_io: 4.000000 resp_cpu: 59244587
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020274  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021318  Resp: 4.021318  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021318  
     resc: 4.021318 resc_io: 4.000000 resc_cpu: 631154
     resp: 4.021318 resp_io: 4.000000 resp_cpu: 631154
Best:: JoinMethod: NestedLoop
       Cost: 3.000832  Degree: 1  Resp: 3.000832  Card: 0.000000 Bytes: 
***********************
Best so far:  Table#: 1  cost: 1.000272  card: 0.800000  bytes: 6.000000
              Table#: 0  cost: 2.000554  card: 0.800000  bytes: 12.000000
              Table#: 2  cost: 3.000832  card: 0.000000  bytes: 22.000000
***********************
Join order[4]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500026.604943 (cpu filter eval) (= 50.002660 (per row) * 10000.000000 (#rows))
                       =   2578062.604943
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 10.087349  Resp: 10.087349  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 2586124
      Resp_io: 10.000000  Resp_cpu: 2586124
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913670
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 11.064908  Resp: 11.064908  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1921731
      Resp_io: 11.000000  Resp_cpu: 1921731
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.1605e-07 
    NL Join : Cost: 2.000550  Resp: 2.000550  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16291
      Resp_io: 2.000000  Resp_cpu: 16291
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000550
          resc: 2.000550  resc_io: 2.000000  resc_cpu: 16291
          resp: 2.000550  resp_io: 2.000000  resc_cpu: 16291
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.800000) * inner (0.000000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 2.000550  Degree: 1  Resp: 2.000550  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000550  Resp: 2.000550  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.500000 (cpu filter eval) (= 50.050000 (per row) * 10.000000 (#rows))
                       =   30686.260000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001587  Resp: 5.001587  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46977
      Resp_io: 5.000000  Resp_cpu: 46977
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000834  Resp: 3.000834  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24682
      Resp_io: 3.000000  Resp_cpu: 24682
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000834  Resp: 3.000834  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24682
      Resp_io: 3.000000  Resp_cpu: 24682
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000834
          resc: 3.000834  resc_io: 3.000000  resc_cpu: 24682
          resp: 3.000834  resp_io: 3.000000  resc_cpu: 24682
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.000000  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001620  Resp: 7.001620  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001620 
     resc: 7.001620 resc_io: 5.000000 resc_cpu: 59261656
     resp: 7.001620 resp_io: 5.000000 resp_cpu: 59261656
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.000000  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021874  Resp: 5.021874  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021874  
     resc: 5.021874 resc_io: 5.000000 resc_cpu: 647626
     resp: 5.021874 resp_io: 5.000000 resp_cpu: 647626
Join order aborted: cost > best plan cost
***********************
Join order[5]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001526  Resp: 5.001526  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45186
      Resp_io: 5.000000  Resp_cpu: 45186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001526
          resc: 5.001526  resc_io: 5.000000  resc_cpu: 45186
          resp: 5.001526  resp_io: 5.000000  resc_cpu: 45186
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259866
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259866
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021814  Resp: 5.021814  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021814  
     resc: 5.021814 resc_io: 5.000000 resc_cpu: 645836
     resp: 5.021814 resp_io: 5.000000 resp_cpu: 645836
Join order aborted: cost > best plan cost
***********************
Join order[6]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001578  Resp: 5.001578  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46726
      Resp_io: 5.000000  Resp_cpu: 46726
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000840  Resp: 4.000840  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 24862
      Resp_io: 4.000000  Resp_cpu: 24862
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    NL Join : Cost: 3.000762  Resp: 3.000762  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 22562
      Resp_io: 3.000000  Resp_cpu: 22562
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000762
          resc: 3.000762  resc_io: 3.000000  resc_cpu: 22562
          resp: 3.000762  resp_io: 3.000000  resc_cpu: 22562
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (0.800000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 3.000762  Degree: 1  Resp: 3.000762  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 3.000762  Resp: 3.000762  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.500000 (cpu filter eval) (= 50.050000 (per row) * 10.000000 (#rows))
                       =   30686.260000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.001799  Resp: 6.001799  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 53248
      Resp_io: 6.000000  Resp_cpu: 53248
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30954
      Resp_io: 4.000000  Resp_cpu: 30954
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30954
      Resp_io: 4.000000  Resp_cpu: 30954
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001045
          resc: 4.001045  resc_io: 4.000000  resc_cpu: 30954
          resp: 4.001045  resp_io: 4.000000  resc_cpu: 30954
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.001832  Resp: 8.001832  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.001832 
     resc: 8.001832 resc_io: 6.000000 resc_cpu: 59267928
     resp: 8.001832 resp_io: 6.000000 resp_cpu: 59267928
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022086  Resp: 6.022086  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022086  
     resc: 6.022086 resc_io: 6.000000 resc_cpu: 653898
     resp: 6.022086 resp_io: 6.000000 resp_cpu: 653898
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :1
Join order[7]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001526  Resp: 5.001526  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45186
      Resp_io: 5.000000  Resp_cpu: 45186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001526
          resc: 5.001526  resc_io: 5.000000  resc_cpu: 45186
          resp: 5.001526  resp_io: 5.000000  resc_cpu: 45186
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259866
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259866
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021814  Resp: 5.021814  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021814  
     resc: 5.021814 resc_io: 5.000000 resc_cpu: 645836
     resp: 5.021814 resp_io: 5.000000 resp_cpu: 645836
Join order aborted: cost > best plan cost
***********************
Join order[8]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001578  Resp: 5.001578  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46726
      Resp_io: 5.000000  Resp_cpu: 46726
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000840  Resp: 4.000840  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 24862
      Resp_io: 4.000000  Resp_cpu: 24862
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    NL Join : Cost: 3.000762  Resp: 3.000762  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 22562
      Resp_io: 3.000000  Resp_cpu: 22562
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000762
          resc: 3.000762  resc_io: 3.000000  resc_cpu: 22562
          resp: 3.000762  resp_io: 3.000000  resc_cpu: 22562
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (0.800000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 3.000762  Degree: 1  Resp: 3.000762  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 3.000762  Resp: 3.000762  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.500000 (cpu filter eval) (= 50.050000 (per row) * 10.000000 (#rows))
                       =   30686.260000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.001799  Resp: 6.001799  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 53248
      Resp_io: 6.000000  Resp_cpu: 53248
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30954
      Resp_io: 4.000000  Resp_cpu: 30954
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30954
      Resp_io: 4.000000  Resp_cpu: 30954
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001045
          resc: 4.001045  resc_io: 4.000000  resc_cpu: 30954
          resp: 4.001045  resp_io: 4.000000  resc_cpu: 30954
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.001832  Resp: 8.001832  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.001832 
     resc: 8.001832 resc_io: 6.000000 resc_cpu: 59267928
     resp: 8.001832 resp_io: 6.000000 resp_cpu: 59267928
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022086  Resp: 6.022086  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022086  
     resc: 6.022086 resc_io: 6.000000 resc_cpu: 653898
     resp: 6.022086 resp_io: 6.000000 resp_cpu: 653898
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :2
Join order[9]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 4.001309  Resp: 4.001309  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 38747
      Resp_io: 4.000000  Resp_cpu: 38747
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000554
          resc: 2.000554  resc_io: 2.000000  resc_cpu: 16403
          resp: 2.000554  resp_io: 2.000000  resc_cpu: 16403
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.800000 = outer (0.800000) * inner (10.000000) * sel (0.100000)
Join cardinality for NL:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join cardinality without POSQ:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join Card - Rounded: 1 Computed: 0.800000
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021596  Resp: 4.021596  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021596  
     resc: 4.021596 resc_io: 4.000000 resc_cpu: 639397
     resp: 4.021596 resp_io: 4.000000 resp_cpu: 639397
Best:: JoinMethod: NestedLoop
       Cost: 2.000554  Degree: 1  Resp: 2.000554  Card: 0.800000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 2.000554  Resp: 2.000554  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2080  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2081  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.026605 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.026605
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 11.087631  Resp: 11.087631  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 2594464
      Resp_io: 11.000000  Resp_cpu: 2594464
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 12.065190  Resp: 12.065190  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 1930071
      Resp_io: 12.000000  Resp_cpu: 1930071
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25664
      Resp_io: 3.000000  Resp_cpu: 25664
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.1605e-11 
    NL Join : Cost: 3.000832  Resp: 3.000832  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24632
      Resp_io: 3.000000  Resp_cpu: 24632
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25664
      Resp_io: 3.000000  Resp_cpu: 25664
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000832
          resc: 3.000832  resc_io: 3.000000  resc_cpu: 24632
          resp: 3.000832  resp_io: 3.000000  resc_cpu: 24632
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.800000) * inner (0.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 6.001044  Resp: 6.001044  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001044 
     resc: 6.001044 resc_io: 4.000000 resc_cpu: 59244587
     resp: 6.001044 resp_io: 4.000000 resp_cpu: 59244587
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020274  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021318  Resp: 4.021318  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021318  
     resc: 4.021318 resc_io: 4.000000 resc_cpu: 631154
     resp: 4.021318 resp_io: 4.000000 resp_cpu: 631154
Join order aborted: cost > best plan cost
***********************
Join order[10]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500026.604943 (cpu filter eval) (= 50.002660 (per row) * 10000.000000 (#rows))
                       =   2578062.604943
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 10.087349  Resp: 10.087349  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 2586124
      Resp_io: 10.000000  Resp_cpu: 2586124
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913670
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 11.064908  Resp: 11.064908  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1921731
      Resp_io: 11.000000  Resp_cpu: 1921731
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.1605e-07 
    NL Join : Cost: 2.000550  Resp: 2.000550  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16291
      Resp_io: 2.000000  Resp_cpu: 16291
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000550
          resc: 2.000550  resc_io: 2.000000  resc_cpu: 16291
          resp: 2.000550  resp_io: 2.000000  resc_cpu: 16291
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.800000) * inner (0.000000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 2.000550  Degree: 1  Resp: 2.000550  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000550  Resp: 2.000550  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.500000 (cpu filter eval) (= 50.050000 (per row) * 10.000000 (#rows))
                       =   30686.260000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001587  Resp: 5.001587  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46977
      Resp_io: 5.000000  Resp_cpu: 46977
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000834  Resp: 3.000834  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24682
      Resp_io: 3.000000  Resp_cpu: 24682
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000834  Resp: 3.000834  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24682
      Resp_io: 3.000000  Resp_cpu: 24682
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000834
          resc: 3.000834  resc_io: 3.000000  resc_cpu: 24682
          resp: 3.000834  resp_io: 3.000000  resc_cpu: 24682
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.000000  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001620  Resp: 7.001620  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001620 
     resc: 7.001620 resc_io: 5.000000 resc_cpu: 59261656
     resp: 7.001620 resp_io: 5.000000 resp_cpu: 59261656
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.000000  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021874  Resp: 5.021874  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021874  
     resc: 5.021874 resc_io: 5.000000 resc_cpu: 647626
     resp: 5.021874 resp_io: 5.000000 resp_cpu: 647626
Join order aborted: cost > best plan cost
***********************
Join order[11]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001526  Resp: 5.001526  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45186
      Resp_io: 5.000000  Resp_cpu: 45186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001526
          resc: 5.001526  resc_io: 5.000000  resc_cpu: 45186
          resp: 5.001526  resp_io: 5.000000  resc_cpu: 45186
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259866
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259866
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021814  Resp: 5.021814  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021814  
     resc: 5.021814 resc_io: 5.000000 resc_cpu: 645836
     resp: 5.021814 resp_io: 5.000000 resp_cpu: 645836
Join order aborted: cost > best plan cost
***********************
Join order[12]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001578  Resp: 5.001578  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46726
      Resp_io: 5.000000  Resp_cpu: 46726
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000840  Resp: 4.000840  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 24862
      Resp_io: 4.000000  Resp_cpu: 24862
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    NL Join : Cost: 3.000762  Resp: 3.000762  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 22562
      Resp_io: 3.000000  Resp_cpu: 22562
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000762
          resc: 3.000762  resc_io: 3.000000  resc_cpu: 22562
          resp: 3.000762  resp_io: 3.000000  resc_cpu: 22562
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (0.800000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 3.000762  Degree: 1  Resp: 3.000762  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 3.000762  Resp: 3.000762  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.500000 (cpu filter eval) (= 50.050000 (per row) * 10.000000 (#rows))
                       =   30686.260000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.001799  Resp: 6.001799  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 53248
      Resp_io: 6.000000  Resp_cpu: 53248
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30954
      Resp_io: 4.000000  Resp_cpu: 30954
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30954
      Resp_io: 4.000000  Resp_cpu: 30954
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001045
          resc: 4.001045  resc_io: 4.000000  resc_cpu: 30954
          resp: 4.001045  resp_io: 4.000000  resc_cpu: 30954
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.001832  Resp: 8.001832  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.001832 
     resc: 8.001832 resc_io: 6.000000 resc_cpu: 59267928
     resp: 8.001832 resp_io: 6.000000 resp_cpu: 59267928
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022086  Resp: 6.022086  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022086  
     resc: 6.022086 resc_io: 6.000000 resc_cpu: 653898
     resp: 6.022086 resp_io: 6.000000 resp_cpu: 653898
Join order aborted: cost > best plan cost
***********************
(newjo-stop-1) k:2, spcnt:2, perm:12, maxperm:120

*********************************
Number of join permutations tried: 12
*********************************
Enumerating distribution method (advanced)
--- Distribution method for 
join between T1[T1](serial) and L[L](serial); jm = 14; right side access path = IndexUnique
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL
--- Distribution method for 
join between L[L](serial) and T2[T2](serial); jm = 14; right side access path = IndexRange
kkopqIsSerialJoin: serial NLJ: both inputs serial
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL

LORE: Trying or-Expansion on query block SEL$1 (#0)
LORE: Or-expansion bypassed: No index driver found in OR chain: 
id=0  predicate=(LNNVL("T2"."C1"=103) OR LNNVL("T2"."C2"=13)) AND "T2"."C1">=11 AND "T2"."C1"<=12 AND ("T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
****************
QUERY BLOCK TEXT
****************
SELECT /*+ OPT_PARAM('_optimizer_cbqt_or_expansion' 'off') */ null FROM l, t1, t2 WHERE  
(  ( t1.m = :v1 AND t2.c1 BETWEEN 11 AND 12)       OR 
   ( t1.m = :v2 AND t2.c1 = 103 AND t2.c2 = 13  )   )  AND 
    ( l.id = t1.id AND l.id2 = t2.id )
---------------------
QUERY BLOCK SIGNATURE
---------------------
signature (optimizer): qb_name=SEL$1 nbfros=3 flg=0
  fro(0): flg=4 objn=73644 hint_alias="L"@"SEL$1"
  fro(1): flg=4 objn=73646 hint_alias="T1"@"SEL$1"
  fro(2): flg=4 objn=73648 hint_alias="T2"@"SEL$1"

-----------------------------
SYSTEM STATISTICS INFORMATION
-----------------------------
Using dictionary system stats.
  Using NOWORKLOAD Stats
  CPUSPEEDNW: 2467 millions instructions/sec (default is 100)
  IOTFRSPEED: 4096 bytes per millisecond (default is 4096)
  IOSEEKTIM:  10 milliseconds (default is 10)
  MBRC:       NO VALUE blocks (default is 8)

***************************************
BASE STATISTICAL INFORMATION
***********************
Table Stats::
  Table: T2  Alias: T2
  #Rows: 10000  SSZ: 0  LGR: 0  #Blks:  25  AvgRowLen:  10.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): C1(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#3): C2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#1): ID(NUMBER)
    AvgLen: 4 NDV: 10000 Nulls: 0 Density: 0.000100 Min: 1.000000 Max: 10000.000000
Index Stats::
  Index: T2_C1_C2_ID  Col#: 2 3 1
  LVLS: 1  #LB: 30  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 210.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
  Index: T2_ID  Col#: 1
  LVLS: 1  #LB: 20  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 21.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table: T1  Alias: T1
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): M(NUMBER)
    AvgLen: 3 NDV: 5 Nulls: 0 Density: 0.200000 Min: 0.000000 Max: 4.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: T1_M_ID  Col#: 2 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table:  L  Alias:  L
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
  Column (#2): ID2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: L_ID  Col#: 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
=======================================
SPD: BEGIN context at query block level
=======================================
Query Block SEL$1 (#0)
Return code in qosdSetupDirCtx4QB: NOCTX
=====================================
SPD: END context at query block level
=====================================
Access path analysis for L
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for L[L] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Table: L  Alias: L
    Card: Original: 10.000000  Rounded: 10  Computed: 10.000000  Non Adjusted: 10.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                       =   30185.760000
  Access Path: TableScan
    Cost:  3.001020  Resp: 3.001020  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 30186
      Resp_io: 3.000000  Resp_cpu: 30186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: TableScan
         Cost: 3.001020  Degree: 1  Resp: 3.001020  Card: 10.000000  Bytes: 0.000000

Access path analysis for T1
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T1[T1] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE


 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1)
  Estimated selectivity: 0.200000 , col: #2 

 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)
  Estimated selectivity: 0.200000 , col: #2 
  Table: T1  Alias: T1
    Card: Original: 10.000000  Rounded: 1  Computed: 0.800000  Non Adjusted: 0.800000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Access Path: TableScan
    Cost:  3.001088  Resp: 3.001088  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 32226
      Resp_io: 3.000000  Resp_cpu: 32226
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  2.000350  Resp: 2.000350  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 10361
      Resp_io: 2.000000  Resp_cpu: 10361
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    Cost: 1.000272  Resp: 1.000272  Degree: 1
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T1_M_ID
         Cost: 1.000272  Degree: 1  Resp: 1.000272  Card: 0.800000  Bytes: 0.000000

Access path analysis for T2
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T2[T2] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE


 kkecdn: Single Table Predicate:"T2"."C1">=11
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1"<=12
  Estimated selectivity: 1.000000 , col: #2 

 kkecdn: Single Table Predicate: ?? 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1">=11
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1"<=12
  Estimated selectivity: 1.000000 , col: #2 
  Table: T2  Alias: T2
    Card: Original: 10000.000000  Rounded: 1000  Computed: 999.997222  Non Adjusted: 999.997222
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 547963.097394 (cpu filter eval) (= 54.796310 (per row) * 10000.000000 (#rows))
                       =   2625999.097394
  Access Path: TableScan
    Cost:  9.088696  Resp: 9.088696  Degree: 0
      Cost_io: 9.000000  Cost_cpu: 2625999
      Resp_io: 9.000000  Resp_cpu: 2625999
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1961606
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  10.066255  Resp: 10.066255  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 1961606
      Resp_io: 10.000000  Resp_cpu: 1961606
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 4.000000  resc_cpu: 228486
    ix_sel: 0.100000  ix_sel_with_filters: 0.007778 
    Cost: 4.009669  Resp: 4.009669  Degree: 1
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T2_C1_C2_ID
         Cost: 4.009669  Degree: 1  Resp: 4.009669  Card: 999.997222  Bytes: 0.000000

(newjo-restore) [2 1 0 ]
***************************************


OPTIMIZER STATISTICS AND COMPUTATIONS
PJE:  Bypassed; QB is OR expanded SEL$1 (#0)
***************************************
GENERAL PLANS
***************************************
Considering cardinality-based initial join order.
Permutations for Starting Table :0
Join order[1]:  L[L]#0  T1[T1]#1  T2[T2]#2

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 704.000000 (cpu filter eval) (= 70.400000 (per row) * 10.000000 (#rows))
                       =   30889.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 15.011453  Resp: 15.011453  Degree: 1
      Cost_io: 15.000000  Cost_cpu: 339083
      Resp_io: 15.000000  Resp_cpu: 339083
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9025
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.004068  Resp: 7.004068  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 120440
      Resp_io: 7.000000  Resp_cpu: 120440
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 3.001465  Resp: 3.001465  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 43386
      Resp_io: 3.000000  Resp_cpu: 43386
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.001465
          resc: 3.001465  resc_io: 3.000000  resc_cpu: 43386
          resp: 3.001465  resp_io: 3.000000  resc_cpu: 43386
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.800000 = outer (10.000000) * inner (0.800000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.800000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
SM Join (with index on outer)
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 2.000000  resc_cpu: 17943
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 2.000606  Resp: 2.000606  Degree: 1
  Outer table:  L  Alias: L
    resc: 2.000606  card 10.000000  bytes:   deg: 1  resp: 2.000606
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 4.000878  Resp: 4.000878  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021611  Resp: 4.021611  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021611  
     resc: 4.021611 resc_io: 4.000000 resc_cpu: 639847
     resp: 4.021611 resp_io: 4.000000 resp_cpu: 639847
Best:: JoinMethod: NestedLoop
       Cost: 3.001465  Degree: 1  Resp: 3.001465  Card: 0.800000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 3.001465  Resp: 3.001465  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Cost of predicates:
    io = 0.000000, cpu = 160.000500, sel = 0.999999 flag = 2048  (OR chain)
      io = NOCOST, cpu = 150.000000, sel = 0.800000 flag = 2048  (LNNVL("T1"."M"=TO_NUMBER(:B1)))
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2048  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2048  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2064  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2080  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500557.642110 (cpu filter eval) (= 50.055764 (per row) * 10000.000000 (#rows))
                       =   2578593.642110
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 12.088560  Resp: 12.088560  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 2621979
      Resp_io: 12.000000  Resp_cpu: 2621979
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1914201
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 13.066119  Resp: 13.066119  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 1957587
      Resp_io: 13.000000  Resp_cpu: 1957587
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9267
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001778  Resp: 4.001778  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 52653
      Resp_io: 4.000000  Resp_cpu: 52653
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

kkofmx: index filter: ?? 

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 7.7778e-07 
    NL Join : Cost: 6.010662  Resp: 6.010662  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 315670
      Resp_io: 6.000000  Resp_cpu: 315670
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9267
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001778  Resp: 4.001778  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 52653
      Resp_io: 4.000000  Resp_cpu: 52653
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.001530  Resp: 3.001530  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 45286
      Resp_io: 3.000000  Resp_cpu: 45286

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 6.008971  Resp: 6.008971  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 265600
      Resp_io: 6.000000  Resp_cpu: 265600
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 3.001575, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 7.028702, sel = 0.100000
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001778
          resc: 4.001778  resc_io: 4.000000  resc_cpu: 52653
          resp: 4.001778  resp_io: 4.000000  resc_cpu: 52653
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.799997 = outer (0.800000) * inner (999.997222) * sel (1.0000e-03)
Join cardinality for HJ/SMJ (no post filters):  0.799998, outer: 0.800000, inner: 999.997222, sel: 1.0000e-03
Join Card - Rounded: 1 Computed: 0.799997
  Outer table:  T1  Alias: T1
    resc: 3.001465  card 0.800000  bytes:   deg: 1  resp: 3.001465
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 9.026300  Resp: 9.026300  [multiMatchCost=0.000000]
SM Join
  SM cost: 9.026300 
     resc: 9.026300 resc_io: 7.000000 resc_cpu: 59992337
     resp: 9.026300 resp_io: 7.000000 resp_cpu: 59992337
  Outer table:  T1  Alias: T1
    resc: 3.001465  card 0.800000  bytes:   deg: 1  resp: 3.001465
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023648  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 7.034782  Resp: 7.034782  [multiMatchCost=0.000000]
HA Join
  HA cost: 7.034782  
     resc: 7.034782 resc_io: 7.000000 resc_cpu: 1029799
     resp: 7.034782 resp_io: 7.000000 resp_cpu: 1029799
Best:: JoinMethod: NestedLoop
       Cost: 4.001778  Degree: 1  Resp: 4.001778  Card: 0.799997 Bytes: 
***********************
Best so far:  Table#: 0  cost: 3.001020  card: 10.000000  bytes: 60.000000
              Table#: 1  cost: 3.001465  card: 0.800000  bytes: 12.000000
              Table#: 2  cost: 4.001778  card: 0.799997  bytes: 22.000000
***********************
Join order[2]:  L[L]#0  T2[T2]#2  T1[T1]#1

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2064  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500547.963097 (cpu filter eval) (= 50.054796 (per row) * 10000.000000 (#rows))
                       =   2578583.963097
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 72.871961  Resp: 72.871961  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 25816025
      Resp_io: 72.000000  Resp_cpu: 25816025
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1914191
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 86.647556  Resp: 86.647556  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 19172097
      Resp_io: 86.000000  Resp_cpu: 19172097
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9266
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004149  Resp: 13.004149  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122848
      Resp_io: 13.000000  Resp_cpu: 122848
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 7.7778e-07 
    NL Join : Cost: 33.092982  Resp: 33.092982  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 2752907
      Resp_io: 33.000000  Resp_cpu: 2752907
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9266
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004149  Resp: 13.004149  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122848
      Resp_io: 13.000000  Resp_cpu: 122848
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.001661  Resp: 3.001661  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 49186
      Resp_io: 3.000000  Resp_cpu: 49186

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 33.076075  Resp: 33.076075  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 2252329
      Resp_io: 33.000000  Resp_cpu: 2252329
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 3.001707, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 34.095833, sel = 0.100000
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 13.004149
          resc: 13.004149  resc_io: 13.000000  resc_cpu: 122848
          resp: 13.004149  resp_io: 13.000000  resc_cpu: 122848
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  9.999972 = outer (10.000000) * inner (999.997222) * sel (0.001000)
Join Card - Rounded: 10 Computed: 9.999972
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 9.025904  Resp: 9.025904  [multiMatchCost=0.000000]
SM Join
  SM cost: 9.025904 
     resc: 9.025904 resc_io: 7.000000 resc_cpu: 59980634
     resp: 9.025904 resp_io: 7.000000 resp_cpu: 59980634
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023694  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 7.034382  Resp: 7.034382  [multiMatchCost=0.000000]
HA Join
  HA cost: 7.034382  
     resc: 7.034382 resc_io: 7.000000 resc_cpu: 1017949
     resp: 7.034382 resp_io: 7.000000 resp_cpu: 1017949
Join order aborted: cost > best plan cost
***********************
Join order[3]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 4.001309  Resp: 4.001309  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 38747
      Resp_io: 4.000000  Resp_cpu: 38747
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000554
          resc: 2.000554  resc_io: 2.000000  resc_cpu: 16403
          resp: 2.000554  resp_io: 2.000000  resc_cpu: 16403
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.800000 = outer (0.800000) * inner (10.000000) * sel (0.100000)
Join cardinality for NL:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join cardinality without POSQ:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join Card - Rounded: 1 Computed: 0.800000
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021596  Resp: 4.021596  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021596  
     resc: 4.021596 resc_io: 4.000000 resc_cpu: 639397
     resp: 4.021596 resp_io: 4.000000 resp_cpu: 639397
Best:: JoinMethod: NestedLoop
       Cost: 2.000554  Degree: 1  Resp: 2.000554  Card: 0.800000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 2.000554  Resp: 2.000554  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 160.000500, sel = 0.999999 flag = 2048  (OR chain)
      io = NOCOST, cpu = 150.000000, sel = 0.800000 flag = 2048  (LNNVL("T1"."M"=TO_NUMBER(:B1)))
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2048  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2048  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2064  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500557.642110 (cpu filter eval) (= 50.055764 (per row) * 10000.000000 (#rows))
                       =   2578593.642110
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 11.087649  Resp: 11.087649  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 2594997
      Resp_io: 11.000000  Resp_cpu: 2594997
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1914201
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 12.065208  Resp: 12.065208  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 1930604
      Resp_io: 12.000000  Resp_cpu: 1930604
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9267
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25670
      Resp_io: 3.000000  Resp_cpu: 25670
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

kkofmx: index filter: ?? 

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 7.7778e-07 
    NL Join : Cost: 5.009751  Resp: 5.009751  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 288687
      Resp_io: 5.000000  Resp_cpu: 288687
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9267
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25670
      Resp_io: 3.000000  Resp_cpu: 25670
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 2.000618  Resp: 2.000618  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 18303
      Resp_io: 2.000000  Resp_cpu: 18303

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.008060  Resp: 5.008060  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 238617
      Resp_io: 5.000000  Resp_cpu: 238617
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 2.000664, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 6.027790, sel = 0.100000
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000867
          resc: 3.000867  resc_io: 3.000000  resc_cpu: 25670
          resp: 3.000867  resp_io: 3.000000  resc_cpu: 25670
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.799997 = outer (0.800000) * inner (999.997222) * sel (1.0000e-03)
Join cardinality for HJ/SMJ (no post filters):  0.799998, outer: 0.800000, inner: 999.997222, sel: 1.0000e-03
Join Card - Rounded: 1 Computed: 0.799997
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 8.025388  Resp: 8.025388  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.025388 
     resc: 8.025388 resc_io: 6.000000 resc_cpu: 59965354
     resp: 8.025388 resp_io: 6.000000 resp_cpu: 59965354
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023648  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 6.033871  Resp: 6.033871  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.033871  
     resc: 6.033871 resc_io: 6.000000 resc_cpu: 1002817
     resp: 6.033871 resp_io: 6.000000 resp_cpu: 1002817
Plan cardinality mismatch: best card= 0.79999733333   curr card= 0.79999733333
Best:: JoinMethod: NestedLoop
       Cost: 3.000867  Degree: 1  Resp: 3.000867  Card: 0.799997 Bytes: 
***********************
Best so far:  Table#: 1  cost: 1.000272  card: 0.800000  bytes: 6.000000
              Table#: 0  cost: 2.000554  card: 0.800000  bytes: 12.000000
              Table#: 2  cost: 3.000867  card: 0.799997  bytes: 22.000000
***********************
Join order[4]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 160.000500, sel = 0.999999 flag = 2048  (OR chain)
      io = NOCOST, cpu = 150.000000, sel = 0.800000 flag = 2048  (LNNVL("T1"."M"=TO_NUMBER(:B1)))
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2048  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2048  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2064  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 557642.109739 (cpu filter eval) (= 55.764211 (per row) * 10000.000000 (#rows))
                       =   2635678.109739
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 10.089295  Resp: 10.089295  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 2643740
      Resp_io: 10.000000  Resp_cpu: 2643740
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1971285
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 11.066854  Resp: 11.066854  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1979347
      Resp_io: 11.000000  Resp_cpu: 1979347
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.007778 
    NL Join : Cost: 4.010150  Resp: 4.010150  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 300498
      Resp_io: 4.000000  Resp_cpu: 300498
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.010150
          resc: 4.010150  resc_io: 4.000000  resc_cpu: 300498
          resp: 4.010150  resp_io: 4.000000  resc_cpu: 300498
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  799.997333 = outer (0.800000) * inner (999.997222) * sel (0.999999)
Join cardinality for HJ/SMJ (no post filters):  799.997778, outer: 0.800000, inner: 999.997222, sel: 0.999999
Join Card - Rounded: 800 Computed: 799.997333
Join order aborted: cost > best plan cost
***********************
Join order[5]:  T2[T2]#2  L[L]#0  T1[T1]#1
Join order aborted: cost > best plan cost
***********************
Join order[6]:  T2[T2]#2  T1[T1]#1  L[L]#0
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :1
Join order[7]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 4.001309  Resp: 4.001309  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 38747
      Resp_io: 4.000000  Resp_cpu: 38747
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000554
          resc: 2.000554  resc_io: 2.000000  resc_cpu: 16403
          resp: 2.000554  resp_io: 2.000000  resc_cpu: 16403
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.800000 = outer (0.800000) * inner (10.000000) * sel (0.100000)
Join cardinality for NL:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join cardinality without POSQ:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join Card - Rounded: 1 Computed: 0.800000
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021596  Resp: 4.021596  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021596  
     resc: 4.021596 resc_io: 4.000000 resc_cpu: 639397
     resp: 4.021596 resp_io: 4.000000 resp_cpu: 639397
Best:: JoinMethod: NestedLoop
       Cost: 2.000554  Degree: 1  Resp: 2.000554  Card: 0.800000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 2.000554  Resp: 2.000554  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 160.000500, sel = 0.999999 flag = 2080  (OR chain)
      io = NOCOST, cpu = 150.000000, sel = 0.800000 flag = 2048  (LNNVL("T1"."M"=TO_NUMBER(:B1)))
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2048  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2048  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2064  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2080  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500557.642110 (cpu filter eval) (= 50.055764 (per row) * 10000.000000 (#rows))
                       =   2578593.642110
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 11.087649  Resp: 11.087649  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 2594997
      Resp_io: 11.000000  Resp_cpu: 2594997
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1914201
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 12.065208  Resp: 12.065208  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 1930604
      Resp_io: 12.000000  Resp_cpu: 1930604
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9267
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25670
      Resp_io: 3.000000  Resp_cpu: 25670
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

kkofmx: index filter: ?? 

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 7.7778e-07 
    NL Join : Cost: 5.009751  Resp: 5.009751  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 288687
      Resp_io: 5.000000  Resp_cpu: 288687
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9267
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25670
      Resp_io: 3.000000  Resp_cpu: 25670
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 2.000618  Resp: 2.000618  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 18303
      Resp_io: 2.000000  Resp_cpu: 18303

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.008060  Resp: 5.008060  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 238617
      Resp_io: 5.000000  Resp_cpu: 238617
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 2.000664, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 6.027790, sel = 0.100000
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000867
          resc: 3.000867  resc_io: 3.000000  resc_cpu: 25670
          resp: 3.000867  resp_io: 3.000000  resc_cpu: 25670
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.799997 = outer (0.800000) * inner (999.997222) * sel (1.0000e-03)
Join cardinality for HJ/SMJ (no post filters):  0.799998, outer: 0.800000, inner: 999.997222, sel: 1.0000e-03
Join Card - Rounded: 1 Computed: 0.799997
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 8.025388  Resp: 8.025388  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.025388 
     resc: 8.025388 resc_io: 6.000000 resc_cpu: 59965354
     resp: 8.025388 resp_io: 6.000000 resp_cpu: 59965354
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023648  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 6.033871  Resp: 6.033871  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.033871  
     resc: 6.033871 resc_io: 6.000000 resc_cpu: 1002817
     resp: 6.033871 resp_io: 6.000000 resp_cpu: 1002817
Join order aborted: cost > best plan cost
***********************
Join order[8]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 160.000500, sel = 0.999999 flag = 2048  (OR chain)
      io = NOCOST, cpu = 150.000000, sel = 0.800000 flag = 2048  (LNNVL("T1"."M"=TO_NUMBER(:B1)))
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2048  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2048  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2064  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 557642.109739 (cpu filter eval) (= 55.764211 (per row) * 10000.000000 (#rows))
                       =   2635678.109739
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 10.089295  Resp: 10.089295  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 2643740
      Resp_io: 10.000000  Resp_cpu: 2643740
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1971285
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 11.066854  Resp: 11.066854  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1979347
      Resp_io: 11.000000  Resp_cpu: 1979347
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.007778 
    NL Join : Cost: 4.010150  Resp: 4.010150  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 300498
      Resp_io: 4.000000  Resp_cpu: 300498
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.010150
          resc: 4.010150  resc_io: 4.000000  resc_cpu: 300498
          resp: 4.010150  resp_io: 4.000000  resc_cpu: 300498
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  799.997333 = outer (0.800000) * inner (999.997222) * sel (0.999999)
Join cardinality for HJ/SMJ (no post filters):  799.997778, outer: 0.800000, inner: 999.997222, sel: 0.999999
Join Card - Rounded: 800 Computed: 799.997333
Join order aborted: cost > best plan cost
***********************
Join order[9]:  T2[T2]#2  L[L]#0  T1[T1]#1
Join order aborted: cost > best plan cost
***********************
Join order[10]:  T2[T2]#2  T1[T1]#1  L[L]#0
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :2
Join order[11]:  T2[T2]#2  L[L]#0  T1[T1]#1
Join order aborted: cost > best plan cost
***********************
Join order[12]:  T2[T2]#2  T1[T1]#1  L[L]#0
Join order aborted: cost > best plan cost
***********************
(newjo-stop-1) k:2, spcnt:2, perm:12, maxperm:120

*********************************
Number of join permutations tried: 12
*********************************
Enumerating distribution method (advanced)
--- Distribution method for 
join between T1[T1](serial) and L[L](serial); jm = 14; right side access path = IndexUnique
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL
--- Distribution method for 
join between L[L](serial) and T2[T2](serial); jm = 14; right side access path = IndexUnique
kkopqIsSerialJoin: serial NLJ: both inputs serial
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL

LORE: Trying or-Expansion on query block SEL$1 (#0)
LORE: Or-expansion bypassed: No index driver found in OR chain: 
id=0  predicate=(LNNVL("T1"."M"=TO_NUMBER(:B1)) OR LNNVL("T2"."C1"=103) OR LNNVL("T2"."C2"=13)) AND "T1"."M"=TO_NUMBER(:B2) AND "T2"."C1">=11 AND "T2"."C1"<=12 AND (LNNVL("T2"."C1"=103) OR LNNVL("T2"."C2"=13)) AND "T2"."C1">=11 AND "T2"."C1"<=12 AND ("T1"."M"=TO_NUMBER(:B3) OR "T1"."M"=TO_NUMBER(:B4)) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
LORE: Or-expansion bypassed: No index driver found in OR chain: 
id=0  predicate=(LNNVL("T2"."C1"=103) OR LNNVL("T2"."C2"=13)) AND "T2"."C1">=11 AND "T2"."C1"<=12 AND ("T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"

LORE: ******** Final costing  ********
Registered qb: SEL$1_1 0x657ca0e8 (OR EXPANSION SEL$1; SEL$1; 8 LIST)
---------------------
QUERY BLOCK SIGNATURE
---------------------
  signature (): qb_name=SEL$1_1 nbfros=3 flg=0
    fro(0): flg=0 objn=73644 hint_alias="L"@"SEL$1"
    fro(1): flg=0 objn=73646 hint_alias="T1"@"SEL$1"
    fro(2): flg=0 objn=73648 hint_alias="T2"@"SEL$1"

LORE: Predicate chain for or-expanded branch SEL$1_1 is:
id=0  predicate="T2"."C1"=103 AND "T2"."C2"=13 AND ("T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)) AND ("T1"."M"=TO_NUMBER(:B3) AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=TO_NUMBER(:B4) AND "T2"."C1"=103 AND "T2"."C2"=13) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
****************
QUERY BLOCK TEXT
****************
SELECT /*+ OPT_PARAM('_optimizer_cbqt_or_expansion' 'off') */ null FROM l, t1, t2 WHERE  
(  ( t1.m = :v1 AND t2.c1 BETWEEN 11 AND 12)       OR 
   ( t1.m = :v2 AND t2.c1 = 103 AND t2.c2 = 13  )   )  AND 
    ( l.id = t1.id AND l.id2 = t2.id )
---------------------
QUERY BLOCK SIGNATURE
---------------------
signature (optimizer): qb_name=SEL$1_1 nbfros=3 flg=0
  fro(0): flg=0 objn=73644 hint_alias="L"@"SEL$1"
  fro(1): flg=0 objn=73646 hint_alias="T1"@"SEL$1"
  fro(2): flg=0 objn=73648 hint_alias="T2"@"SEL$1"

-----------------------------
SYSTEM STATISTICS INFORMATION
-----------------------------
Using dictionary system stats.
  Using NOWORKLOAD Stats
  CPUSPEEDNW: 2467 millions instructions/sec (default is 100)
  IOTFRSPEED: 4096 bytes per millisecond (default is 4096)
  IOSEEKTIM:  10 milliseconds (default is 10)
  MBRC:       NO VALUE blocks (default is 8)

***************************************
BASE STATISTICAL INFORMATION
***********************
Table Stats::
  Table: T2  Alias: T2
  #Rows: 10000  SSZ: 0  LGR: 0  #Blks:  25  AvgRowLen:  10.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): C1(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#3): C2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#1): ID(NUMBER)
    AvgLen: 4 NDV: 10000 Nulls: 0 Density: 0.000100 Min: 1.000000 Max: 10000.000000
Index Stats::
  Index: T2_C1_C2_ID  Col#: 2 3 1
  LVLS: 1  #LB: 30  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 210.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
  Index: T2_ID  Col#: 1
  LVLS: 1  #LB: 20  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 21.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table: T1  Alias: T1
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): M(NUMBER)
    AvgLen: 3 NDV: 5 Nulls: 0 Density: 0.200000 Min: 0.000000 Max: 4.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: T1_M_ID  Col#: 2 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table:  L  Alias:  L
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
  Column (#2): ID2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: L_ID  Col#: 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
=======================================
SPD: BEGIN context at query block level
=======================================
Query Block SEL$1_1 (#0)
Return code in qosdSetupDirCtx4QB: NOCTX
=====================================
SPD: END context at query block level
=====================================
Access path analysis for L
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for L[L] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Table: L  Alias: L
    Card: Original: 10.000000  Rounded: 10  Computed: 10.000000  Non Adjusted: 10.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                       =   30185.760000
  Access Path: TableScan
    Cost:  3.001020  Resp: 3.001020  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 30186
      Resp_io: 3.000000  Resp_cpu: 30186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: TableScan
         Cost: 3.001020  Degree: 1  Resp: 3.001020  Card: 10.000000  Bytes: 0.000000

Access path analysis for T1
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T1[T1] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE

 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)
  Estimated selectivity: 0.200000 , col: #2 
  Table: T1  Alias: T1
    Card: Original: 10.000000  Rounded: 4  Computed: 4.000000  Non Adjusted: 4.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2700.000000 (cpu filter eval) (= 270.000000 (per row) * 10.000000 (#rows))
                       =   32885.760000
  Access Path: TableScan
    Cost:  3.001111  Resp: 3.001111  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 32886
      Resp_io: 3.000000  Resp_cpu: 32886
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 11021
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  2.000372  Resp: 2.000372  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 11021
      Resp_io: 2.000000  Resp_cpu: 11021
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.400000 
    Cost: 1.000508  Resp: 1.000508  Degree: 1
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    Cost: 1.000254  Resp: 1.000254  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    Cost: 1.000254  Resp: 1.000254  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 2.000267, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T1_M_ID
         Cost: 1.000508  Degree: 1  Resp: 1.000508  Card: 4.000000  Bytes: 0.000000

Access path analysis for T2
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T2[T2] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Estimated selectivity: 0.100000 , col: #2 
  Estimated selectivity: 0.100000 , col: #3 


 kkecdn: Single Table Predicate:"T2"."C1"=103
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C2"=13
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Table: T2  Alias: T2
    Card: Original: 10000.000000  Rounded: 1  Computed: 0.027778  Non Adjusted: 0.027778
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2081  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2080  ("T2"."C2"=13)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.000000 (cpu filter eval) (= 50.002500 (per row) * 10000.000000 (#rows))
                       =   2578061.000000
  Access Path: TableScan
    Cost:  9.087077  Resp: 9.087077  Degree: 0
      Cost_io: 9.000000  Cost_cpu: 2578061
      Resp_io: 9.000000  Resp_cpu: 2578061
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  10.064636  Resp: 10.064636  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 1913668
      Resp_io: 10.000000  Resp_cpu: 1913668
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 2.000000  resc_cpu: 14443
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.7778e-06 
    Cost: 2.000488  Resp: 2.000488  Degree: 1
  ****** trying bitmap/domain indexes ******

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 2.000000  resc_cpu: 14443
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.7778e-06 
    Cost: 2.000488  Resp: 2.000488  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 4.000000  resc_cpu: 228486
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    Cost: 4.007717  Resp: 4.007717  Degree: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_C1_C2_ID
      Cost = 3.000488, sel = 2.7778e-06
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T2_C1_C2_ID
         Cost: 2.000488  Degree: 1  Resp: 2.000488  Card: 0.027778  Bytes: 0.000000

(newjo-restore) [2 1 0 ]
***************************************


OPTIMIZER STATISTICS AND COMPUTATIONS
PJE:  Bypassed; QB is OR expanded SEL$1_1 (#0)
***************************************
GENERAL PLANS
***************************************
Considering cardinality-based initial join order.
Permutations for Starting Table :0
Join order[1]:  L[L]#0  T1[T1]#1  T2[T2]#2

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 770.000000 (cpu filter eval) (= 77.000000 (per row) * 10.000000 (#rows))
                       =   30955.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 15.011475  Resp: 15.011475  Degree: 1
      Cost_io: 15.000000  Cost_cpu: 339743
      Resp_io: 15.000000  Resp_cpu: 339743
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9091
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.004090  Resp: 7.004090  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 121100
      Resp_io: 7.000000  Resp_cpu: 121100
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 13.005965  Resp: 13.005965  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 176615
      Resp_io: 13.000000  Resp_cpu: 176615
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.001374  Resp: 3.001374  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 40686
      Resp_io: 3.000000  Resp_cpu: 40686

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.001374  Resp: 3.001374  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 40686
      Resp_io: 3.000000  Resp_cpu: 40686
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 13.003560  Resp: 13.003560  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 105400
      Resp_io: 13.000000  Resp_cpu: 105400
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 3.001375, sel = 0.020000
    Used T1_M_ID
      Cost = 3.001375, sel = 0.020000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 7.004090
          resc: 7.004090  resc_io: 7.000000  resc_cpu: 121100
          resp: 7.004090  resp_io: 7.000000  resc_cpu: 121100
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  10.000000 = outer (10.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 10 Computed: 10.000000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 6.001590  Resp: 6.001590  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001590 
     resc: 6.001590 resc_io: 4.000000 resc_cpu: 59260769
     resp: 6.001590 resp_io: 4.000000 resp_cpu: 59260769
SM Join (with index on outer)
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 2.000000  resc_cpu: 17943
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 2.000606  Resp: 2.000606  Degree: 1
  Outer table:  L  Alias: L
    resc: 2.000606  card 10.000000  bytes:   deg: 1  resp: 2.000606
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 4.001126  Resp: 4.001126  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020330  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021878  Resp: 4.021878  [multiMatchCost=0.000020]
HA Join
  HA cost: 4.021878  
     resc: 4.021878 resc_io: 4.000000 resc_cpu: 647729
     resp: 4.021878 resp_io: 4.000000 resp_cpu: 647729
Best:: JoinMethod: SortMerge
       Cost: 4.001126  Degree: 1  Resp: 4.001126  Card: 10.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 4.001126  Resp: 4.001126  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.033788 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.033788
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 73.871892  Resp: 73.871892  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 55420798
      Resp_io: 72.000000  Resp_cpu: 55420798
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 87.647486  Resp: 87.647486  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 48776870
      Resp_io: 86.000000  Resp_cpu: 48776870
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.004254  Resp: 14.004254  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 29732802
      Resp_io: 13.000000  Resp_cpu: 29732802
kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 5.5557e-12 
    NL Join : Cost: 14.003994  Resp: 14.003994  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 29725078
      Resp_io: 13.000000  Resp_cpu: 29725078
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.004254  Resp: 14.004254  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 29732802
      Resp_io: 13.000000  Resp_cpu: 29732802
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 14.003994
          resc: 14.003994  resc_io: 13.000000  resc_cpu: 29725078
          resp: 14.003994  resp_io: 13.000000  resc_cpu: 29725078
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.000556 = outer (10.000000) * inner (0.027778) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  0.027778, outer: 10.000000, inner: 0.027778, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  T1  Alias: T1
    resc: 4.001126  card 10.000000  bytes:   deg: 1  resp: 4.001126
  Inner table:  T2  Alias: T2
    resc: 2.000488  card: 0.027778  bytes:   deg: 1  resp: 2.000488
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 8.001665  Resp: 8.001665  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.001665 
     resc: 8.001665 resc_io: 5.000000 resc_cpu: 88869811
     resp: 8.001665 resp_io: 5.000000 resp_cpu: 88869811
  Outer table:  T1  Alias: T1
    resc: 4.001126  card 10.000000  bytes:   deg: 1  resp: 4.001126
  Inner table:  T2  Alias: T2
    resc: 2.000488  card: 0.027778  bytes:   deg: 1  resp: 2.000488
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.021934  Resp: 6.021934  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.021934  
     resc: 6.021934 resc_io: 5.000000 resc_cpu: 30256231
     resp: 6.021934 resp_io: 5.000000 resp_cpu: 30256231
Best:: JoinMethod: Hash
       Cost: 6.021934  Degree: 1  Resp: 6.021934  Card: 0.000556 Bytes: 
***********************
Best so far:  Table#: 0  cost: 2.000606  card: 10.000000  bytes: 60.000000
              Table#: 1  cost: 4.001126  card: 10.000000  bytes: 120.000000
              Table#: 2  cost: 6.021934  card: 0.000556  bytes: 22.000000
***********************
Join order[2]:  L[L]#0  T2[T2]#2  T1[T1]#1

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.024975 (cpu filter eval) (= 50.002502 (per row) * 10000.000000 (#rows))
                       =   2578061.024975
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 72.871785  Resp: 72.871785  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 25810796
      Resp_io: 72.000000  Resp_cpu: 25810796
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 86.647380  Resp: 86.647380  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 19166868
      Resp_io: 86.000000  Resp_cpu: 19166868
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004148  Resp: 13.004148  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122800
      Resp_io: 13.000000  Resp_cpu: 122800
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.7778e-10 
    NL Join : Cost: 13.003780  Resp: 13.003780  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 111900
      Resp_io: 13.000000  Resp_cpu: 111900
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004148  Resp: 13.004148  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122800
      Resp_io: 13.000000  Resp_cpu: 122800
  ****** trying bitmap/domain indexes ******

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.7778e-10 
    NL Join : Cost: 13.003780  Resp: 13.003780  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 111900
      Resp_io: 13.000000  Resp_cpu: 111900

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 33.076075  Resp: 33.076075  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 2252329
      Resp_io: 33.000000  Resp_cpu: 2252329
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_C1_C2_ID
      Cost = 13.003780, sel = 2.7778e-07
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 13.003780
          resc: 13.003780  resc_io: 13.000000  resc_cpu: 111900
          resp: 13.003780  resp_io: 13.000000  resc_cpu: 111900
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.027778 = outer (10.000000) * inner (0.027778) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.027778
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 2.000488  card: 0.027778  bytes:   deg: 1  resp: 2.000488
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 7.001558  Resp: 7.001558  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001558 
     resc: 7.001558 resc_io: 5.000000 resc_cpu: 59259809
     resp: 7.001558 resp_io: 5.000000 resp_cpu: 59259809
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 2.000488  card: 0.027778  bytes:   deg: 1  resp: 2.000488
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021827  Resp: 5.021827  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021827  
     resc: 5.021827 resc_io: 5.000000 resc_cpu: 646229
     resp: 5.021827 resp_io: 5.000000 resp_cpu: 646229
Best:: JoinMethod: Hash
       Cost: 5.021827  Degree: 1  Resp: 5.021827  Card: 0.027778 Bytes: 

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.027778  Cost: 5.021827  Resp: 5.021827  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 822.978415 (cpu filter eval) (= 82.297841 (per row) * 10.000000 (#rows))
                       =   31008.738415
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 8.022874  Resp: 8.022874  Degree: 1
      Cost_io: 8.000000  Cost_cpu: 677237
      Resp_io: 8.000000  Resp_cpu: 677237
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 9144
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.022136  Resp: 7.022136  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 655373
      Resp_io: 7.000000  Resp_cpu: 655373
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.004000 
    NL Join : Cost: 6.022343  Resp: 6.022343  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 661507
      Resp_io: 6.000000  Resp_cpu: 661507
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.021862  Resp: 5.021862  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 647279
      Resp_io: 5.000000  Resp_cpu: 647279

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.021862  Resp: 5.021862  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 647279
      Resp_io: 5.000000  Resp_cpu: 647279
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 6.022081  Resp: 6.022081  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 653750
      Resp_io: 6.000000  Resp_cpu: 653750
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Not used  bitmap node 
    Used  bitmap node 
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  Access path: Bitmap index - accepted
    Cost: 14.442524 Cost_io: 13.398006 Cost_cpu: 30924879.681888 Sel: 0.200000
    Not Believed to be index-only
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 6.022343
          resc: 6.022343  resc_io: 6.000000  resc_cpu: 661507
          resp: 6.022343  resp_io: 6.000000  resc_cpu: 661507
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.000556 = outer (0.027778) * inner (10.000000) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  0.027778, outer: 0.027778, inner: 10.000000, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  T2  Alias: T2
    resc: 5.021827  card 0.027778  bytes:   deg: 1  resp: 5.021827
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 8.022347  Resp: 8.022347  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.022347 
     resc: 8.022347 resc_io: 6.000000 resc_cpu: 59875315
     resp: 8.022347 resp_io: 6.000000 resp_cpu: 59875315
  Outer table:  T2  Alias: T2
    resc: 5.021827  card 0.027778  bytes:   deg: 1  resp: 5.021827
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020284  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.042619  Resp: 6.042619  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.042619  
     resc: 6.042619 resc_io: 6.000000 resc_cpu: 1261822
     resp: 6.042619 resp_io: 6.000000 resp_cpu: 1261822
Join order aborted: cost > best plan cost
***********************
Join order[3]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   1.500000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.500000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.500000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 7.004654  Resp: 7.004654  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 137786
      Resp_io: 7.000000  Resp_cpu: 137786
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001635
          resc: 5.001635  resc_io: 5.000000  resc_cpu: 48409
          resp: 5.001635  resp_io: 5.000000  resc_cpu: 48409
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  10.000000 = outer (10.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 10 Computed: 10.000000
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001590  Resp: 6.001590  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001590 
     resc: 6.001590 resc_io: 4.000000 resc_cpu: 59260769
     resp: 6.001590 resp_io: 4.000000 resp_cpu: 59260769
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021847  Resp: 4.021847  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021847  
     resc: 4.021847 resc_io: 4.000000 resc_cpu: 646829
     resp: 4.021847 resp_io: 4.000000 resp_cpu: 646829
Best:: JoinMethod: Hash
       Cost: 4.021847  Degree: 1  Resp: 4.021847  Card: 10.000000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 4.021847  Resp: 4.021847  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.033788 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.033788
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 73.892613  Resp: 73.892613  Degree: 1
      Cost_io: 73.000000  Cost_cpu: 26427439
      Resp_io: 73.000000  Resp_cpu: 26427439
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 87.668207  Resp: 87.668207  Degree: 1
      Cost_io: 87.000000  Cost_cpu: 19783511
      Resp_io: 87.000000  Resp_cpu: 19783511
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.024975  Resp: 14.024975  Degree: 1
      Cost_io: 14.000000  Cost_cpu: 739443
      Resp_io: 14.000000  Resp_cpu: 739443
kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 5.5557e-12 
    NL Join : Cost: 14.024715  Resp: 14.024715  Degree: 1
      Cost_io: 14.000000  Cost_cpu: 731719
      Resp_io: 14.000000  Resp_cpu: 731719
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 14.024975  Resp: 14.024975  Degree: 1
      Cost_io: 14.000000  Cost_cpu: 739443
      Resp_io: 14.000000  Resp_cpu: 739443
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 14.024715
          resc: 14.024715  resc_io: 14.000000  resc_cpu: 731719
          resp: 14.024715  resp_io: 14.000000  resc_cpu: 731719
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.000556 = outer (10.000000) * inner (0.027778) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  0.027778, outer: 10.000000, inner: 0.027778, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  L  Alias: L
    resc: 4.021847  card 10.000000  bytes:   deg: 1  resp: 4.021847
  Inner table:  T2  Alias: T2
    resc: 2.000488  card: 0.027778  bytes:   deg: 1  resp: 2.000488
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 8.022386  Resp: 8.022386  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.022386 
     resc: 8.022386 resc_io: 6.000000 resc_cpu: 59876451
     resp: 8.022386 resp_io: 6.000000 resp_cpu: 59876451
  Outer table:  L  Alias: L
    resc: 4.021847  card 10.000000  bytes:   deg: 1  resp: 4.021847
  Inner table:  T2  Alias: T2
    resc: 2.000488  card: 0.027778  bytes:   deg: 1  resp: 2.000488
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.042655  Resp: 6.042655  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.042655  
     resc: 6.042655 resc_io: 6.000000 resc_cpu: 1262872
     resp: 6.042655 resp_io: 6.000000 resp_cpu: 1262872
Join order aborted: cost > best plan cost
***********************
Join order[4]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.250000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2049  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
  Total Scan IO  Cost  =   7.250000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.250000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500033.821619 (cpu filter eval) (= 50.003382 (per row) * 10000.000000 (#rows))
                       =   2578069.821619
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 30.348815  Resp: 30.348815  Degree: 1
      Cost_io: 30.000000  Cost_cpu: 10327322
      Resp_io: 30.000000  Resp_cpu: 10327322
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.500000  resc_cpu: 1913677
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 35.259053  Resp: 35.259053  Degree: 1
      Cost_io: 35.000000  Cost_cpu: 7669751
      Resp_io: 35.000000  Resp_cpu: 7669751
kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-06  ix_sel_with_filters: 5.5557e-08 
    NL Join : Cost: 5.001655  Resp: 5.001655  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48999
      Resp_io: 5.000000  Resp_cpu: 48999
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001655
          resc: 5.001655  resc_io: 5.000000  resc_cpu: 48999
          resp: 5.001655  resp_io: 5.000000  resc_cpu: 48999
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.005556 = outer (10.000000) * inner (0.027778) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  0.277778, outer: 10.000000, inner: 0.027778, sel: 0.020001
Join Card - Rounded: 1 Computed: 0.005556
Best:: JoinMethod: NestedLoop
       Cost: 5.001655  Degree: 1  Resp: 5.001655  Card: 0.005556 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.005556  Cost: 5.001655  Resp: 5.001655  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 8.002691  Resp: 8.002691  Degree: 1
      Cost_io: 8.000000  Cost_cpu: 79685
      Resp_io: 8.000000  Resp_cpu: 79685
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 6.001938  Resp: 6.001938  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 57390
      Resp_io: 6.000000  Resp_cpu: 57390
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 6.001938  Resp: 6.001938  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 57390
      Resp_io: 6.000000  Resp_cpu: 57390
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 6.001938
          resc: 6.001938  resc_io: 6.000000  resc_cpu: 57390
          resp: 6.001938  resp_io: 6.000000  resc_cpu: 57390
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000556 = outer (0.005556) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  T2  Alias: T2
    resc: 5.001655  card 0.005556  bytes:   deg: 1  resp: 5.001655
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 10.002725  Resp: 10.002725  [multiMatchCost=0.000000]
SM Join
  SM cost: 10.002725 
     resc: 10.002725 resc_io: 8.000000 resc_cpu: 59294365
     resp: 10.002725 resp_io: 8.000000 resp_cpu: 59294365
  Outer table:  T2  Alias: T2
    resc: 5.001655  card 0.005556  bytes:   deg: 1  resp: 5.001655
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 8.022979  Resp: 8.022979  [multiMatchCost=0.000000]
HA Join
  HA cost: 8.022979  
     resc: 8.022979 resc_io: 8.000000 resc_cpu: 680335
     resp: 8.022979 resp_io: 8.000000 resp_cpu: 680335
Plan cardinality mismatch: best card= 0.00055557068   curr card= 0.00055557068
Best:: JoinMethod: NestedLoop
       Cost: 6.001938  Degree: 1  Resp: 6.001938  Card: 0.000556 Bytes: 
***********************
Best so far:  Table#: 1  cost: 1.000508  card: 4.000000  bytes: 24.000000
              Table#: 2  cost: 5.001655  card: 0.005556  bytes: 16.000000
              Table#: 0  cost: 6.001938  card: 0.000556  bytes: 22.000000
***********************
Join order[5]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000488  Resp: 2.000488  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001524  Resp: 5.001524  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45129
      Resp_io: 5.000000  Resp_cpu: 45129
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001524
          resc: 5.001524  resc_io: 5.000000  resc_cpu: 45129
          resp: 5.001524  resp_io: 5.000000  resc_cpu: 45129
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.027778 = outer (0.027778) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.027778
  Outer table:  T2  Alias: T2
    resc: 2.000488  card 0.027778  bytes:   deg: 1  resp: 2.000488
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001558  Resp: 7.001558  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001558 
     resc: 7.001558 resc_io: 5.000000 resc_cpu: 59259809
     resp: 7.001558 resp_io: 5.000000 resp_cpu: 59259809
  Outer table:  T2  Alias: T2
    resc: 2.000488  card 0.027778  bytes:   deg: 1  resp: 2.000488
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021812  Resp: 5.021812  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021812  
     resc: 5.021812 resc_io: 5.000000 resc_cpu: 645779
     resp: 5.021812 resp_io: 5.000000 resp_cpu: 645779
Best:: JoinMethod: Hash
       Cost: 5.021812  Degree: 1  Resp: 5.021812  Card: 0.027778 Bytes: 

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.027778  Cost: 5.021812  Resp: 5.021812  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2080  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 822.978415 (cpu filter eval) (= 82.297841 (per row) * 10.000000 (#rows))
                       =   31008.738415
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 8.022859  Resp: 8.022859  Degree: 1
      Cost_io: 8.000000  Cost_cpu: 676787
      Resp_io: 8.000000  Resp_cpu: 676787
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 9144
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.022121  Resp: 7.022121  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 654923
      Resp_io: 7.000000  Resp_cpu: 654923
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.200000
  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 14643
    ix_sel: 0.200000  ix_sel_with_filters: 0.004000 
    NL Join : Cost: 6.022328  Resp: 6.022328  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 661057
      Resp_io: 6.000000  Resp_cpu: 661057
  ****** trying bitmap/domain indexes ******

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.021847  Resp: 5.021847  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 646829
      Resp_io: 5.000000  Resp_cpu: 646829

  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.021847  Resp: 5.021847  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 646829
      Resp_io: 5.000000  Resp_cpu: 646829
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 6.022066  Resp: 6.022066  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 653300
      Resp_io: 6.000000  Resp_cpu: 653300
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Not used  bitmap node 
    Used  bitmap node 
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  Access path: Bitmap index - accepted
    Cost: 14.442494 Cost_io: 13.398006 Cost_cpu: 30923979.681888 Sel: 0.200000
    Not Believed to be index-only
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 6.022328
          resc: 6.022328  resc_io: 6.000000  resc_cpu: 661057
          resp: 6.022328  resp_io: 6.000000  resc_cpu: 661057
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.000556 = outer (0.027778) * inner (10.000000) * sel (0.002000)
Join cardinality for HJ/SMJ (no post filters):  0.027778, outer: 0.027778, inner: 10.000000, sel: 0.002000
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  L  Alias: L
    resc: 5.021812  card 0.027778  bytes:   deg: 1  resp: 5.021812
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
  SM join: Resc: 8.022332  Resp: 8.022332  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.022332 
     resc: 8.022332 resc_io: 6.000000 resc_cpu: 59874865
     resp: 8.022332 resp_io: 6.000000 resp_cpu: 59874865
  Outer table:  L  Alias: L
    resc: 5.021812  card 0.027778  bytes:   deg: 1  resp: 5.021812
  Inner table:  T1  Alias: T1
    resc: 1.000508  card: 4.000000  bytes:   deg: 1  resp: 1.000508
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020284  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.042604  Resp: 6.042604  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.042604  
     resc: 6.042604 resc_io: 6.000000 resc_cpu: 1261372
     resp: 6.042604 resp_io: 6.000000 resp_cpu: 1261372
Plan cardinality mismatch: best card= 0.00055557068   curr card= 0.00055557068
Join order aborted: cost > best plan cost
***********************
Join order[6]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000488  Resp: 2.000488  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 3229.784148 (cpu filter eval) (= 322.978415 (per row) * 10.000000 (#rows))
                       =   33415.544148
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001616  Resp: 5.001616  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 47858
      Resp_io: 5.000000  Resp_cpu: 47858
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 11551
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000878  Resp: 4.000878  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 25994
      Resp_io: 4.000000  Resp_cpu: 25994
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 3.001039  Resp: 3.001039  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 30756
      Resp_io: 3.000000  Resp_cpu: 30756
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 3.000742  Resp: 3.000742  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 21964
      Resp_io: 3.000000  Resp_cpu: 21964
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 3.000742  Resp: 3.000742  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 21964
      Resp_io: 3.000000  Resp_cpu: 21964
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 4.000757, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.001039
          resc: 3.001039  resc_io: 3.000000  resc_cpu: 30756
          resp: 3.001039  resp_io: 3.000000  resc_cpu: 30756
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.005556 = outer (0.027778) * inner (10.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  0.277778, outer: 0.027778, inner: 10.000000, sel: 0.020001
Join Card - Rounded: 1 Computed: 0.005556
Best:: JoinMethod: NestedLoop
       Cost: 3.001039  Degree: 1  Resp: 3.001039  Card: 0.005556 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.005556  Cost: 3.001039  Resp: 3.001039  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2048  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.002075  Resp: 6.002075  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 61442
      Resp_io: 6.000000  Resp_cpu: 61442
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001322  Resp: 4.001322  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 39148
      Resp_io: 4.000000  Resp_cpu: 39148
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001322  Resp: 4.001322  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 39148
      Resp_io: 4.000000  Resp_cpu: 39148
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001322
          resc: 4.001322  resc_io: 4.000000  resc_cpu: 39148
          resp: 4.001322  resp_io: 4.000000  resc_cpu: 39148
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000556 = outer (0.005556) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  T1  Alias: T1
    resc: 3.001039  card 0.005556  bytes:   deg: 1  resp: 3.001039
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.002109  Resp: 8.002109  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.002109 
     resc: 8.002109 resc_io: 6.000000 resc_cpu: 59276122
     resp: 8.002109 resp_io: 6.000000 resp_cpu: 59276122
  Outer table:  T1  Alias: T1
    resc: 3.001039  card 0.005556  bytes:   deg: 1  resp: 3.001039
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022363  Resp: 6.022363  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022363  
     resc: 6.022363 resc_io: 6.000000 resc_cpu: 662092
     resp: 6.022363 resp_io: 6.000000 resp_cpu: 662092
Best:: JoinMethod: NestedLoop
       Cost: 4.001322  Degree: 1  Resp: 4.001322  Card: 0.000556 Bytes: 
***********************
Best so far:  Table#: 2  cost: 2.000488  card: 0.027778  bytes: 10.000000
              Table#: 1  cost: 3.001039  card: 0.005556  bytes: 16.000000
              Table#: 0  cost: 4.001322  card: 0.000556  bytes: 22.000000
***********************
Permutations for Starting Table :1
Join order[7]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000488  Resp: 2.000488  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001524  Resp: 5.001524  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45129
      Resp_io: 5.000000  Resp_cpu: 45129
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001524
          resc: 5.001524  resc_io: 5.000000  resc_cpu: 45129
          resp: 5.001524  resp_io: 5.000000  resc_cpu: 45129
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.027778 = outer (0.027778) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.027778
  Outer table:  T2  Alias: T2
    resc: 2.000488  card 0.027778  bytes:   deg: 1  resp: 2.000488
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001558  Resp: 7.001558  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001558 
     resc: 7.001558 resc_io: 5.000000 resc_cpu: 59259809
     resp: 7.001558 resp_io: 5.000000 resp_cpu: 59259809
  Outer table:  T2  Alias: T2
    resc: 2.000488  card 0.027778  bytes:   deg: 1  resp: 2.000488
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021812  Resp: 5.021812  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021812  
     resc: 5.021812 resc_io: 5.000000 resc_cpu: 645779
     resp: 5.021812 resp_io: 5.000000 resp_cpu: 645779
Join order aborted: cost > best plan cost
***********************
Join order[8]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000488  Resp: 2.000488  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 3229.784148 (cpu filter eval) (= 322.978415 (per row) * 10.000000 (#rows))
                       =   33415.544148
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001616  Resp: 5.001616  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 47858
      Resp_io: 5.000000  Resp_cpu: 47858
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 11551
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000878  Resp: 4.000878  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 25994
      Resp_io: 4.000000  Resp_cpu: 25994
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 3.001039  Resp: 3.001039  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 30756
      Resp_io: 3.000000  Resp_cpu: 30756
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 3.000742  Resp: 3.000742  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 21964
      Resp_io: 3.000000  Resp_cpu: 21964
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 3.000742  Resp: 3.000742  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 21964
      Resp_io: 3.000000  Resp_cpu: 21964
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 4.000757, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.001039
          resc: 3.001039  resc_io: 3.000000  resc_cpu: 30756
          resp: 3.001039  resp_io: 3.000000  resc_cpu: 30756
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.005556 = outer (0.027778) * inner (10.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  0.277778, outer: 0.027778, inner: 10.000000, sel: 0.020001
Join Card - Rounded: 1 Computed: 0.005556
Best:: JoinMethod: NestedLoop
       Cost: 3.001039  Degree: 1  Resp: 3.001039  Card: 0.005556 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.005556  Cost: 3.001039  Resp: 3.001039  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.002075  Resp: 6.002075  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 61442
      Resp_io: 6.000000  Resp_cpu: 61442
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001322  Resp: 4.001322  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 39148
      Resp_io: 4.000000  Resp_cpu: 39148
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001322  Resp: 4.001322  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 39148
      Resp_io: 4.000000  Resp_cpu: 39148
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001322
          resc: 4.001322  resc_io: 4.000000  resc_cpu: 39148
          resp: 4.001322  resp_io: 4.000000  resc_cpu: 39148
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000556 = outer (0.005556) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  T1  Alias: T1
    resc: 3.001039  card 0.005556  bytes:   deg: 1  resp: 3.001039
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.002109  Resp: 8.002109  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.002109 
     resc: 8.002109 resc_io: 6.000000 resc_cpu: 59276122
     resp: 8.002109 resp_io: 6.000000 resp_cpu: 59276122
  Outer table:  T1  Alias: T1
    resc: 3.001039  card 0.005556  bytes:   deg: 1  resp: 3.001039
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022363  Resp: 6.022363  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022363  
     resc: 6.022363 resc_io: 6.000000 resc_cpu: 662092
     resp: 6.022363 resp_io: 6.000000 resp_cpu: 662092
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :2
Join order[9]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   1.500000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.500000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.500000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 7.004654  Resp: 7.004654  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 137786
      Resp_io: 7.000000  Resp_cpu: 137786
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.001635  Resp: 5.001635  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48409
      Resp_io: 5.000000  Resp_cpu: 48409
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001635
          resc: 5.001635  resc_io: 5.000000  resc_cpu: 48409
          resp: 5.001635  resp_io: 5.000000  resc_cpu: 48409
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  10.000000 = outer (10.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 10 Computed: 10.000000
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              4
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29607202
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001590  Resp: 6.001590  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001590 
     resc: 6.001590 resc_io: 4.000000 resc_cpu: 59260769
     resp: 6.001590 resp_io: 4.000000 resp_cpu: 59260769
  Outer table:  T1  Alias: T1
    resc: 1.000508  card 4.000000  bytes:   deg: 1  resp: 1.000508
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021847  Resp: 4.021847  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021847  
     resc: 4.021847 resc_io: 4.000000 resc_cpu: 646829
     resp: 4.021847 resp_io: 4.000000 resp_cpu: 646829
Join order aborted: cost > best plan cost
***********************
Join order[10]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 4.000000  Cost: 1.000508  Resp: 1.000508  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   7.250000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2065  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2048  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
  Total Scan IO  Cost  =   7.250000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   7.250000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500033.821619 (cpu filter eval) (= 50.003382 (per row) * 10000.000000 (#rows))
                       =   2578069.821619
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 30.348815  Resp: 30.348815  Degree: 1
      Cost_io: 30.000000  Cost_cpu: 10327322
      Resp_io: 30.000000  Resp_cpu: 10327322
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.500000  resc_cpu: 1913677
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 35.259053  Resp: 35.259053  Degree: 1
      Cost_io: 35.000000  Cost_cpu: 7669751
      Resp_io: 35.000000  Resp_cpu: 7669751
kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-06  ix_sel_with_filters: 5.5557e-08 
    NL Join : Cost: 5.001655  Resp: 5.001655  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 48999
      Resp_io: 5.000000  Resp_cpu: 48999
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001655
          resc: 5.001655  resc_io: 5.000000  resc_cpu: 48999
          resp: 5.001655  resp_io: 5.000000  resc_cpu: 48999
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.005556 = outer (10.000000) * inner (0.027778) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  0.277778, outer: 10.000000, inner: 0.027778, sel: 0.020001
Join Card - Rounded: 1 Computed: 0.005556
Join order aborted: cost > best plan cost
***********************
Join order[11]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000488  Resp: 2.000488  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001524  Resp: 5.001524  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45129
      Resp_io: 5.000000  Resp_cpu: 45129
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001524
          resc: 5.001524  resc_io: 5.000000  resc_cpu: 45129
          resp: 5.001524  resp_io: 5.000000  resc_cpu: 45129
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.027778 = outer (0.027778) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.027778
  Outer table:  T2  Alias: T2
    resc: 2.000488  card 0.027778  bytes:   deg: 1  resp: 2.000488
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001558  Resp: 7.001558  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001558 
     resc: 7.001558 resc_io: 5.000000 resc_cpu: 59259809
     resp: 7.001558 resp_io: 5.000000 resp_cpu: 59259809
  Outer table:  T2  Alias: T2
    resc: 2.000488  card 0.027778  bytes:   deg: 1  resp: 2.000488
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021812  Resp: 5.021812  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021812  
     resc: 5.021812 resc_io: 5.000000 resc_cpu: 645779
     resp: 5.021812 resp_io: 5.000000 resp_cpu: 645779
Join order aborted: cost > best plan cost
***********************
Join order[12]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.027778  Cost: 2.000488  Resp: 2.000488  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2048  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 317.578268, sel = 0.020001 flag = 2080  (OR chain)
      io = 0.000000, cpu = 160.777778, sel = 0.020000 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
        io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
      io = 0.000000, cpu = 160.000500, sel = 0.000001 flag = 0  (AND chain)
        io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
        io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
        io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 3229.784148 (cpu filter eval) (= 322.978415 (per row) * 10.000000 (#rows))
                       =   33415.544148
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001616  Resp: 5.001616  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 47858
      Resp_io: 5.000000  Resp_cpu: 47858
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 11551
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000878  Resp: 4.000878  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 25994
      Resp_io: 4.000000  Resp_cpu: 25994
kkofmx: index filter: ?? 

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 15043
    ix_sel: 0.400000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 3.001039  Resp: 3.001039  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 30756
      Resp_io: 3.000000  Resp_cpu: 30756
  ****** trying bitmap/domain indexes ******
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 3.000742  Resp: 3.000742  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 21964
      Resp_io: 3.000000  Resp_cpu: 21964
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Estimated selectivity: 0.200000 , col: #2 
 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.200000 
    NL Join : Cost: 3.000742  Resp: 3.000742  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 21964
      Resp_io: 3.000000  Resp_cpu: 21964
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              2
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606932
      Total Temp space used: 0
  Bitmap nodes:
    Not used T1_M_ID
      Cost = 4.000757, sel = 0.200000
    Used T1_M_ID
      Cost = 0.000000, sel = 0.000000
  Bitmap nodes:
    Used  bitmap node 
    Not used  bitmap node 
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.001039
          resc: 3.001039  resc_io: 3.000000  resc_cpu: 30756
          resp: 3.001039  resp_io: 3.000000  resc_cpu: 30756
  Estimated selectivity: 0.200000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 

  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.005556 = outer (0.027778) * inner (10.000000) * sel (0.020001)
Join cardinality for HJ/SMJ (no post filters):  0.277778, outer: 0.027778, inner: 10.000000, sel: 0.020001
Join Card - Rounded: 1 Computed: 0.005556
Best:: JoinMethod: NestedLoop
       Cost: 3.001039  Degree: 1  Resp: 3.001039  Card: 0.005556 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.005556  Cost: 3.001039  Resp: 3.001039  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.000999 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.499500 (cpu filter eval) (= 50.049950 (per row) * 10.000000 (#rows))
                       =   30686.259500
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.002075  Resp: 6.002075  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 61442
      Resp_io: 6.000000  Resp_cpu: 61442
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001322  Resp: 4.001322  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 39148
      Resp_io: 4.000000  Resp_cpu: 39148
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001322  Resp: 4.001322  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 39148
      Resp_io: 4.000000  Resp_cpu: 39148
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001322
          resc: 4.001322  resc_io: 4.000000  resc_cpu: 39148
          resp: 4.001322  resp_io: 4.000000  resc_cpu: 39148
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000556 = outer (0.005556) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000556
  Outer table:  T1  Alias: T1
    resc: 3.001039  card 0.005556  bytes:   deg: 1  resp: 3.001039
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.002109  Resp: 8.002109  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.002109 
     resc: 8.002109 resc_io: 6.000000 resc_cpu: 59276122
     resp: 8.002109 resp_io: 6.000000 resp_cpu: 59276122
  Outer table:  T1  Alias: T1
    resc: 3.001039  card 0.005556  bytes:   deg: 1  resp: 3.001039
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022363  Resp: 6.022363  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022363  
     resc: 6.022363 resc_io: 6.000000 resc_cpu: 662092
     resp: 6.022363 resp_io: 6.000000 resp_cpu: 662092
Join order aborted: cost > best plan cost
***********************
(newjo-stop-1) k:2, spcnt:2, perm:12, maxperm:120

*********************************
Number of join permutations tried: 12
*********************************
Enumerating distribution method (advanced)
--- Distribution method for 
join between T2[T2](serial) and T1[T1](serial); jm = 14; right side access path = IndexRange
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL
--- Distribution method for 
join between T1[T1](serial) and L[L](serial); jm = 14; right side access path = IndexUnique
kkopqIsSerialJoin: serial NLJ: both inputs serial
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL

Transfer Optimizer annotations for query block SEL$1_1 (#0)
AP: Checking validity for query block SEL$1_1, sqlid=2zdcf8df6cnzj
AP: Adaptive joins bypassed for query block SEL$1_1 due to OR expansion
AutoDOP: Consider caching for T2[T2](obj#-1) 
cost:2.000488 blkSize:8192 objSize:25.00 marObjSize:23.75 bufSize:135102.00 affPercent:80 smallTab:YES affinitized:NO
kkecComputeAPDop: IO Dop: 0.000000 - CPU Dop: 0.000000
Replication not feasible for first input in join order
id=0 frofkks[i] (index start key) predicate="T2"."C1"=103
id=0 frofkks[i] (index start key) predicate="T2"."C2"=13
id=0 frofkke[i] (index stop key) predicate="T2"."C1"=103
id=0 frofkke[i] (index stop key) predicate="T2"."C2"=13
Transfer optimizer annotations for T2[T2]
AutoDOP: Consider caching for T1[T1](obj#-1) 
cost:3.001039 blkSize:8192 objSize:4.00 marObjSize:3.80 bufSize:135102.00 affPercent:80 smallTab:YES affinitized:NO
kkecComputeAPDop: IO Dop: 0.000000 - CPU Dop: 0.000000
Replication not feasible based on distribution
id=0 frofkks[i] (index start key) predicate="T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)
id=0 frofkke[i] (index stop key) predicate="T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)
id=0 froiand (index only filter) predicate="T1"."M"=TO_NUMBER(:B1) AND "T2"."C1">=11 AND "T2"."C1"<=12 OR "T1"."M"=TO_NUMBER(:B2) AND "T2"."C1"=103 AND "T2"."C2"=13
Transfer optimizer annotations for T1[T1]
AutoDOP: Consider caching for L[L](obj#73644) 
cost:4.001322 blkSize:8192 objSize:4.00 marObjSize:3.80 bufSize:135102.00 affPercent:80 smallTab:YES affinitized:NO
kkecComputeAPDop: IO Dop: 0.000000 - CPU Dop: 0.000000
Replication not feasible based on distribution
id=0 frofkks[i] (index start key) predicate="L"."ID"="T1"."ID"
id=0 frofkke[i] (index stop key) predicate="L"."ID"="T1"."ID"
id=0 frofand predicate="L"."ID2"="T2"."ID"
Transfer optimizer annotations for L[L]
Final cost for query block SEL$1_1 (#0) - All Rows Plan:
  Best join order: 6
  Cost: 4.001322  Degree: 1  Card: 1.000000  Bytes: 22.000000
  Resc: 4.001322  Resc_io: 4.000000  Resc_cpu: 39148
  Resp: 4.001322  Resp_io: 4.000000  Resc_cpu: 39148
Registered qb: SEL$1_2 0x657ca0e8 (OR EXPANSION SEL$1)
---------------------
QUERY BLOCK SIGNATURE
---------------------
  signature (): qb_name=SEL$1_2 nbfros=3 flg=0
    fro(0): flg=4 objn=73644 hint_alias="L"@"SEL$1_2"
    fro(1): flg=4 objn=73646 hint_alias="T1"@"SEL$1_2"
    fro(2): flg=4 objn=73648 hint_alias="T2"@"SEL$1_2"

LORE: Predicate chain for or-expanded branch SEL$1_2 is:
id=0  predicate="T1"."M"=TO_NUMBER(:B1) AND "T2"."C1"=103 AND "T2"."C2"=13 AND (LNNVL("T2"."C1"=103) OR LNNVL("T2"."C2"=13)) AND "T2"."C1">=11 AND "T2"."C1"<=12 AND ("T1"."M"=TO_NUMBER(:B2) OR "T1"."M"=TO_NUMBER(:B3)) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
****************
QUERY BLOCK TEXT
****************
SELECT /*+ OPT_PARAM('_optimizer_cbqt_or_expansion' 'off') */ null FROM l, t1, t2 WHERE  
(  ( t1.m = :v1 AND t2.c1 BETWEEN 11 AND 12)       OR 
   ( t1.m = :v2 AND t2.c1 = 103 AND t2.c2 = 13  )   )  AND 
    ( l.id = t1.id AND l.id2 = t2.id )
---------------------
QUERY BLOCK SIGNATURE
---------------------
signature (optimizer): qb_name=SEL$1_2 nbfros=3 flg=0
  fro(0): flg=0 objn=73644 hint_alias="L"@"SEL$1_2"
  fro(1): flg=0 objn=73646 hint_alias="T1"@"SEL$1_2"
  fro(2): flg=0 objn=73648 hint_alias="T2"@"SEL$1_2"

-----------------------------
SYSTEM STATISTICS INFORMATION
-----------------------------
Using dictionary system stats.
  Using NOWORKLOAD Stats
  CPUSPEEDNW: 2467 millions instructions/sec (default is 100)
  IOTFRSPEED: 4096 bytes per millisecond (default is 4096)
  IOSEEKTIM:  10 milliseconds (default is 10)
  MBRC:       NO VALUE blocks (default is 8)

***************************************
BASE STATISTICAL INFORMATION
***********************
Table Stats::
  Table: T2  Alias: T2
  #Rows: 10000  SSZ: 0  LGR: 0  #Blks:  25  AvgRowLen:  10.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): C1(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#3): C2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#1): ID(NUMBER)
    AvgLen: 4 NDV: 10000 Nulls: 0 Density: 0.000100 Min: 1.000000 Max: 10000.000000
Index Stats::
  Index: T2_C1_C2_ID  Col#: 2 3 1
  LVLS: 1  #LB: 30  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 210.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
  Index: T2_ID  Col#: 1
  LVLS: 1  #LB: 20  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 21.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table: T1  Alias: T1
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): M(NUMBER)
    AvgLen: 3 NDV: 5 Nulls: 0 Density: 0.200000 Min: 0.000000 Max: 4.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: T1_M_ID  Col#: 2 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table:  L  Alias:  L
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
  Column (#2): ID2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: L_ID  Col#: 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
=======================================
SPD: BEGIN context at query block level
=======================================
Query Block SEL$1_2 (#0)
Return code in qosdSetupDirCtx4QB: NOCTX
=====================================
SPD: END context at query block level
=====================================
Access path analysis for L
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for L[L] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Table: L  Alias: L
    Card: Original: 10.000000  Rounded: 10  Computed: 10.000000  Non Adjusted: 10.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                       =   30185.760000
  Access Path: TableScan
    Cost:  3.001020  Resp: 3.001020  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 30186
      Resp_io: 3.000000  Resp_cpu: 30186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: TableScan
         Cost: 3.001020  Degree: 1  Resp: 3.001020  Card: 10.000000  Bytes: 0.000000

Access path analysis for T1
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T1[T1] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE


 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1)
  Estimated selectivity: 0.200000 , col: #2 

 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)
  Estimated selectivity: 0.200000 , col: #2 
  Table: T1  Alias: T1
    Card: Original: 10.000000  Rounded: 1  Computed: 0.800000  Non Adjusted: 0.800000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Access Path: TableScan
    Cost:  3.001088  Resp: 3.001088  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 32226
      Resp_io: 3.000000  Resp_cpu: 32226
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  2.000350  Resp: 2.000350  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 10361
      Resp_io: 2.000000  Resp_cpu: 10361
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    Cost: 1.000272  Resp: 1.000272  Degree: 1
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T1_M_ID
         Cost: 1.000272  Degree: 1  Resp: 1.000272  Card: 0.800000  Bytes: 0.000000

Access path analysis for T2
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T2[T2] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Estimated selectivity: 0.100000 , col: #2 
  Estimated selectivity: 0.100000 , col: #3 


 kkecdn: Single Table Predicate:"T2"."C1"=103
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C2"=13
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate: ?? 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1">=11
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1"<=12
  Estimated selectivity: 1.000000 , col: #2 
  Table: T2  Alias: T2
    Card: Original: 10000.000000  Rounded: 1  Computed: 0.000000  Non Adjusted: 0.000000
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2081  ("T2"."C1">=11)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2080  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500026.604943 (cpu filter eval) (= 50.002660 (per row) * 10000.000000 (#rows))
                       =   2578062.604943
  Access Path: TableScan
    Cost:  9.087077  Resp: 9.087077  Degree: 0
      Cost_io: 9.000000  Cost_cpu: 2578063
      Resp_io: 9.000000  Resp_cpu: 2578063
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913670
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  10.064636  Resp: 10.064636  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 1913670
      Resp_io: 10.000000  Resp_cpu: 1913670
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 2.000000  resc_cpu: 14443
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.1605e-07 
    Cost: 2.000490  Resp: 2.000490  Degree: 1
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T2_C1_C2_ID
         Cost: 2.000490  Degree: 1  Resp: 2.000490  Card: 0.000000  Bytes: 0.000000

(newjo-restore) [2 1 0 ]
***************************************


OPTIMIZER STATISTICS AND COMPUTATIONS
PJE:  Bypassed; QB is OR expanded SEL$1_2 (#0)
***************************************
GENERAL PLANS
***************************************
Considering cardinality-based initial join order.
Permutations for Starting Table :0
Join order[1]:  L[L]#0  T1[T1]#1  T2[T2]#2

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 704.000000 (cpu filter eval) (= 70.400000 (per row) * 10.000000 (#rows))
                       =   30889.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 15.011453  Resp: 15.011453  Degree: 1
      Cost_io: 15.000000  Cost_cpu: 339083
      Resp_io: 15.000000  Resp_cpu: 339083
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9025
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.004068  Resp: 7.004068  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 120440
      Resp_io: 7.000000  Resp_cpu: 120440
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 3.001465  Resp: 3.001465  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 43386
      Resp_io: 3.000000  Resp_cpu: 43386
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.001465
          resc: 3.001465  resc_io: 3.000000  resc_cpu: 43386
          resp: 3.001465  resp_io: 3.000000  resc_cpu: 43386
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.800000 = outer (10.000000) * inner (0.800000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.800000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
SM Join (with index on outer)
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 2.000000  resc_cpu: 17943
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 2.000606  Resp: 2.000606  Degree: 1
  Outer table:  L  Alias: L
    resc: 2.000606  card 10.000000  bytes:   deg: 1  resp: 2.000606
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 4.000878  Resp: 4.000878  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021611  Resp: 4.021611  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021611  
     resc: 4.021611 resc_io: 4.000000 resc_cpu: 639847
     resp: 4.021611 resp_io: 4.000000 resp_cpu: 639847
Best:: JoinMethod: NestedLoop
       Cost: 3.001465  Degree: 1  Resp: 3.001465  Card: 0.800000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 3.001465  Resp: 3.001465  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2080  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2081  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.026605 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.026605
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 12.088542  Resp: 12.088542  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 2621447
      Resp_io: 12.000000  Resp_cpu: 2621447
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 13.066101  Resp: 13.066101  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 1957054
      Resp_io: 13.000000  Resp_cpu: 1957054
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001778  Resp: 4.001778  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 52647
      Resp_io: 4.000000  Resp_cpu: 52647
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.1605e-11 
    NL Join : Cost: 4.001743  Resp: 4.001743  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 51615
      Resp_io: 4.000000  Resp_cpu: 51615
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001778  Resp: 4.001778  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 52647
      Resp_io: 4.000000  Resp_cpu: 52647
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001743
          resc: 4.001743  resc_io: 4.000000  resc_cpu: 51615
          resp: 4.001743  resp_io: 4.000000  resc_cpu: 51615
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.800000) * inner (0.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T1  Alias: T1
    resc: 3.001465  card 0.800000  bytes:   deg: 1  resp: 3.001465
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 7.001955  Resp: 7.001955  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001955 
     resc: 7.001955 resc_io: 5.000000 resc_cpu: 59271570
     resp: 7.001955 resp_io: 5.000000 resp_cpu: 59271570
  Outer table:  T1  Alias: T1
    resc: 3.001465  card 0.800000  bytes:   deg: 1  resp: 3.001465
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020274  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.022229  Resp: 5.022229  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.022229  
     resc: 5.022229 resc_io: 5.000000 resc_cpu: 658136
     resp: 5.022229 resp_io: 5.000000 resp_cpu: 658136
Best:: JoinMethod: NestedLoop
       Cost: 4.001743  Degree: 1  Resp: 4.001743  Card: 0.000000 Bytes: 
***********************
Best so far:  Table#: 0  cost: 3.001020  card: 10.000000  bytes: 60.000000
              Table#: 1  cost: 3.001465  card: 0.800000  bytes: 12.000000
              Table#: 2  cost: 4.001743  card: 0.000000  bytes: 22.000000
***********************
Join order[2]:  L[L]#0  T2[T2]#2  T1[T1]#1

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.026605 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.026605
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 72.871785  Resp: 72.871785  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 25810796
      Resp_io: 72.000000  Resp_cpu: 25810796
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 86.647380  Resp: 86.647380  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 19166868
      Resp_io: 86.000000  Resp_cpu: 19166868
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004148  Resp: 13.004148  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122800
      Resp_io: 13.000000  Resp_cpu: 122800
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.1605e-11 
    NL Join : Cost: 13.003799  Resp: 13.003799  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 112478
      Resp_io: 13.000000  Resp_cpu: 112478
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004148  Resp: 13.004148  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122800
      Resp_io: 13.000000  Resp_cpu: 122800
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 13.003799
          resc: 13.003799  resc_io: 13.000000  resc_cpu: 112478
          resp: 13.003799  resp_io: 13.000000  resc_cpu: 112478
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (10.000000) * inner (0.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259866
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259866
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021829  Resp: 5.021829  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021829  
     resc: 5.021829 resc_io: 5.000000 resc_cpu: 646286
     resp: 5.021829 resp_io: 5.000000 resp_cpu: 646286
Join order aborted: cost > best plan cost
***********************
Join order[3]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 4.001309  Resp: 4.001309  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 38747
      Resp_io: 4.000000  Resp_cpu: 38747
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000554
          resc: 2.000554  resc_io: 2.000000  resc_cpu: 16403
          resp: 2.000554  resp_io: 2.000000  resc_cpu: 16403
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.800000 = outer (0.800000) * inner (10.000000) * sel (0.100000)
Join cardinality for NL:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join cardinality without POSQ:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join Card - Rounded: 1 Computed: 0.800000
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021596  Resp: 4.021596  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021596  
     resc: 4.021596 resc_io: 4.000000 resc_cpu: 639397
     resp: 4.021596 resp_io: 4.000000 resp_cpu: 639397
Best:: JoinMethod: NestedLoop
       Cost: 2.000554  Degree: 1  Resp: 2.000554  Card: 0.800000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 2.000554  Resp: 2.000554  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.026605 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.026605
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 11.087631  Resp: 11.087631  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 2594464
      Resp_io: 11.000000  Resp_cpu: 2594464
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 12.065190  Resp: 12.065190  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 1930071
      Resp_io: 12.000000  Resp_cpu: 1930071
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25664
      Resp_io: 3.000000  Resp_cpu: 25664
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.1605e-11 
    NL Join : Cost: 3.000832  Resp: 3.000832  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24632
      Resp_io: 3.000000  Resp_cpu: 24632
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25664
      Resp_io: 3.000000  Resp_cpu: 25664
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000832
          resc: 3.000832  resc_io: 3.000000  resc_cpu: 24632
          resp: 3.000832  resp_io: 3.000000  resc_cpu: 24632
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.800000) * inner (0.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 6.001044  Resp: 6.001044  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001044 
     resc: 6.001044 resc_io: 4.000000 resc_cpu: 59244587
     resp: 6.001044 resp_io: 4.000000 resp_cpu: 59244587
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020274  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021318  Resp: 4.021318  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021318  
     resc: 4.021318 resc_io: 4.000000 resc_cpu: 631154
     resp: 4.021318 resp_io: 4.000000 resp_cpu: 631154
Best:: JoinMethod: NestedLoop
       Cost: 3.000832  Degree: 1  Resp: 3.000832  Card: 0.000000 Bytes: 
***********************
Best so far:  Table#: 1  cost: 1.000272  card: 0.800000  bytes: 6.000000
              Table#: 0  cost: 2.000554  card: 0.800000  bytes: 12.000000
              Table#: 2  cost: 3.000832  card: 0.000000  bytes: 22.000000
***********************
Join order[4]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500026.604943 (cpu filter eval) (= 50.002660 (per row) * 10000.000000 (#rows))
                       =   2578062.604943
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 10.087349  Resp: 10.087349  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 2586124
      Resp_io: 10.000000  Resp_cpu: 2586124
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913670
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 11.064908  Resp: 11.064908  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1921731
      Resp_io: 11.000000  Resp_cpu: 1921731
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.1605e-07 
    NL Join : Cost: 2.000550  Resp: 2.000550  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16291
      Resp_io: 2.000000  Resp_cpu: 16291
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000550
          resc: 2.000550  resc_io: 2.000000  resc_cpu: 16291
          resp: 2.000550  resp_io: 2.000000  resc_cpu: 16291
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.800000) * inner (0.000000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 2.000550  Degree: 1  Resp: 2.000550  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000550  Resp: 2.000550  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.500000 (cpu filter eval) (= 50.050000 (per row) * 10.000000 (#rows))
                       =   30686.260000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001587  Resp: 5.001587  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46977
      Resp_io: 5.000000  Resp_cpu: 46977
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000834  Resp: 3.000834  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24682
      Resp_io: 3.000000  Resp_cpu: 24682
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000834  Resp: 3.000834  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24682
      Resp_io: 3.000000  Resp_cpu: 24682
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000834
          resc: 3.000834  resc_io: 3.000000  resc_cpu: 24682
          resp: 3.000834  resp_io: 3.000000  resc_cpu: 24682
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.000000  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001620  Resp: 7.001620  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001620 
     resc: 7.001620 resc_io: 5.000000 resc_cpu: 59261656
     resp: 7.001620 resp_io: 5.000000 resp_cpu: 59261656
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.000000  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021874  Resp: 5.021874  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021874  
     resc: 5.021874 resc_io: 5.000000 resc_cpu: 647626
     resp: 5.021874 resp_io: 5.000000 resp_cpu: 647626
Join order aborted: cost > best plan cost
***********************
Join order[5]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001526  Resp: 5.001526  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45186
      Resp_io: 5.000000  Resp_cpu: 45186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001526
          resc: 5.001526  resc_io: 5.000000  resc_cpu: 45186
          resp: 5.001526  resp_io: 5.000000  resc_cpu: 45186
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259866
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259866
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021814  Resp: 5.021814  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021814  
     resc: 5.021814 resc_io: 5.000000 resc_cpu: 645836
     resp: 5.021814 resp_io: 5.000000 resp_cpu: 645836
Join order aborted: cost > best plan cost
***********************
Join order[6]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001578  Resp: 5.001578  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46726
      Resp_io: 5.000000  Resp_cpu: 46726
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000840  Resp: 4.000840  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 24862
      Resp_io: 4.000000  Resp_cpu: 24862
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    NL Join : Cost: 3.000762  Resp: 3.000762  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 22562
      Resp_io: 3.000000  Resp_cpu: 22562
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000762
          resc: 3.000762  resc_io: 3.000000  resc_cpu: 22562
          resp: 3.000762  resp_io: 3.000000  resc_cpu: 22562
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (0.800000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 3.000762  Degree: 1  Resp: 3.000762  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 3.000762  Resp: 3.000762  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.500000 (cpu filter eval) (= 50.050000 (per row) * 10.000000 (#rows))
                       =   30686.260000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.001799  Resp: 6.001799  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 53248
      Resp_io: 6.000000  Resp_cpu: 53248
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30954
      Resp_io: 4.000000  Resp_cpu: 30954
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30954
      Resp_io: 4.000000  Resp_cpu: 30954
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001045
          resc: 4.001045  resc_io: 4.000000  resc_cpu: 30954
          resp: 4.001045  resp_io: 4.000000  resc_cpu: 30954
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.001832  Resp: 8.001832  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.001832 
     resc: 8.001832 resc_io: 6.000000 resc_cpu: 59267928
     resp: 8.001832 resp_io: 6.000000 resp_cpu: 59267928
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022086  Resp: 6.022086  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022086  
     resc: 6.022086 resc_io: 6.000000 resc_cpu: 653898
     resp: 6.022086 resp_io: 6.000000 resp_cpu: 653898
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :1
Join order[7]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001526  Resp: 5.001526  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45186
      Resp_io: 5.000000  Resp_cpu: 45186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001526
          resc: 5.001526  resc_io: 5.000000  resc_cpu: 45186
          resp: 5.001526  resp_io: 5.000000  resc_cpu: 45186
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259866
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259866
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021814  Resp: 5.021814  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021814  
     resc: 5.021814 resc_io: 5.000000 resc_cpu: 645836
     resp: 5.021814 resp_io: 5.000000 resp_cpu: 645836
Join order aborted: cost > best plan cost
***********************
Join order[8]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001578  Resp: 5.001578  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46726
      Resp_io: 5.000000  Resp_cpu: 46726
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000840  Resp: 4.000840  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 24862
      Resp_io: 4.000000  Resp_cpu: 24862
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    NL Join : Cost: 3.000762  Resp: 3.000762  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 22562
      Resp_io: 3.000000  Resp_cpu: 22562
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000762
          resc: 3.000762  resc_io: 3.000000  resc_cpu: 22562
          resp: 3.000762  resp_io: 3.000000  resc_cpu: 22562
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (0.800000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 3.000762  Degree: 1  Resp: 3.000762  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 3.000762  Resp: 3.000762  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.500000 (cpu filter eval) (= 50.050000 (per row) * 10.000000 (#rows))
                       =   30686.260000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.001799  Resp: 6.001799  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 53248
      Resp_io: 6.000000  Resp_cpu: 53248
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30954
      Resp_io: 4.000000  Resp_cpu: 30954
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30954
      Resp_io: 4.000000  Resp_cpu: 30954
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001045
          resc: 4.001045  resc_io: 4.000000  resc_cpu: 30954
          resp: 4.001045  resp_io: 4.000000  resc_cpu: 30954
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.001832  Resp: 8.001832  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.001832 
     resc: 8.001832 resc_io: 6.000000 resc_cpu: 59267928
     resp: 8.001832 resp_io: 6.000000 resp_cpu: 59267928
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022086  Resp: 6.022086  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022086  
     resc: 6.022086 resc_io: 6.000000 resc_cpu: 653898
     resp: 6.022086 resp_io: 6.000000 resp_cpu: 653898
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :2
Join order[9]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 4.001309  Resp: 4.001309  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 38747
      Resp_io: 4.000000  Resp_cpu: 38747
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000554
          resc: 2.000554  resc_io: 2.000000  resc_cpu: 16403
          resp: 2.000554  resp_io: 2.000000  resc_cpu: 16403
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.800000 = outer (0.800000) * inner (10.000000) * sel (0.100000)
Join cardinality for NL:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join cardinality without POSQ:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join Card - Rounded: 1 Computed: 0.800000
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021596  Resp: 4.021596  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021596  
     resc: 4.021596 resc_io: 4.000000 resc_cpu: 639397
     resp: 4.021596 resp_io: 4.000000 resp_cpu: 639397
Best:: JoinMethod: NestedLoop
       Cost: 2.000554  Degree: 1  Resp: 2.000554  Card: 0.800000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 2.000554  Resp: 2.000554  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2064  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2064  ("T2"."C2"=13)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2080  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2081  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500025.026605 (cpu filter eval) (= 50.002503 (per row) * 10000.000000 (#rows))
                       =   2578061.026605
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 11.087631  Resp: 11.087631  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 2594464
      Resp_io: 11.000000  Resp_cpu: 2594464
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913668
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 12.065190  Resp: 12.065190  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 1930071
      Resp_io: 12.000000  Resp_cpu: 1930071
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25664
      Resp_io: 3.000000  Resp_cpu: 25664
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-10  ix_sel_with_filters: 2.1605e-11 
    NL Join : Cost: 3.000832  Resp: 3.000832  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24632
      Resp_io: 3.000000  Resp_cpu: 24632
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9261
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25664
      Resp_io: 3.000000  Resp_cpu: 25664
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000832
          resc: 3.000832  resc_io: 3.000000  resc_cpu: 24632
          resp: 3.000832  resp_io: 3.000000  resc_cpu: 24632
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.800000) * inner (0.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 6.001044  Resp: 6.001044  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001044 
     resc: 6.001044 resc_io: 4.000000 resc_cpu: 59244587
     resp: 6.001044 resp_io: 4.000000 resp_cpu: 59244587
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 2.000490  card: 0.000000  bytes:   deg: 1  resp: 2.000490
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020274  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021318  Resp: 4.021318  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021318  
     resc: 4.021318 resc_io: 4.000000 resc_cpu: 631154
     resp: 4.021318 resp_io: 4.000000 resp_cpu: 631154
Join order aborted: cost > best plan cost
***********************
Join order[10]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.000050 flag = 2048  ("T2"."C1"=103)
    io = NOCOST, cpu = 50.000000, sel = 0.055556 flag = 2048  ("T2"."C2"=13)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2049  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500026.604943 (cpu filter eval) (= 50.002660 (per row) * 10000.000000 (#rows))
                       =   2578062.604943
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 10.087349  Resp: 10.087349  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 2586124
      Resp_io: 10.000000  Resp_cpu: 2586124
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1913670
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 11.064908  Resp: 11.064908  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1921731
      Resp_io: 11.000000  Resp_cpu: 1921731
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 1.000000  resc_cpu: 8171
    ix_sel: 2.7778e-06  ix_sel_with_filters: 2.1605e-07 
    NL Join : Cost: 2.000550  Resp: 2.000550  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16291
      Resp_io: 2.000000  Resp_cpu: 16291
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000550
          resc: 2.000550  resc_io: 2.000000  resc_cpu: 16291
          resp: 2.000550  resp_io: 2.000000  resc_cpu: 16291
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.800000) * inner (0.000000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 2.000550  Degree: 1  Resp: 2.000550  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000550  Resp: 2.000550  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2064  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.500000 (cpu filter eval) (= 50.050000 (per row) * 10.000000 (#rows))
                       =   30686.260000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001587  Resp: 5.001587  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46977
      Resp_io: 5.000000  Resp_cpu: 46977
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000834  Resp: 3.000834  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24682
      Resp_io: 3.000000  Resp_cpu: 24682
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 3.000834  Resp: 3.000834  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 24682
      Resp_io: 3.000000  Resp_cpu: 24682
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000834
          resc: 3.000834  resc_io: 3.000000  resc_cpu: 24682
          resp: 3.000834  resp_io: 3.000000  resc_cpu: 24682
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.000000  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001620  Resp: 7.001620  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001620 
     resc: 7.001620 resc_io: 5.000000 resc_cpu: 59261656
     resp: 7.001620 resp_io: 5.000000 resp_cpu: 59261656
  Outer table:  T2  Alias: T2
    resc: 2.000550  card 0.000000  bytes:   deg: 1  resp: 2.000550
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021874  Resp: 5.021874  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021874  
     resc: 5.021874 resc_io: 5.000000 resc_cpu: 647626
     resp: 5.021874 resp_io: 5.000000 resp_cpu: 647626
Join order aborted: cost > best plan cost
***********************
Join order[11]:  T2[T2]#2  L[L]#0  T1[T1]#1

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 5.001526  Resp: 5.001526  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 45186
      Resp_io: 5.000000  Resp_cpu: 45186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 5.001526
          resc: 5.001526  resc_io: 5.000000  resc_cpu: 45186
          resp: 5.001526  resp_io: 5.000000  resc_cpu: 45186
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     21 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 7.001560  Resp: 7.001560  [multiMatchCost=0.000000]
SM Join
  SM cost: 7.001560 
     resc: 7.001560 resc_io: 5.000000 resc_cpu: 59259866
     resp: 7.001560 resp_io: 5.000000 resp_cpu: 59259866
  Outer table:  T2  Alias: T2
    resc: 2.000490  card 0.000000  bytes:   deg: 1  resp: 2.000490
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 5.021814  Resp: 5.021814  [multiMatchCost=0.000000]
HA Join
  HA cost: 5.021814  
     resc: 5.021814 resc_io: 5.000000 resc_cpu: 645836
     resp: 5.021814 resp_io: 5.000000 resp_cpu: 645836
Join order aborted: cost > best plan cost
***********************
Join order[12]:  T2[T2]#2  T1[T1]#1  L[L]#0

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 0.000000  Cost: 2.000490  Resp: 2.000490  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 5.001578  Resp: 5.001578  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 46726
      Resp_io: 5.000000  Resp_cpu: 46726
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 4.000840  Resp: 4.000840  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 24862
      Resp_io: 4.000000  Resp_cpu: 24862
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    NL Join : Cost: 3.000762  Resp: 3.000762  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 22562
      Resp_io: 3.000000  Resp_cpu: 22562
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000762
          resc: 3.000762  resc_io: 3.000000  resc_cpu: 22562
          resp: 3.000762  resp_io: 3.000000  resc_cpu: 22562
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (0.800000) * sel (1.000000)
Join Card - Rounded: 1 Computed: 0.000000
Best:: JoinMethod: NestedLoop
       Cost: 3.000762  Degree: 1  Resp: 3.000762  Card: 0.000000 Bytes: 

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.000000  Cost: 3.000762  Resp: 3.000762  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.500000 (cpu filter eval) (= 50.050000 (per row) * 10.000000 (#rows))
                       =   30686.260000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 6.001799  Resp: 6.001799  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 53248
      Resp_io: 6.000000  Resp_cpu: 53248
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30954
      Resp_io: 4.000000  Resp_cpu: 30954
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8391
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 4.001045  Resp: 4.001045  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 30954
      Resp_io: 4.000000  Resp_cpu: 30954
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001045
          resc: 4.001045  resc_io: 4.000000  resc_cpu: 30954
          resp: 4.001045  resp_io: 4.000000  resc_cpu: 30954
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.000000 = outer (0.000000) * inner (10.000000) * sel (0.010000)
Join Card - Rounded: 1 Computed: 0.000000
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     28 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 8.001832  Resp: 8.001832  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.001832 
     resc: 8.001832 resc_io: 6.000000 resc_cpu: 59267928
     resp: 8.001832 resp_io: 6.000000 resp_cpu: 59267928
  Outer table:  T1  Alias: T1
    resc: 3.000762  card 0.000000  bytes:   deg: 1  resp: 3.000762
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 6.022086  Resp: 6.022086  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.022086  
     resc: 6.022086 resc_io: 6.000000 resc_cpu: 653898
     resp: 6.022086 resp_io: 6.000000 resp_cpu: 653898
Join order aborted: cost > best plan cost
***********************
(newjo-stop-1) k:2, spcnt:2, perm:12, maxperm:120

*********************************
Number of join permutations tried: 12
*********************************
Enumerating distribution method (advanced)
--- Distribution method for 
join between T1[T1](serial) and L[L](serial); jm = 14; right side access path = IndexUnique
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL
--- Distribution method for 
join between L[L](serial) and T2[T2](serial); jm = 14; right side access path = IndexRange
kkopqIsSerialJoin: serial NLJ: both inputs serial
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL

Transfer Optimizer annotations for query block SEL$1_2 (#0)
AP: Checking validity for query block SEL$1_2, sqlid=2zdcf8df6cnzj
AP: Adaptive joins bypassed for query block SEL$1_2 due to OR expansion
AutoDOP: Consider caching for T1[T1](obj#-1) 
cost:1.000272 blkSize:8192 objSize:4.00 marObjSize:3.80 bufSize:135102.00 affPercent:80 smallTab:YES affinitized:NO
kkecComputeAPDop: IO Dop: 0.000000 - CPU Dop: 0.000000
Replication not feasible for first input in join order
id=0 frofkks[i] (index start key) predicate="T1"."M"=TO_NUMBER(:B1)
id=0 frofkke[i] (index stop key) predicate="T1"."M"=TO_NUMBER(:B1)
id=0 froiand (index only filter) predicate="T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)
Transfer optimizer annotations for T1[T1]
AutoDOP: Consider caching for L[L](obj#73644) 
cost:2.000554 blkSize:8192 objSize:4.00 marObjSize:3.80 bufSize:135102.00 affPercent:80 smallTab:YES affinitized:NO
kkecComputeAPDop: IO Dop: 0.000000 - CPU Dop: 0.000000
Replication not feasible based on distribution
id=0 frofkks[i] (index start key) predicate="L"."ID"="T1"."ID"
id=0 frofkke[i] (index stop key) predicate="L"."ID"="T1"."ID"
Transfer optimizer annotations for L[L]
AutoDOP: Consider caching for T2[T2](obj#-1) 
cost:3.000832 blkSize:8192 objSize:25.00 marObjSize:23.75 bufSize:135102.00 affPercent:80 smallTab:YES affinitized:NO
kkecComputeAPDop: IO Dop: 0.000000 - CPU Dop: 0.000000
Replication not feasible based on distribution
id=0 frofkks[i] (index start key) predicate="T2"."C1"=103
id=0 frofkks[i] (index start key) predicate="T2"."C2"=13
id=0 frofkks[i] (index start key) predicate="L"."ID2"="T2"."ID"
id=0 frofkke[i] (index stop key) predicate="T2"."C1"=103
id=0 frofkke[i] (index stop key) predicate="T2"."C2"=13
id=0 frofkke[i] (index stop key) predicate="L"."ID2"="T2"."ID"
id=0 froiand (index only filter) predicate="T2"."C1">=11 AND "T2"."C1"<=12 AND (LNNVL("T2"."C1"=103) OR LNNVL("T2"."C2"=13))
Transfer optimizer annotations for T2[T2]
Final cost for query block SEL$1_2 (#0) - All Rows Plan:
  Best join order: 3
  Cost: 7.002154  Degree: 1  Card: 2.000000  Bytes: 44.000000
  Resc: 7.002154  Resc_io: 7.000000  Resc_cpu: 63780
  Resp: 7.002154  Resp_io: 7.000000  Resc_cpu: 63780
Registered qb: SEL$1_3 0x657ca0e8 (OR EXPANSION SEL$1)
---------------------
QUERY BLOCK SIGNATURE
---------------------
  signature (): qb_name=SEL$1_3 nbfros=3 flg=0
    fro(0): flg=4 objn=73644 hint_alias="L"@"SEL$1_3"
    fro(1): flg=4 objn=73646 hint_alias="T1"@"SEL$1_3"
    fro(2): flg=4 objn=73648 hint_alias="T2"@"SEL$1_3"

LORE: Predicate chain for or-expanded branch SEL$1_3 is:
id=0  predicate=(LNNVL("T1"."M"=TO_NUMBER(:B1)) OR LNNVL("T2"."C1"=103) OR LNNVL("T2"."C2"=13)) AND "T1"."M"=TO_NUMBER(:B2) AND "T2"."C1">=11 AND "T2"."C1"<=12 AND (LNNVL("T2"."C1"=103) OR LNNVL("T2"."C2"=13)) AND "T2"."C1">=11 AND "T2"."C1"<=12 AND ("T1"."M"=TO_NUMBER(:B3) OR "T1"."M"=TO_NUMBER(:B4)) AND "L"."ID"="T1"."ID" AND "L"."ID2"="T2"."ID"
****************
QUERY BLOCK TEXT
****************
SELECT /*+ OPT_PARAM('_optimizer_cbqt_or_expansion' 'off') */ null FROM l, t1, t2 WHERE  
(  ( t1.m = :v1 AND t2.c1 BETWEEN 11 AND 12)       OR 
   ( t1.m = :v2 AND t2.c1 = 103 AND t2.c2 = 13  )   )  AND 
    ( l.id = t1.id AND l.id2 = t2.id )
---------------------
QUERY BLOCK SIGNATURE
---------------------
signature (optimizer): qb_name=SEL$1_3 nbfros=3 flg=0
  fro(0): flg=0 objn=73644 hint_alias="L"@"SEL$1_3"
  fro(1): flg=0 objn=73646 hint_alias="T1"@"SEL$1_3"
  fro(2): flg=0 objn=73648 hint_alias="T2"@"SEL$1_3"

-----------------------------
SYSTEM STATISTICS INFORMATION
-----------------------------
Using dictionary system stats.
  Using NOWORKLOAD Stats
  CPUSPEEDNW: 2467 millions instructions/sec (default is 100)
  IOTFRSPEED: 4096 bytes per millisecond (default is 4096)
  IOSEEKTIM:  10 milliseconds (default is 10)
  MBRC:       NO VALUE blocks (default is 8)

***************************************
BASE STATISTICAL INFORMATION
***********************
Table Stats::
  Table: T2  Alias: T2
  #Rows: 10000  SSZ: 0  LGR: 0  #Blks:  25  AvgRowLen:  10.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): C1(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#3): C2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 0.000000 Max: 9.000000
  Column (#1): ID(NUMBER)
    AvgLen: 4 NDV: 10000 Nulls: 0 Density: 0.000100 Min: 1.000000 Max: 10000.000000
Index Stats::
  Index: T2_C1_C2_ID  Col#: 2 3 1
  LVLS: 1  #LB: 30  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 210.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
  Index: T2_ID  Col#: 1
  LVLS: 1  #LB: 20  #DK: 10000  LB/K: 1.00  DB/K: 1.00  CLUF: 21.00  NRW: 10000.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table: T1  Alias: T1
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#2): M(NUMBER)
    AvgLen: 3 NDV: 5 Nulls: 0 Density: 0.200000 Min: 0.000000 Max: 4.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: T1_M_ID  Col#: 2 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
***********************
Table Stats::
  Table:  L  Alias:  L
  #Rows: 10  SSZ: 0  LGR: 0  #Blks:  4  AvgRowLen:  6.00  NEB: 0  ChainCnt:  0.00  ScanRate:  0.00  SPC: 0  RFL: 0  RNF: 0  CBK: 0  CHR: 0  KQDFLG: 1
  #IMCUs: 0  IMCRowCnt: 0  IMCJournalRowCnt: 0  #IMCBlocks: 0  IMCQuotient: 0.000000
  Column (#1): ID(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
  Column (#2): ID2(NUMBER)
    AvgLen: 3 NDV: 10 Nulls: 0 Density: 0.100000 Min: 1.000000 Max: 10.000000
Index Stats::
  Index: L_ID  Col#: 1
  LVLS: 0  #LB: 1  #DK: 10  LB/K: 1.00  DB/K: 1.00  CLUF: 1.00  NRW: 10.00 SSZ: 0.00 LGR: 0.00 CBK: 0.00 GQL: 0.00 CHR: 0.00 KQDFLG: 8192 BSZ: 1
  KKEISFLG: 1 
=======================================
SPD: BEGIN context at query block level
=======================================
Query Block SEL$1_3 (#0)
Return code in qosdSetupDirCtx4QB: NOCTX
=====================================
SPD: END context at query block level
=====================================
Access path analysis for L
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for L[L] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE
  Table: L  Alias: L
    Card: Original: 10.000000  Rounded: 10  Computed: 10.000000  Non Adjusted: 10.000000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                       =   30185.760000
  Access Path: TableScan
    Cost:  3.001020  Resp: 3.001020  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 30186
      Resp_io: 3.000000  Resp_cpu: 30186
  ****** trying bitmap/domain indexes ******
 ****** Costing Index L_ID
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 9121
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 1.000308  Resp: 1.000308  Degree: 0
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: TableScan
         Cost: 3.001020  Degree: 1  Resp: 3.001020  Card: 10.000000  Bytes: 0.000000

Access path analysis for T1
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T1[T1] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE


 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1)
  Estimated selectivity: 0.200000 , col: #2 

 kkecdn: Single Table Predicate:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)
  Estimated selectivity: 0.200000 , col: #2 
  Table: T1  Alias: T1
    Card: Original: 10.000000  Rounded: 1  Computed: 0.800000  Non Adjusted: 0.800000
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 2040.000000 (cpu filter eval) (= 204.000000 (per row) * 10.000000 (#rows))
                       =   32225.760000
  Access Path: TableScan
    Cost:  3.001088  Resp: 3.001088  Degree: 0
      Cost_io: 3.000000  Cost_cpu: 32226
      Resp_io: 3.000000  Resp_cpu: 32226
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 2.000000  resc_cpu: 10361
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  2.000350  Resp: 2.000350  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 10361
      Resp_io: 2.000000  Resp_cpu: 10361
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN

  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T1_M_ID
    resc_io: 1.000000  resc_cpu: 7521
    ix_sel: 0.200000  ix_sel_with_filters: 0.080000 
    Cost: 1.000272  Resp: 1.000272  Degree: 1
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T1_M_ID
         Cost: 1.000272  Degree: 1  Resp: 1.000272  Card: 0.800000  Bytes: 0.000000

Access path analysis for T2
***************************************
SINGLE TABLE ACCESS PATH 
  Single Table Cardinality Estimation for T2[T2] 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = TABLE


 kkecdn: Single Table Predicate:"T2"."C1">=11
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1"<=12
  Estimated selectivity: 1.000000 , col: #2 

 kkecdn: Single Table Predicate: ?? 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1">=11
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred

 kkecdn: Single Table Predicate:"T2"."C1"<=12
  Estimated selectivity: 1.000000 , col: #2 
  Table: T2  Alias: T2
    Card: Original: 10000.000000  Rounded: 1000  Computed: 999.997222  Non Adjusted: 999.997222
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2064  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2080  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 547963.097394 (cpu filter eval) (= 54.796310 (per row) * 10000.000000 (#rows))
                       =   2625999.097394
  Access Path: TableScan
    Cost:  9.088696  Resp: 9.088696  Degree: 0
      Cost_io: 9.000000  Cost_cpu: 2625999
      Resp_io: 9.000000  Resp_cpu: 2625999
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1961606
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Access Path: index (FFS)
    Cost:  10.066255  Resp: 10.066255  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 1961606
      Resp_io: 10.000000  Resp_cpu: 1961606
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 4.000000  resc_cpu: 228486
    ix_sel: 0.100000  ix_sel_with_filters: 0.007778 
    Cost: 4.009669  Resp: 4.009669  Degree: 1
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******
  Best:: AccessPath: IndexRange
  Index: T2_C1_C2_ID
         Cost: 4.009669  Degree: 1  Resp: 4.009669  Card: 999.997222  Bytes: 0.000000

(newjo-restore) [2 1 0 ]
***************************************


OPTIMIZER STATISTICS AND COMPUTATIONS
PJE:  Bypassed; QB is OR expanded SEL$1_3 (#0)
***************************************
GENERAL PLANS
***************************************
Considering cardinality-based initial join order.
Permutations for Starting Table :0
Join order[1]:  L[L]#0  T1[T1]#1  T2[T2]#2

***************
Now joining: T1[T1]#1
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T1
  Scan IO  Cost (Disk) =   1.200000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2064  ("T1"."M"=TO_NUMBER(:B1))
    io = 0.000000, cpu = 270.000000, sel = 0.400000 flag = 2080  (Inlist)
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
      io = NOCOST, cpu = 150.000000, sel = 0.200000 flag = 2048  ("T1"."M"=TO_NUMBER(:B1))
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   1.200000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   1.200000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 704.000000 (cpu filter eval) (= 70.400000 (per row) * 10.000000 (#rows))
                       =   30889.760000
  Inner table: T1  Alias: T1
  Access Path: TableScan
    NL Join:  Cost: 15.011453  Resp: 15.011453  Degree: 1
      Cost_io: 15.000000  Cost_cpu: 339083
      Resp_io: 15.000000  Resp_cpu: 339083
  Access Path: index (index (FFS))
    Index: T1_M_ID
    resc_io: 0.400000  resc_cpu: 9025
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T1  Alias: T1
  Access Path: index (FFS)
    NL Join:  Cost: 7.004068  Resp: 7.004068  Degree: 1
      Cost_io: 7.000000  Cost_cpu: 120440
      Resp_io: 7.000000  Resp_cpu: 120440
kkofmx: index filter:"T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)

 ****** Costing Index T1_M_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  ColGroup Usage:: PredCnt: 2  Matches Full: #1  Partial:  Sel: 0.100000
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Estimated selectivity: 0.200000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Access Path: index (AllEqJoinGuess)
    Index: T1_M_ID
    resc_io: 0.000000  resc_cpu: 1050
    ix_sel: 0.100000  ix_sel_with_filters: 0.008000 
    NL Join : Cost: 3.001465  Resp: 3.001465  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 43386
      Resp_io: 3.000000  Resp_cpu: 43386
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.001465
          resc: 3.001465  resc_io: 3.000000  resc_cpu: 43386
          resp: 3.001465  resp_io: 3.000000  resc_cpu: 43386
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.800000 = outer (10.000000) * inner (0.800000) * sel (0.100000)
Join Card - Rounded: 1 Computed: 0.800000
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
SM Join (with index on outer)
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (FullScan)
    Index: L_ID
    resc_io: 2.000000  resc_cpu: 17943
    ix_sel: 1.000000  ix_sel_with_filters: 1.000000 
    Cost: 2.000606  Resp: 2.000606  Degree: 1
  Outer table:  L  Alias: L
    resc: 2.000606  card 10.000000  bytes:   deg: 1  resp: 2.000606
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
  SM join: Resc: 4.000878  Resp: 4.000878  [multiMatchCost=0.000000]
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T1  Alias: T1
    resc: 1.000272  card: 0.800000  bytes:   deg: 1  resp: 1.000272
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020320  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021611  Resp: 4.021611  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021611  
     resc: 4.021611 resc_io: 4.000000 resc_cpu: 639847
     resp: 4.021611 resp_io: 4.000000 resp_cpu: 639847
Best:: JoinMethod: NestedLoop
       Cost: 3.001465  Degree: 1  Resp: 3.001465  Card: 0.800000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 3.001465  Resp: 3.001465  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 160.000500, sel = 0.999999 flag = 2080  (OR chain)
      io = NOCOST, cpu = 150.000000, sel = 0.800000 flag = 2048  (LNNVL("T1"."M"=TO_NUMBER(:B1)))
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2048  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2048  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2064  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2080  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500557.642110 (cpu filter eval) (= 50.055764 (per row) * 10000.000000 (#rows))
                       =   2578593.642110
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 12.088560  Resp: 12.088560  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 2621979
      Resp_io: 12.000000  Resp_cpu: 2621979
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1914201
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 13.066119  Resp: 13.066119  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 1957587
      Resp_io: 13.000000  Resp_cpu: 1957587
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9267
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001778  Resp: 4.001778  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 52653
      Resp_io: 4.000000  Resp_cpu: 52653
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

kkofmx: index filter: ?? 

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 7.7778e-07 
    NL Join : Cost: 6.010662  Resp: 6.010662  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 315670
      Resp_io: 6.000000  Resp_cpu: 315670
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9267
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 4.001778  Resp: 4.001778  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 52653
      Resp_io: 4.000000  Resp_cpu: 52653
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.001530  Resp: 3.001530  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 45286
      Resp_io: 3.000000  Resp_cpu: 45286

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 6.008971  Resp: 6.008971  Degree: 1
      Cost_io: 6.000000  Cost_cpu: 265600
      Resp_io: 6.000000  Resp_cpu: 265600
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 3.001575, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 7.028702, sel = 0.100000
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.001778
          resc: 4.001778  resc_io: 4.000000  resc_cpu: 52653
          resp: 4.001778  resp_io: 4.000000  resc_cpu: 52653
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.799997 = outer (0.800000) * inner (999.997222) * sel (1.0000e-03)
Join cardinality for HJ/SMJ (no post filters):  0.799998, outer: 0.800000, inner: 999.997222, sel: 1.0000e-03
Join Card - Rounded: 1 Computed: 0.799997
  Outer table:  T1  Alias: T1
    resc: 3.001465  card 0.800000  bytes:   deg: 1  resp: 3.001465
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 9.026300  Resp: 9.026300  [multiMatchCost=0.000000]
SM Join
  SM cost: 9.026300 
     resc: 9.026300 resc_io: 7.000000 resc_cpu: 59992337
     resp: 9.026300 resp_io: 7.000000 resp_cpu: 59992337
  Outer table:  T1  Alias: T1
    resc: 3.001465  card 0.800000  bytes:   deg: 1  resp: 3.001465
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023648  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 7.034782  Resp: 7.034782  [multiMatchCost=0.000000]
HA Join
  HA cost: 7.034782  
     resc: 7.034782 resc_io: 7.000000 resc_cpu: 1029799
     resp: 7.034782 resp_io: 7.000000 resp_cpu: 1029799
Best:: JoinMethod: NestedLoop
       Cost: 4.001778  Degree: 1  Resp: 4.001778  Card: 0.799997 Bytes: 
***********************
Best so far:  Table#: 0  cost: 3.001020  card: 10.000000  bytes: 60.000000
              Table#: 1  cost: 3.001465  card: 0.800000  bytes: 12.000000
              Table#: 2  cost: 4.001778  card: 0.799997  bytes: 22.000000
***********************
Join order[2]:  L[L]#0  T2[T2]#2  T1[T1]#1

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 10.000000  Cost: 3.001020  Resp: 3.001020  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   6.900000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2064  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   6.900000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   6.900000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500547.963097 (cpu filter eval) (= 50.054796 (per row) * 10000.000000 (#rows))
                       =   2578583.963097
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 72.871961  Resp: 72.871961  Degree: 1
      Cost_io: 72.000000  Cost_cpu: 25816025
      Resp_io: 72.000000  Resp_cpu: 25816025
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 8.300000  resc_cpu: 1914191
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 86.647556  Resp: 86.647556  Degree: 1
      Cost_io: 86.000000  Cost_cpu: 19172097
      Resp_io: 86.000000  Resp_cpu: 19172097
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9266
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004149  Resp: 13.004149  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122848
      Resp_io: 13.000000  Resp_cpu: 122848
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 7.7778e-07 
    NL Join : Cost: 33.092982  Resp: 33.092982  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 2752907
      Resp_io: 33.000000  Resp_cpu: 2752907
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9266
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 13.004149  Resp: 13.004149  Degree: 1
      Cost_io: 13.000000  Cost_cpu: 122848
      Resp_io: 13.000000  Resp_cpu: 122848
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.001661  Resp: 3.001661  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 49186
      Resp_io: 3.000000  Resp_cpu: 49186

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 33.076075  Resp: 33.076075  Degree: 1
      Cost_io: 33.000000  Cost_cpu: 2252329
      Resp_io: 33.000000  Resp_cpu: 2252329
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 3.001707, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 34.095833, sel = 0.100000
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 13.004149
          resc: 13.004149  resc_io: 13.000000  resc_cpu: 122848
          resp: 13.004149  resp_io: 13.000000  resc_cpu: 122848
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  9.999972 = outer (10.000000) * inner (999.997222) * sel (0.001000)
Join Card - Rounded: 10 Computed: 9.999972
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 9.025904  Resp: 9.025904  [multiMatchCost=0.000000]
SM Join
  SM cost: 9.025904 
     resc: 9.025904 resc_io: 7.000000 resc_cpu: 59980634
     resp: 9.025904 resp_io: 7.000000 resp_cpu: 59980634
  Outer table:  L  Alias: L
    resc: 3.001020  card 10.000000  bytes:   deg: 1  resp: 3.001020
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023694  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 7.034382  Resp: 7.034382  [multiMatchCost=0.000000]
HA Join
  HA cost: 7.034382  
     resc: 7.034382 resc_io: 7.000000 resc_cpu: 1017949
     resp: 7.034382 resp_io: 7.000000 resp_cpu: 1017949
Join order aborted: cost > best plan cost
***********************
Join order[3]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 4.001309  Resp: 4.001309  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 38747
      Resp_io: 4.000000  Resp_cpu: 38747
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000554
          resc: 2.000554  resc_io: 2.000000  resc_cpu: 16403
          resp: 2.000554  resp_io: 2.000000  resc_cpu: 16403
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.800000 = outer (0.800000) * inner (10.000000) * sel (0.100000)
Join cardinality for NL:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join cardinality without POSQ:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join Card - Rounded: 1 Computed: 0.800000
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021596  Resp: 4.021596  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021596  
     resc: 4.021596 resc_io: 4.000000 resc_cpu: 639397
     resp: 4.021596 resp_io: 4.000000 resp_cpu: 639397
Best:: JoinMethod: NestedLoop
       Cost: 2.000554  Degree: 1  Resp: 2.000554  Card: 0.800000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 2.000554  Resp: 2.000554  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 160.000500, sel = 0.999999 flag = 2048  (OR chain)
      io = NOCOST, cpu = 150.000000, sel = 0.800000 flag = 2048  (LNNVL("T1"."M"=TO_NUMBER(:B1)))
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2048  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2048  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2064  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500557.642110 (cpu filter eval) (= 50.055764 (per row) * 10000.000000 (#rows))
                       =   2578593.642110
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 11.087649  Resp: 11.087649  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 2594997
      Resp_io: 11.000000  Resp_cpu: 2594997
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1914201
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 12.065208  Resp: 12.065208  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 1930604
      Resp_io: 12.000000  Resp_cpu: 1930604
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9267
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25670
      Resp_io: 3.000000  Resp_cpu: 25670
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

kkofmx: index filter: ?? 

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 7.7778e-07 
    NL Join : Cost: 5.009751  Resp: 5.009751  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 288687
      Resp_io: 5.000000  Resp_cpu: 288687
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9267
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25670
      Resp_io: 3.000000  Resp_cpu: 25670
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 2.000618  Resp: 2.000618  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 18303
      Resp_io: 2.000000  Resp_cpu: 18303

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.008060  Resp: 5.008060  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 238617
      Resp_io: 5.000000  Resp_cpu: 238617
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 2.000664, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 6.027790, sel = 0.100000
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000867
          resc: 3.000867  resc_io: 3.000000  resc_cpu: 25670
          resp: 3.000867  resp_io: 3.000000  resc_cpu: 25670
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.799997 = outer (0.800000) * inner (999.997222) * sel (1.0000e-03)
Join cardinality for HJ/SMJ (no post filters):  0.799998, outer: 0.800000, inner: 999.997222, sel: 1.0000e-03
Join Card - Rounded: 1 Computed: 0.799997
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 8.025388  Resp: 8.025388  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.025388 
     resc: 8.025388 resc_io: 6.000000 resc_cpu: 59965354
     resp: 8.025388 resp_io: 6.000000 resp_cpu: 59965354
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023648  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 6.033871  Resp: 6.033871  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.033871  
     resc: 6.033871 resc_io: 6.000000 resc_cpu: 1002817
     resp: 6.033871 resp_io: 6.000000 resp_cpu: 1002817
Plan cardinality mismatch: best card= 0.79999733333   curr card= 0.79999733333
Best:: JoinMethod: NestedLoop
       Cost: 3.000867  Degree: 1  Resp: 3.000867  Card: 0.799997 Bytes: 
***********************
Best so far:  Table#: 1  cost: 1.000272  card: 0.800000  bytes: 6.000000
              Table#: 0  cost: 2.000554  card: 0.800000  bytes: 12.000000
              Table#: 2  cost: 3.000867  card: 0.799997  bytes: 22.000000
***********************
Join order[4]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 160.000500, sel = 0.999999 flag = 2048  (OR chain)
      io = NOCOST, cpu = 150.000000, sel = 0.800000 flag = 2048  (LNNVL("T1"."M"=TO_NUMBER(:B1)))
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2048  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2048  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2064  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 557642.109739 (cpu filter eval) (= 55.764211 (per row) * 10000.000000 (#rows))
                       =   2635678.109739
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 10.089295  Resp: 10.089295  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 2643740
      Resp_io: 10.000000  Resp_cpu: 2643740
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1971285
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 11.066854  Resp: 11.066854  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1979347
      Resp_io: 11.000000  Resp_cpu: 1979347
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.007778 
    NL Join : Cost: 4.010150  Resp: 4.010150  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 300498
      Resp_io: 4.000000  Resp_cpu: 300498
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.010150
          resc: 4.010150  resc_io: 4.000000  resc_cpu: 300498
          resp: 4.010150  resp_io: 4.000000  resc_cpu: 300498
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  799.997333 = outer (0.800000) * inner (999.997222) * sel (0.999999)
Join cardinality for HJ/SMJ (no post filters):  799.997778, outer: 0.800000, inner: 999.997222, sel: 0.999999
Join Card - Rounded: 800 Computed: 799.997333
Join order aborted: cost > best plan cost
***********************
Join order[5]:  T2[T2]#2  L[L]#0  T1[T1]#1
Join order aborted: cost > best plan cost
***********************
Join order[6]:  T2[T2]#2  T1[T1]#1  L[L]#0
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :1
Join order[7]:  T1[T1]#1  L[L]#0  T2[T2]#2

***************
Now joining: L[L]#0
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for L
  Scan IO  Cost (Disk) =   3.000000
  Scan CPU Cost (Disk) =   30185.760000
  Cost of predicates:
    io = NOCOST, cpu = 50.000000, sel = 0.100000 flag = 2064  ("L"."ID"="T1"."ID")
  Total Scan IO  Cost  =   3.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10.000000 (#rows))
                       =   3.000000
  Total Scan CPU  Cost =   30185.760000 (scan (Disk))
                         + 500.000000 (cpu filter eval) (= 50.000000 (per row) * 10.000000 (#rows))
                       =   30685.760000
  Inner table: L  Alias: L
  Access Path: TableScan
    NL Join:  Cost: 4.001309  Resp: 4.001309  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 38747
      Resp_io: 4.000000  Resp_cpu: 38747
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
 ****** Costing Index L_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: L_ID
    resc_io: 1.000000  resc_cpu: 8341
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 2.000554  Resp: 2.000554  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 16403
      Resp_io: 2.000000  Resp_cpu: 16403
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 2.000554
          resc: 2.000554  resc_io: 2.000000  resc_cpu: 16403
          resp: 2.000554  resp_io: 2.000000  resc_cpu: 16403
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
Join Card:  0.800000 = outer (0.800000) * inner (10.000000) * sel (0.100000)
Join cardinality for NL:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join cardinality without POSQ:  0.800000, outer: 0.800000, inner: 10.000000, sel: 0.100000
Join Card - Rounded: 1 Computed: 0.800000
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     17 Total Rows:             10
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29608338
      Total Temp space used: 0
  SM join: Resc: 6.001342  Resp: 6.001342  [multiMatchCost=0.000000]
SM Join
  SM cost: 6.001342 
     resc: 6.001342 resc_io: 4.000000 resc_cpu: 59253427
     resp: 6.001342 resp_io: 4.000000 resp_cpu: 59253427
  Outer table:  T1  Alias: T1
    resc: 1.000272  card 0.800000  bytes:   deg: 1  resp: 1.000272
  Inner table:  L  Alias: L
    resc: 3.001020  card: 10.000000  bytes:   deg: 1  resp: 3.001020
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.020304  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 1  ppasses: 1
  Hash join: Resc: 4.021596  Resp: 4.021596  [multiMatchCost=0.000000]
HA Join
  HA cost: 4.021596  
     resc: 4.021596 resc_io: 4.000000 resc_cpu: 639397
     resp: 4.021596 resp_io: 4.000000 resp_cpu: 639397
Best:: JoinMethod: NestedLoop
       Cost: 2.000554  Degree: 1  Resp: 2.000554  Card: 0.800000 Bytes: 

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 2.000554  Resp: 2.000554  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 160.000500, sel = 0.999999 flag = 2080  (OR chain)
      io = NOCOST, cpu = 150.000000, sel = 0.800000 flag = 2048  (LNNVL("T1"."M"=TO_NUMBER(:B1)))
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2048  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2048  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2064  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2080  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2080  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2080  ("T2"."C1"<=12)
    io = NOCOST, cpu = 50.000000, sel = 0.001000 flag = 2048  ("L"."ID2"="T2"."ID")
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 500557.642110 (cpu filter eval) (= 50.055764 (per row) * 10000.000000 (#rows))
                       =   2578593.642110
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 11.087649  Resp: 11.087649  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 2594997
      Resp_io: 11.000000  Resp_cpu: 2594997
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1914201
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 12.065208  Resp: 12.065208  Degree: 1
      Cost_io: 12.000000  Cost_cpu: 1930604
      Resp_io: 12.000000  Resp_cpu: 1930604
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (UniqueScan)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9267
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25670
      Resp_io: 3.000000  Resp_cpu: 25670
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

kkofmx: index filter: ?? 

kkofmx: index filter:"L"."ID2"="T2"."ID"

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 7.7778e-07 
    NL Join : Cost: 5.009751  Resp: 5.009751  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 288687
      Resp_io: 5.000000  Resp_cpu: 288687
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 1.000000  resc_cpu: 9267
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 3.000867  Resp: 3.000867  Degree: 1
      Cost_io: 3.000000  Cost_cpu: 25670
      Resp_io: 3.000000  Resp_cpu: 25670
  ****** trying bitmap/domain indexes ******
 ****** Costing Index T2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Access Path: index (AllEqUnique)
    Index: T2_ID
    resc_io: 0.000000  resc_cpu: 1900
    ix_sel: 1.0000e-04  ix_sel_with_filters: 1.0000e-04 
    NL Join : Cost: 2.000618  Resp: 2.000618  Degree: 1
      Cost_io: 2.000000  Cost_cpu: 18303
      Resp_io: 2.000000  Resp_cpu: 18303

  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.100000 
    NL Join : Cost: 5.008060  Resp: 5.008060  Degree: 1
      Cost_io: 5.000000  Cost_cpu: 238617
      Resp_io: 5.000000  Resp_cpu: 238617
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  Bitmap nodes:
    Used T2_ID
      Cost = 2.000664, sel = 0.001000
    Not used T2_C1_C2_ID
      Cost = 6.027790, sel = 0.100000
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 3.000867
          resc: 3.000867  resc_io: 3.000000  resc_cpu: 25670
          resp: 3.000867  resp_io: 3.000000  resc_cpu: 25670
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  0.799997 = outer (0.800000) * inner (999.997222) * sel (1.0000e-03)
Join cardinality for HJ/SMJ (no post filters):  0.799998, outer: 0.800000, inner: 999.997222, sel: 1.0000e-03
Join Card - Rounded: 1 Computed: 0.799997
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 1 Row size:     24 Total Rows:              1
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 29606842
      Total Temp space used: 0
    SORT ressource         Sort statistics
      Sort width:         598 Area size:      536576 Max Area size:   104857600
      Degree:               1
      Blocks to Sort: 3 Row size:     21 Total Rows:           1000
      Initial runs:   1 Merge passes:  0 IO Cost / pass:          0
      Total IO sort cost: 0.000000      Total CPU sort cost: 30055846
      Total Temp space used: 0
  SM join: Resc: 8.025388  Resp: 8.025388  [multiMatchCost=0.000000]
SM Join
  SM cost: 8.025388 
     resc: 8.025388 resc_io: 6.000000 resc_cpu: 59965354
     resp: 8.025388 resp_io: 6.000000 resp_cpu: 59965354
  Outer table:  L  Alias: L
    resc: 2.000554  card 0.800000  bytes:   deg: 1  resp: 2.000554
  Inner table:  T2  Alias: T2
    resc: 4.009669  card: 999.997222  bytes:   deg: 1  resp: 4.009669
    using dmeth: 2  #groups: 1
    Cost per ptn: 0.023648  #ptns: 1
    hash_area: 131 (max=25600) buildfrag: 1  probefrag: 3  ppasses: 1
  Hash join: Resc: 6.033871  Resp: 6.033871  [multiMatchCost=0.000000]
HA Join
  HA cost: 6.033871  
     resc: 6.033871 resc_io: 6.000000 resc_cpu: 1002817
     resp: 6.033871 resp_io: 6.000000 resp_cpu: 1002817
Join order aborted: cost > best plan cost
***********************
Join order[8]:  T1[T1]#1  T2[T2]#2  L[L]#0

***************
Now joining: T2[T2]#2
***************
NL Join
  Outer table: Card: 0.800000  Cost: 1.000272  Resp: 1.000272  Degree: 1  Bytes: 
Access path analysis for T2
  Scan IO  Cost (Disk) =   9.000000
  Scan CPU Cost (Disk) =   2078036.000000
  Cost of predicates:
    io = 0.000000, cpu = 160.000500, sel = 0.999999 flag = 2048  (OR chain)
      io = NOCOST, cpu = 150.000000, sel = 0.800000 flag = 2048  (LNNVL("T1"."M"=TO_NUMBER(:B1)))
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2048  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2048  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2064  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2064  ("T2"."C1"<=12)
    io = 0.000000, cpu = 50.002500, sel = 0.999997 flag = 2048  (OR chain)
      io = NOCOST, cpu = 50.000000, sel = 0.999950 flag = 2051  (LNNVL("T2"."C1"=103))
      io = NOCOST, cpu = 50.000000, sel = 0.944444 flag = 2050  (LNNVL("T2"."C2"=13))
    io = NOCOST, cpu = 50.000000, sel = 0.077778 flag = 2048  ("T2"."C1">=11)
    io = NOCOST, cpu = 50.000000, sel = 1.000000 flag = 2048  ("T2"."C1"<=12)
  Total Scan IO  Cost  =   9.000000 (scan (Disk))
                         + 0.000000 (io filter eval) (= 0.000000 (per row) * 10000.000000 (#rows))
                       =   9.000000
  Total Scan CPU  Cost =   2078036.000000 (scan (Disk))
                         + 557642.109739 (cpu filter eval) (= 55.764211 (per row) * 10000.000000 (#rows))
                       =   2635678.109739
  Inner table: T2  Alias: T2
  Access Path: TableScan
    NL Join:  Cost: 10.089295  Resp: 10.089295  Degree: 1
      Cost_io: 10.000000  Cost_cpu: 2643740
      Resp_io: 10.000000  Resp_cpu: 2643740
  Access Path: index (index (FFS))
    Index: T2_C1_C2_ID
    resc_io: 10.000000  resc_cpu: 1971285
    ix_sel: 0.000000  ix_sel_with_filters: 1.000000 
  Inner table: T2  Alias: T2
  Access Path: index (FFS)
    NL Join:  Cost: 11.066854  Resp: 11.066854  Degree: 1
      Cost_io: 11.000000  Cost_cpu: 1979347
      Resp_io: 11.000000  Resp_cpu: 1979347
kkofmx: index filter: ?? 

kkofmx: index filter:"T2"."C1">=11

kkofmx: index filter:"T2"."C1"<=12

kkofmx: index filter: ?? 

 ****** Costing Index T2_C1_C2_ID
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SCAN
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_FILTER
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = INDEX_SKIP_SCAN
  Using prorated density: 0.077778 of col #2 as selectivity of out-of-range/non-existent value pred
  Estimated selectivity: 1.000000 , col: #2 
  Access Path: index (IndexOnly)
    Index: T2_C1_C2_ID
    resc_io: 3.000000  resc_cpu: 222214
    ix_sel: 0.100000  ix_sel_with_filters: 0.007778 
    NL Join : Cost: 4.010150  Resp: 4.010150  Degree: 1
      Cost_io: 4.000000  Cost_cpu: 300498
      Resp_io: 4.000000  Resp_cpu: 300498
  ****** trying bitmap/domain indexes ******
  ****** finished trying bitmap/domain indexes ******

  Best NL cost: 4.010150
          resc: 4.010150  resc_io: 4.000000  resc_cpu: 300498
          resp: 4.010150  resp_io: 4.000000  resc_cpu: 300498
  SPD: Return code in qosdDSDirSetup: NOCTX, estType = JOIN
  Estimated selectivity: 0.200000 , col: #2 
  Using prorated density: 5.0000e-05 of col #2 as selectivity of out-of-range/non-existent value pred
  Using prorated density: 0.055556 of col #3 as selectivity of out-of-range/non-existent value pred
Join Card:  799.997333 = outer (0.800000) * inner (999.997222) * sel (0.999999)
Join cardinality for HJ/SMJ (no post filters):  799.997778, outer: 0.800000, inner: 999.997222, sel: 0.999999
Join Card - Rounded: 800 Computed: 799.997333
Join order aborted: cost > best plan cost
***********************
Join order[9]:  T2[T2]#2  L[L]#0  T1[T1]#1
Join order aborted: cost > best plan cost
***********************
Join order[10]:  T2[T2]#2  T1[T1]#1  L[L]#0
Join order aborted: cost > best plan cost
***********************
Permutations for Starting Table :2
Join order[11]:  T2[T2]#2  L[L]#0  T1[T1]#1
Join order aborted: cost > best plan cost
***********************
Join order[12]:  T2[T2]#2  T1[T1]#1  L[L]#0
Join order aborted: cost > best plan cost
***********************
(newjo-stop-1) k:2, spcnt:2, perm:12, maxperm:120

*********************************
Number of join permutations tried: 12
*********************************
Enumerating distribution method (advanced)
--- Distribution method for 
join between T1[T1](serial) and L[L](serial); jm = 14; right side access path = IndexUnique
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL
--- Distribution method for 
join between L[L](serial) and T2[T2](serial); jm = 14; right side access path = IndexUnique
kkopqIsSerialJoin: serial NLJ: both inputs serial
kkopqIsSerialJoin: serial NLJ: both inputs serial
---- serial NL-Join -> SERIAL

Transfer Optimizer annotations for query block SEL$1_3 (#0)
AP: Checking validity for query block SEL$1_3, sqlid=2zdcf8df6cnzj
AP: Adaptive joins bypassed for query block SEL$1_3 due to OR expansion
AutoDOP: Consider caching for T1[T1](obj#-1) 
cost:1.000272 blkSize:8192 objSize:4.00 marObjSize:3.80 bufSize:135102.00 affPercent:80 smallTab:YES affinitized:NO
kkecComputeAPDop: IO Dop: 0.000000 - CPU Dop: 0.000000
Replication not feasible for first input in join order
id=0 frofkks[i] (index start key) predicate="T1"."M"=TO_NUMBER(:B1)
id=0 frofkke[i] (index stop key) predicate="T1"."M"=TO_NUMBER(:B1)
id=0 froiand (index only filter) predicate="T1"."M"=TO_NUMBER(:B1) OR "T1"."M"=TO_NUMBER(:B2)
Transfer optimizer annotations for T1[T1]
AutoDOP: Consider caching for L[L](obj#73644) 
cost:2.000554 blkSize:8192 objSize:4.00 marObjSize:3.80 bufSize:135102.00 affPercent:80 smallTab:YES affinitized:NO
kkecComputeAPDop: IO Dop: 0.000000 - CPU Dop: 0.000000
Replication not feasible based on distribution
id=0 frofkks[i] (index start key) predicate="L"."ID"="T1"."ID"
id=0 frofkke[i] (index stop key) predicate="L"."ID"="T1"."ID"
Transfer optimizer annotations for L[L]
AutoDOP: Consider caching for T2[T2](obj#-1) 
cost:3.000867 blkSize:8192 objSize:25.00 marObjSize:23.75 bufSize:135102.00 affPercent:80 smallTab:YES affinitized:NO
kkecComputeAPDop: IO Dop: 0.000000 - CPU Dop: 0.000000
Replication not feasible based on distribution
id=0 frofkks[i] (index start key) predicate="L"."ID2"="T2"."ID"
id=0 frofkke[i] (index stop key) predicate="L"."ID2"="T2"."ID"
id=0 frofand predicate="T2"."C1">=11 AND "T2"."C1">=11 AND "T2"."C1"<=12 AND "T2"."C1"<=12 AND (LNNVL("T1"."M"=TO_NUMBER(:B1)) OR LNNVL("T2"."C1"=103) OR LNNVL("T2"."C2"=13)) AND (LNNVL("T2"."C1"=103) OR LNNVL("T2"."C2"=13))
Transfer optimizer annotations for T2[T2]
Final cost for query block SEL$1_3 (#0) - All Rows Plan:
  Best join order: 3
  Cost: 10.003021  Degree: 1  Card: 3.000000  Bytes: 66.000000
  Resc: 10.003021  Resc_io: 10.000000  Resc_cpu: 89450
  Resp: 10.003021  Resp_io: 10.000000  Resc_cpu: 89450
kkoqbc-subheap (delete addr=0x7f2bb11e9750, in-use=1075936, alloc=1095168)
kkoqbc-end:
        :
    call(in-use=256096, alloc=1367928), compile(in-use=458744, alloc=458992), execution(in-use=565464, alloc=569008)

kkoqbc: finish optimizing query block SEL$1 (#0)
CBRID: T2 @ SEL$1 - no blocking operation found
CBRID: T1 @ SEL$1 - no blocking operation found
CBRID: L @ SEL$1 - no blocking operation found
CBRID: T1 @ SEL$1 - no blocking operation found
CBRID: L @ SEL$1 - no blocking operation found
CBRID: T2 @ SEL$1 - no blocking operation found
CBRID: T1 @ SEL$1 - no blocking operation found
CBRID: L @ SEL$1 - no blocking operation found
CBRID: T2 @ SEL$1 - no blocking operation found
apadrv-end
          :
    call(in-use=256096, alloc=1367928), compile(in-use=460648, alloc=463008), execution(in-use=569520, alloc=573064)


CBRID: L @ SEL$1 NLJBatching allocation - Failure - not a columnar organized table
CBRID: L @ SEL$1 TableLookup allocation - Failure - bug-fix control
CBRID: L @ SEL$1 TableLookup allocation - Failure - bug-fix control
CBRID: L @ SEL$1 TableLookup allocation - Failure - bug-fix control
CBRID: T2 @ SEL$1 NLJBatching allocation - Failure - not a columnar organized table
CBRID: T2 @ SEL$1 TableLookup allocation - Failure - bug-fix control
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
kkeCostToTime: using io calibrate stats maxpmbps=200(MB/s) 
 block_size=8192 mb_io_count=1 mb_io_size=8192 (bytes) 
 tot_io_size=0(MB) time=0(ms)
Starting SQL statement dump

user_id=105 user_name=PDBADMIN module=SQLcl action=
sql_id=2zdcf8df6cnzj plan_hash_value=673786860 problem_type=3 command_type=3
----- Current SQL Statement for this session (sql_id=2zdcf8df6cnzj) -----
explain plan for SELECT /*+ OPT_PARAM('_optimizer_cbqt_or_expansion' 'off') */ null FROM l, t1, t2 WHERE  
(  ( t1.m = :v1 AND t2.c1 BETWEEN 11 AND 12)       OR 
   ( t1.m = :v2 AND t2.c1 = 103 AND t2.c2 = 13  )   )  AND 
    ( l.id = t1.id AND l.id2 = t2.id )
sql_text_length=261
sql=explain plan for SELECT /*+ OPT_PARAM('_optimizer_cbqt_or_expansion' 'off') */ null FROM l, t1, t2 WHERE  
(  ( t1.m = :v1 AND t2.c1 BETWEEN 11 AND 12)       OR 
   ( t1.m = :v2 AND t2.c1 = 103 AND t2.c2 = 13  )   )  AND 
    ( l.id = t1.id AND l.id2 = t2.id )
----- Explain Plan Dump -----
----- Plan Table -----
 
============
Plan Table
============
------------------------------------------------------+-----------------------------------+
| Id  | Operation                        | Name       | Rows  | Bytes | Cost  | Time      |
------------------------------------------------------+-----------------------------------+
| 0   | SELECT STATEMENT                 |            |       |       |    10 |           |
| 1   |  CONCATENATION                   |            |       |       |       |           |
| 2   |   NESTED LOOPS                   |            |     1 |    22 |     4 |  00:00:01 |
| 3   |    NESTED LOOPS                  |            |     1 |    22 |     4 |  00:00:01 |
| 4   |     NESTED LOOPS                 |            |     1 |    16 |     3 |  00:00:01 |
| 5   |      INDEX RANGE SCAN            | T2_C1_C2_ID|     1 |    10 |     2 |  00:00:01 |
| 6   |      INLIST ITERATOR             |            |       |       |       |           |
| 7   |       INDEX RANGE SCAN           | T1_M_ID    |     1 |     6 |     1 |  00:00:01 |
| 8   |     INDEX UNIQUE SCAN            | L_ID       |     1 |       |     0 |           |
| 9   |    TABLE ACCESS BY INDEX ROWID   | L          |     1 |     6 |     1 |  00:00:01 |
| 10  |   NESTED LOOPS                   |            |     1 |    22 |     3 |  00:00:01 |
| 11  |    NESTED LOOPS                  |            |     1 |    12 |     2 |  00:00:01 |
| 12  |     INDEX RANGE SCAN             | T1_M_ID    |     1 |     6 |     1 |  00:00:01 |
| 13  |     TABLE ACCESS BY INDEX ROWID  | L          |     1 |     6 |     1 |  00:00:01 |
| 14  |      INDEX UNIQUE SCAN           | L_ID       |     1 |       |     0 |           |
| 15  |    INDEX RANGE SCAN              | T2_C1_C2_ID|     1 |    10 |     1 |  00:00:01 |
| 16  |   NESTED LOOPS                   |            |     1 |    22 |     3 |  00:00:01 |
| 17  |    NESTED LOOPS                  |            |     1 |    22 |     3 |  00:00:01 |
| 18  |     NESTED LOOPS                 |            |     1 |    12 |     2 |  00:00:01 |
| 19  |      INDEX RANGE SCAN            | T1_M_ID    |     1 |     6 |     1 |  00:00:01 |
| 20  |      TABLE ACCESS BY INDEX ROWID | L          |     1 |     6 |     1 |  00:00:01 |
| 21  |       INDEX UNIQUE SCAN          | L_ID       |     1 |       |     0 |           |
| 22  |     INDEX UNIQUE SCAN            | T2_ID      |     1 |       |     0 |           |
| 23  |    TABLE ACCESS BY INDEX ROWID   | T2         |     1 |    10 |     1 |  00:00:01 |
------------------------------------------------------+-----------------------------------+
Query Block Name / Object Alias (identified by operation id):
------------------------------------------------------------
 1 - SEL$1                
 5 - SEL$1_1              / "T2"@"SEL$1"
 7 - SEL$1_1              / "T1"@"SEL$1"
 8 - SEL$1_1              / "L"@"SEL$1"
 9 - SEL$1_1              / "L"@"SEL$1"
12 - SEL$1_2              / "T1"@"SEL$1_2"
13 - SEL$1_2              / "L"@"SEL$1_2"
14 - SEL$1_2              / "L"@"SEL$1_2"
15 - SEL$1_2              / "T2"@"SEL$1_2"
19 - SEL$1_3              / "T1"@"SEL$1_3"
20 - SEL$1_3              / "L"@"SEL$1_3"
21 - SEL$1_3              / "L"@"SEL$1_3"
22 - SEL$1_3              / "T2"@"SEL$1_3"
23 - SEL$1_3              / "T2"@"SEL$1_3"
------------------------------------------------------------
Predicate Information:
----------------------
5 - access("T2"."C1"=103 AND "T2"."C2"=13)
7 - access(("T1"."M"=TO_NUMBER(:V1) OR "T1"."M"=TO_NUMBER(:V2)))
7 - filter((("T1"."M"=TO_NUMBER(:V1) AND "T2"."C1">=11 AND "T2"."C1"<=12) OR ("T1"."M"=TO_NUMBER(:V2) AND "T2"."C1"=103 AND "T2"."C2"=13)))
8 - access("L"."ID"="T1"."ID")
9 - filter("L"."ID2"="T2"."ID")
12 - access("T1"."M"=TO_NUMBER(:V2))
12 - filter(("T1"."M"=TO_NUMBER(:V1) OR "T1"."M"=TO_NUMBER(:V2)))
14 - access("L"."ID"="T1"."ID")
15 - access("T2"."C1"=103 AND "T2"."C2"=13 AND "L"."ID2"="T2"."ID")
15 - filter(("T2"."C1">=11 AND "T2"."C1"<=12 AND (LNNVL("T2"."C1"=103) OR LNNVL("T2"."C2"=13))))
19 - access("T1"."M"=TO_NUMBER(:V1))
19 - filter(("T1"."M"=TO_NUMBER(:V1) OR "T1"."M"=TO_NUMBER(:V2)))
21 - access("L"."ID"="T1"."ID")
22 - access("L"."ID2"="T2"."ID")
23 - filter(("T2"."C1">=11 AND "T2"."C1">=11 AND "T2"."C1"<=12 AND "T2"."C1"<=12 AND (LNNVL("T1"."M"=TO_NUMBER(:V2)) OR LNNVL("T2"."C1"=103) OR LNNVL("T2"."C2"=13)) AND (LNNVL("T2"."C1"=103) OR LNNVL("T2"."C2"=13))))
 
Content of other_xml column
===========================
  has_user_tab   : yes
  db_version     : 19.0.0.0
  parse_schema   : PDBADMIN
  plan_hash_full : 2457428410
  plan_hash      : 673786860
  plan_hash_2    : 2457428410
-----------------
Optimizer Metrics
-----------------
<stats type="compilation"><stat name="bg">5</stat></stats>
---------------------
QUERY BLOCK REGISTRY
---------------------
<qb_registry><q o="2" f="y"><n><![CDATA[SEL$1]]></n><f><h><t><![CDATA[L]]></t><s><![CDATA[SEL$1]]></s></h><h><t><![CDATA[T1]]></t><s><![CDATA[SEL$1]]></s></h><h><t><![CDATA[T2]]></t><s><![CDATA[SEL$1]]></s></h></f></q><q o="11" f="y"><n><![CDATA[SEL$1_2]]></n><p><![CDATA[SEL$1]]></p><i><o><t>BN</t><v><![CDATA[2]]></v></o></i><f><h><t><![CDATA[L]]></t><s><![CDATA[SEL$1_2]]></s></h><h><t><![CDATA[T1]]></t><s><![CDATA[SEL$1_2]]></s></h><h><t><![CDATA[T2]]></t><s><![CDATA[SEL$1_2]]></s></h></f></q><q o="11" f="y" h="y"><n><![CDATA[SEL$1_1]]></n><p><![CDATA[SEL$1]]></p><i><o><t>BN</t><v><![CDATA[1]]></v></o></i><f><h><t><![CDATA[L]]></t><s><![CDATA[SEL$1]]></s></h><h><t><![CDATA[T1]]></t><s><![CDATA[SEL$1]]></s></h><h><t><![CDATA[T2]]></t><s><![CDATA[SEL$1]]></s></h></f></q><q o="11" f="y"><n><![CDATA[SEL$1_3]]></n><p><![CDATA[SEL$1]]></p><i><o><t>BN</t><v><![CDATA[3]]></v></o></i><f><h><t><![CDATA[L]]></t><s><![CDATA[SEL$1_3]]></s></h><h><t><![CDATA[T1]]></t><s><![CDATA[SEL$1_3]]></s></h><h><t><![CDATA[T2]]></t><s><![CDATA[SEL$1_3]]></s></h></f></q></qb_registry>
  Outline Data:
  /*+
    BEGIN_OUTLINE_DATA
      IGNORE_OPTIM_EMBEDDED_HINTS
      OPTIMIZER_FEATURES_ENABLE('19.1.0')
      DB_VERSION('19.1.0')
      OPT_PARAM('_optimizer_cbqt_or_expansion' 'off')
      ALL_ROWS
      OUTLINE_LEAF(@"SEL$1")
      OUTLINE_LEAF(@"SEL$1_1")
      USE_CONCAT(@"SEL$1" 8 OR_PREDICATES(0 36))
      OUTLINE_LEAF(@"SEL$1_2")
      OUTLINE_LEAF(@"SEL$1_3")
      INDEX(@"SEL$1_1" "T2"@"SEL$1" ("T2"."C1" "T2"."C2" "T2"."ID"))
      INDEX(@"SEL$1_1" "T1"@"SEL$1" ("T1"."M" "T1"."ID"))
      INDEX(@"SEL$1_1" "L"@"SEL$1" ("L"."ID"))
      INDEX(@"SEL$1_2" "T1"@"SEL$1_2" ("T1"."M" "T1"."ID"))
      INDEX_RS_ASC(@"SEL$1_2" "L"@"SEL$1_2" ("L"."ID"))
      INDEX(@"SEL$1_2" "T2"@"SEL$1_2" ("T2"."C1" "T2"."C2" "T2"."ID"))
      INDEX(@"SEL$1_3" "T1"@"SEL$1_3" ("T1"."M" "T1"."ID"))
      INDEX_RS_ASC(@"SEL$1_3" "L"@"SEL$1_3" ("L"."ID"))
      INDEX(@"SEL$1_3" "T2"@"SEL$1_3" ("T2"."ID"))
      LEADING(@"SEL$1_1" "T2"@"SEL$1" "T1"@"SEL$1" "L"@"SEL$1")
      LEADING(@"SEL$1_2" "T1"@"SEL$1_2" "L"@"SEL$1_2" "T2"@"SEL$1_2")
      LEADING(@"SEL$1_3" "T1"@"SEL$1_3" "L"@"SEL$1_3" "T2"@"SEL$1_3")
      USE_NL(@"SEL$1_1" "T1"@"SEL$1")
      USE_NL(@"SEL$1_1" "L"@"SEL$1")
      NLJ_BATCHING(@"SEL$1_1" "L"@"SEL$1")
      USE_NL(@"SEL$1_2" "L"@"SEL$1_2")
      USE_NL(@"SEL$1_2" "T2"@"SEL$1_2")
      USE_NL(@"SEL$1_3" "L"@"SEL$1_3")
      USE_NL(@"SEL$1_3" "T2"@"SEL$1_3")
      NLJ_BATCHING(@"SEL$1_3" "T2"@"SEL$1_3")
    END_OUTLINE_DATA
  */
  Hint Report:
    Statement:
      OPT_PARAM('_optimizer_cbqt_or_expansion' 'off')
  End Hint Report
 
Optimizer state dump:
Compilation Environment Dump
optimizer_mode_hinted               = false
optimizer_features_hinted           = 0.0.0
parallel_execution_enabled          = true
parallel_query_forced_dop           = 0
parallel_dml_forced_dop             = 0
parallel_ddl_forced_degree          = 0
parallel_ddl_forced_instances       = 0
_query_rewrite_fudge                = 90
optimizer_features_enable           = 19.1.0
_optimizer_search_limit             = 5
cpu_count                           = 8
active_instance_count               = 1
parallel_threads_per_cpu            = 1
hash_area_size                      = 131072
bitmap_merge_area_size              = 1048576
sort_area_size                      = 65536
sort_area_retained_size             = 0
_sort_elimination_cost_ratio        = 0
_optimizer_block_size               = 8192
_sort_multiblock_read_count         = 2
_hash_multiblock_io_count           = 0
_db_file_optimizer_read_count       = 8
_optimizer_max_permutations         = 2000
pga_aggregate_target                = 524288 KB
_pga_max_size                       = 204800 KB
_query_rewrite_maxdisjunct          = 257
_smm_auto_min_io_size               = 56 KB
_smm_auto_max_io_size               = 248 KB
_smm_min_size                       = 524 KB
_smm_max_size_static                = 102400 KB
_smm_px_max_size_static             = 262144 KB
_cpu_to_io                          = 0
_optimizer_undo_cost_change         = 19.1.0
parallel_query_mode                 = enabled
_enable_parallel_dml                = disabled
parallel_ddl_mode                   = enabled
optimizer_mode                      = all_rows
sqlstat_enabled                     = false
_optimizer_percent_parallel         = 101
_always_anti_join                   = choose
_always_semi_join                   = choose
_optimizer_mode_force               = true
_partition_view_enabled             = true
_always_star_transformation         = false
_query_rewrite_or_error             = false
_hash_join_enabled                  = true
cursor_sharing                      = exact
_b_tree_bitmap_plans                = true
star_transformation_enabled         = false
_optimizer_cost_model               = choose
_new_sort_cost_estimate             = true
_complex_view_merging               = true
_unnest_subquery                    = true
_eliminate_common_subexpr           = true
_pred_move_around                   = true
_convert_set_to_join                = false
_push_join_predicate                = true
_push_join_union_view               = true
_fast_full_scan_enabled             = true
_optim_enhance_nnull_detection      = true
_parallel_broadcast_enabled         = true
_px_broadcast_fudge_factor          = 100
_ordered_nested_loop                = true
_no_or_expansion                    = false
optimizer_index_cost_adj            = 100
optimizer_index_caching             = 0
_system_index_caching               = 0
_disable_datalayer_sampling         = false
query_rewrite_enabled               = true
query_rewrite_integrity             = enforced
_query_cost_rewrite                 = true
_query_rewrite_2                    = true
_query_rewrite_1                    = true
_query_rewrite_expression           = true
_query_rewrite_jgmigrate            = true
_query_rewrite_fpc                  = true
_query_rewrite_drj                  = false
_full_pwise_join_enabled            = true
_partial_pwise_join_enabled         = true
_left_nested_loops_random           = true
_improved_row_length_enabled        = true
_index_join_enabled                 = true
_enable_type_dep_selectivity        = true
_improved_outerjoin_card            = true
_optimizer_adjust_for_nulls         = true
_optimizer_degree                   = 0
_use_column_stats_for_function      = true
_subquery_pruning_enabled           = true
_subquery_pruning_mv_enabled        = false
_or_expand_nvl_predicate            = true
_like_with_bind_as_equality         = false
_table_scan_cost_plus_one           = true
_cost_equality_semi_join            = true
_default_non_equality_sel_check     = true
_new_initial_join_orders            = true
_oneside_colstat_for_equijoins      = true
_optim_peek_user_binds              = true
_minimal_stats_aggregation          = true
_force_temptables_for_gsets         = false
workarea_size_policy                = auto
_smm_auto_cost_enabled              = true
_gs_anti_semi_join_allowed          = true
_optim_new_default_join_sel         = true
optimizer_dynamic_sampling          = 2
_pre_rewrite_push_pred              = true
_optimizer_new_join_card_computation = true
_union_rewrite_for_gs               = yes_gset_mvs
_generalized_pruning_enabled        = true
_optim_adjust_for_part_skews        = true
_force_datefold_trunc               = false
statistics_level                    = typical
_optimizer_system_stats_usage       = true
skip_unusable_indexes               = true
_remove_aggr_subquery               = true
_optimizer_push_down_distinct       = 0
_dml_monitoring_enabled             = true
_optimizer_undo_changes             = false
_predicate_elimination_enabled      = true
_nested_loop_fudge                  = 100
_project_view_columns               = true
_local_communication_costing_enabled = true
_local_communication_ratio          = 50
_query_rewrite_vop_cleanup          = true
_slave_mapping_enabled              = true
_optimizer_cost_based_transformation = linear
_optimizer_mjc_enabled              = true
_right_outer_hash_enable            = true
_spr_push_pred_refspr               = true
_optimizer_cache_stats              = false
_optimizer_cbqt_factor              = 50
_optimizer_squ_bottomup             = true
_fic_area_size                      = 131072
_optimizer_skip_scan_enabled        = true
_optimizer_cost_filter_pred         = false
_optimizer_sortmerge_join_enabled   = true
_optimizer_join_sel_sanity_check    = true
_mmv_query_rewrite_enabled          = true
_bt_mmv_query_rewrite_enabled       = true
_add_stale_mv_to_dependency_list    = true
_distinct_view_unnesting            = false
_optimizer_dim_subq_join_sel        = true
_optimizer_disable_strans_sanity_checks = 0
_optimizer_compute_index_stats      = true
_push_join_union_view2              = true
optimizer_ignore_hints              = false
_optimizer_random_plan              = 0
_query_rewrite_setopgrw_enable      = true
_optimizer_correct_sq_selectivity   = true
_disable_function_based_index       = false
_optimizer_join_order_control       = 3
_optimizer_cartesian_enabled        = true
_optimizer_starplan_enabled         = true
_extended_pruning_enabled           = true
_optimizer_push_pred_cost_based     = true
_optimizer_null_aware_antijoin      = true
_optimizer_extend_jppd_view_types   = true
_sql_model_unfold_forloops          = run_time
_enable_dml_lock_escalation         = false
_bloom_filter_enabled               = true
_update_bji_ipdml_enabled           = 0
_optimizer_extended_cursor_sharing  = udo
_dm_max_shared_pool_pct             = 1
_optimizer_cost_hjsmj_multimatch    = true
_optimizer_transitivity_retain      = true
_px_pwg_enabled                     = true
optimizer_secure_view_merging       = true
_optimizer_join_elimination_enabled = true
flashback_table_rpi                 = non_fbt
_optimizer_cbqt_no_size_restriction = true
_optimizer_enhanced_filter_push     = true
_optimizer_filter_pred_pullup       = true
_rowsrc_trace_level                 = 0
_simple_view_merging                = true
_optimizer_rownum_pred_based_fkr    = true
_optimizer_better_inlist_costing    = all
_optimizer_self_induced_cache_cost  = false
_optimizer_min_cache_blocks         = 10
_optimizer_or_expansion             = depth
_optimizer_order_by_elimination_enabled = true
_optimizer_outer_to_anti_enabled    = true
_selfjoin_mv_duplicates             = true
_dimension_skip_null                = true
_force_rewrite_enable               = false
_optimizer_star_tran_in_with_clause = true
_optimizer_complex_pred_selectivity = true
_optimizer_connect_by_cost_based    = true
_gby_hash_aggregation_enabled       = true
_globalindex_pnum_filter_enabled    = true
_px_minus_intersect                 = true
_fix_control_key                    = 0
_force_slave_mapping_intra_part_loads = false
_force_tmp_segment_loads            = false
_query_mmvrewrite_maxpreds          = 10
_query_mmvrewrite_maxintervals      = 5
_query_mmvrewrite_maxinlists        = 5
_query_mmvrewrite_maxdmaps          = 10
_query_mmvrewrite_maxcmaps          = 20
_query_mmvrewrite_maxregperm        = 512
_query_mmvrewrite_maxqryinlistvals  = 500
_disable_parallel_conventional_load = false
_trace_virtual_columns              = false
_replace_virtual_columns            = true
_virtual_column_overload_allowed    = true
_kdt_buffering                      = true
_first_k_rows_dynamic_proration     = true
_optimizer_sortmerge_join_inequality = true
_optimizer_aw_stats_enabled         = true
_bloom_pruning_enabled              = true
result_cache_mode                   = MANUAL
_px_ual_serial_input                = true
_optimizer_skip_scan_guess          = false
_enable_row_shipping                = true
_row_shipping_threshold             = 100
_row_shipping_explain               = false
transaction_isolation_level         = read_commited
_optimizer_distinct_elimination     = true
_optimizer_multi_level_push_pred    = true
_optimizer_group_by_placement       = true
_optimizer_rownum_bind_default      = 10
_enable_query_rewrite_on_remote_objs = true
_optimizer_extended_cursor_sharing_rel = simple
_optimizer_adaptive_cursor_sharing  = true
_direct_path_insert_features        = 0
_optimizer_improve_selectivity      = true
optimizer_use_pending_statistics    = false
_optimizer_enable_density_improvements = true
_optimizer_aw_join_push_enabled     = true
_optimizer_connect_by_combine_sw    = true
_enable_pmo_ctas                    = 0
_optimizer_native_full_outer_join   = force
_bloom_predicate_enabled            = true
_optimizer_enable_extended_stats    = true
_is_lock_table_for_ddl_wait_lock    = 0
_pivot_implementation_method        = choose
optimizer_capture_sql_plan_baselines = false
optimizer_use_sql_plan_baselines    = true
_optimizer_star_trans_min_cost      = 0
_optimizer_star_trans_min_ratio     = 0
_with_subquery                      = OPTIMIZER
_optimizer_fkr_index_cost_bias      = 10
_optimizer_use_subheap              = true
parallel_degree_policy              = manual
parallel_degree                     = 0
parallel_min_time_threshold         = 10
_parallel_time_unit                 = 10
_optimizer_or_expansion_subheap     = true
_optimizer_free_transformation_heap = true
_optimizer_reuse_cost_annotations   = true
_result_cache_auto_size_threshold   = 100
_result_cache_auto_time_threshold   = 1000
_optimizer_nested_rollup_for_gset   = 100
_nlj_batching_enabled               = 1
parallel_query_default_dop          = 0
is_recur_flags                      = 0
optimizer_use_invisible_indexes     = false
flashback_data_archive_internal_cursor = 0
_optimizer_extended_stats_usage_control = 192
_parallel_syspls_obey_force         = true
cell_offload_processing             = true
_rdbms_internal_fplib_enabled       = false
db_file_multiblock_read_count       = 128
_bloom_folding_enabled              = true
_mv_generalized_oj_refresh_opt      = true
cell_offload_compaction             = ADAPTIVE
cell_offload_plan_display           = AUTO
_bloom_predicate_offload            = true
_bloom_filter_size                  = 0
_bloom_pushing_max                  = 512
parallel_degree_limit               = 65535
parallel_force_local                = false
parallel_max_degree                 = 8
total_cpu_count                     = 8
_optimizer_coalesce_subqueries      = true
_optimizer_fast_pred_transitivity   = true
_optimizer_fast_access_pred_analysis = true
_optimizer_unnest_disjunctive_subq  = true
_optimizer_unnest_corr_set_subq     = true
_optimizer_distinct_agg_transform   = true
_aggregation_optimization_settings  = 0
_optimizer_connect_by_elim_dups     = true
_optimizer_eliminate_filtering_join = true
_connect_by_use_union_all           = true
dst_upgrade_insert_conv             = true
advanced_queuing_internal_cursor    = 0
_optimizer_unnest_all_subqueries    = true
parallel_autodop                    = 0
parallel_ddldml                     = 0
_parallel_cluster_cache_policy      = adaptive
_parallel_scalability               = 50
iot_internal_cursor                 = 0
_optimizer_instance_count           = 0
_optimizer_connect_by_cb_whr_only   = false
_suppress_scn_chk_for_cqn           = nosuppress_1466
_optimizer_join_factorization       = true
_optimizer_use_cbqt_star_transformation = true
_optimizer_table_expansion          = true
_and_pruning_enabled                = true
_deferred_constant_folding_mode     = DEFAULT
_optimizer_distinct_placement       = true
partition_pruning_internal_cursor   = 0
parallel_hinted                     = none
_sql_compatibility                  = 0
_optimizer_use_feedback             = true
_optimizer_try_st_before_jppd       = true
_dml_frequency_tracking             = false
_optimizer_interleave_jppd          = true
kkb_drop_empty_segments             = 0
_px_partition_scan_enabled          = true
_px_partition_scan_threshold        = 64
_optimizer_false_filter_pred_pullup = true
_bloom_minmax_enabled               = true
only_move_row                       = 0
_optimizer_enable_table_lookup_by_nl = true
parallel_execution_message_size     = 16384
_px_loc_msg_cost                    = 1000
_px_net_msg_cost                    = 10000
_optimizer_generate_transitive_pred = true
_optimizer_cube_join_enabled        = true
_optimizer_filter_pushdown          = true
deferred_segment_creation           = true
_optimizer_outer_join_to_inner      = true
_allow_level_without_connect_by     = false
_max_rwgs_groupings                 = 8192
_optimizer_hybrid_fpwj_enabled      = true
_px_replication_enabled             = true
ilm_filter                          = 0
_optimizer_partial_join_eval        = true
_px_concurrent                      = true
_px_object_sampling_enabled         = true
_px_back_to_parallel                = OFF
_optimizer_unnest_scalar_sq         = true
_optimizer_full_outer_join_to_outer = true
_px_filter_parallelized             = true
_px_filter_skew_handling            = true
_zonemap_use_enabled                = true
_zonemap_control                    = 0
_optimizer_multi_table_outerjoin    = true
_px_groupby_pushdown                = force
_partition_advisor_srs_active       = true
_optimizer_ansi_join_lateral_enhance = true
_px_parallelize_expression          = true
_fast_index_maintenance             = true
_optimizer_ansi_rearchitecture      = true
_optimizer_gather_stats_on_load     = true
ilm_access_tracking                 = 0
ilm_dml_timestamp                   = 0
_px_adaptive_dist_method            = choose
_px_adaptive_dist_method_threshold  = 0
_optimizer_batch_table_access_by_rowid = true
optimizer_adaptive_reporting_only   = false
_optimizer_ads_max_table_count      = 0
_optimizer_ads_time_limit           = 0
_optimizer_ads_use_result_cache     = true
_px_wif_dfo_declumping              = choose
_px_wif_extend_distribution_keys    = true
_px_join_skew_handling              = true
_px_join_skew_ratio                 = 10
_px_join_skew_minfreq               = 30
CLI_internal_cursor                 = 0
_parallel_fault_tolerance_enabled   = false
_parallel_fault_tolerance_threshold = 3
_px_partial_rollup_pushdown         = adaptive
_px_single_server_enabled           = true
_optimizer_dsdir_usage_control      = 0
_px_cpu_autodop_enabled             = true
_px_cpu_process_bandwidth           = 200
_sql_hvshare_threshold              = 0
_px_tq_rowhvs                       = true
_optimizer_use_gtt_session_stats    = true
_optimizer_proc_rate_level          = basic
_px_hybrid_TSM_HWMB_load            = true
_optimizer_use_histograms           = true
PMO_altidx_rebuild                  = 0
_cell_offload_expressions           = true
_cell_materialize_virtual_columns   = true
_cell_materialize_all_expressions   = false
_rowsets_enabled                    = true
_rowsets_target_maxsize             = 524288
_rowsets_max_rows                   = 256
_use_hidden_partitions              = 0
_px_load_monitor_threshold          = 10000
_px_numa_support_enabled            = false
total_processor_group_count         = 1
_adaptive_window_consolidator_enabled = true
_optimizer_strans_adaptive_pruning  = true
_bloom_rm_filter                    = false
_optimizer_null_accepting_semijoin  = true
_long_varchar_allow_IOT             = 0
_parallel_ctas_enabled              = true
_cell_offload_complex_processing    = true
_optimizer_performance_feedback     = off
_optimizer_proc_rate_source         = DEFAULT
_hashops_prefetch_size              = 4
_cell_offload_sys_context           = true
_multi_commit_global_index_maint    = 0
_stat_aggs_one_pass_algorithm       = false
_dbg_scan                           = 0
_oltp_comp_dbg_scan                 = 0
_arch_comp_dbg_scan                 = 0
_optimizer_gather_feedback          = true
_upddel_dba_hash_mask_bits          = 0
_px_pwmr_enabled                    = true
_px_cdb_view_enabled                = true
_bloom_sm_enabled                   = true
_optimizer_cluster_by_rowid         = true
_optimizer_cluster_by_rowid_control = 129
_partition_cdb_view_enabled         = true
_common_data_view_enabled           = true
_pred_push_cdb_view_enabled         = true
_rowsets_cdb_view_enabled           = true
_distinct_agg_optimization_gsets    = choose
_array_cdb_view_enabled             = true
_optimizer_adaptive_plan_control    = 0
_optimizer_adaptive_random_seed     = 0
_optimizer_cbqt_or_expansion        = on
_inmemory_dbg_scan                  = 0
_gby_vector_aggregation_enabled     = true
_optimizer_vector_transformation    = true
_optimizer_vector_fact_dim_ratio    = 10
_key_vector_max_size                = 0
_key_vector_predicate_enabled       = true
_key_vector_predicate_threshold     = 0
_vector_operations_control          = 0
_optimizer_vector_min_fact_rows     = 10000000
parallel_dblink                     = 0
_px_scalable_invdist                = true
_key_vector_offload                 = predicate
_optimizer_aggr_groupby_elim        = true
_optimizer_reduce_groupby_key       = true
_vector_serialize_temp_threshold    = 1000
_always_vector_transformation       = false
_optimizer_cluster_by_rowid_batched = true
_object_link_fixed_enabled          = true
optimizer_inmemory_aware            = true
_optimizer_inmemory_table_expansion = true
_optimizer_inmemory_gen_pushable_preds = true
_optimizer_inmemory_autodop         = true
_optimizer_inmemory_access_path     = true
_optimizer_inmemory_bloom_filter    = true
_parallel_inmemory_min_time_threshold = 1
_parallel_inmemory_time_unit        = 1
_rc_sys_obj_enabled                 = true
_optimizer_nlj_hj_adaptive_join     = true
_indexable_con_id                   = true
_bloom_serial_filter                = on
inmemory_force                      = default
inmemory_query                      = enable
_inmemory_query_scan                = true
_inmemory_query_fetch_by_rowid      = false
_inmemory_pruning                   = on
_px_autodop_pq_overhead             = true
_px_external_table_default_stats    = true
_optimizer_key_vector_aggr_factor   = 75
_optimizer_vector_cost_adj          = 100
_cdb_cross_container                = 65535
_cdb_view_parallel_degree           = 65535
_optimizer_hll_entry                = 4096
_px_cdb_view_join_enabled           = true
inmemory_size                       = 0
_external_table_smart_scan          = hadoop_only
_optimizer_inmemory_minmax_pruning  = true
_approx_cnt_distinct_gby_pushdown   = choose
_approx_cnt_distinct_optimization   = 0
_optimizer_ads_use_partial_results  = true
_query_execution_time_limit         = 0
_optimizer_inmemory_cluster_aware_dop = true
_optimizer_db_blocks_buffers        = 0 KB
_query_rewrite_use_on_query_computation = true
_px_scalable_invdist_mcol           = true
_optimizer_bushy_join               = off
_optimizer_bushy_fact_dim_ratio     = 20
_optimizer_bushy_fact_min_size      = 100000
_optimizer_bushy_cost_factor        = 100
_rmt_for_table_redef_enabled        = true
_optimizer_eliminate_subquery       = true
_sqlexec_cache_aware_hash_join_enabled = true
_zonemap_usage_tracking             = true
_sqlexec_hash_based_distagg_enabled = false
_sqlexec_disable_hash_based_distagg_tiv = false
_sqlexec_hash_based_distagg_ssf_enabled = true
_sqlexec_distagg_optimization_settings = 0
approx_for_aggregation              = false
approx_for_count_distinct           = false
_optimizer_union_all_gsets          = true
_rowsets_use_encoding               = true
_rowsets_max_enc_rows               = 64
_optimizer_enhanced_join_elimination = true
_optimizer_multicol_join_elimination = true
_key_vector_create_pushdown_threshold = 20000
_optimizer_enable_plsql_stats       = true
_recursive_with_parallel            = true
_recursive_with_branch_iterations   = 7
_px_dist_agg_partial_rollup_pushdown = adaptive
_px_adaptive_dist_bypass_enabled    = true
_enable_view_pdb                    = true
_optimizer_key_vector_pruning_enabled = true
_pwise_distinct_enabled             = true
_recursive_with_using_temp_table    = false
_partition_read_only                = true
_sql_alias_scope                    = true
_cdb_view_no_skip_migrate           = false
_approx_perc_sampling_err_rate      = 2
_sqlexec_encoding_aware_hj_enabled  = true
rim_node_exist                      = 0
_enable_containers_subquery         = true
_force_containers_subquery          = false
_cell_offload_vector_groupby        = true
_vector_encoding_mode               = manual
_ds_xt_split_count                  = 1
_ds_sampling_method                 = PROGRESSIVE
_optimizer_ads_use_spd_cache        = true
_optimizer_use_table_scanrate       = HADOOP_ONLY
_optimizer_use_xt_rowid             = true
_xt_sampling_scan_granules          = on
_recursive_with_control             = 0
_sqlexec_use_rwo_aware_expr_analysis = true
_optimizer_band_join_aware          = true
_optimizer_vector_base_dim_fact_factor = 200
approx_for_percentile               = none
_approx_percentile_optimization     = 0
_projection_pushdown                = true
_px_object_sampling                 = 200
_optimizer_adaptive_plans_continuous = false
_optimizer_adaptive_plans_iterative = false
_ds_enable_view_sampling            = true
_optimizer_generate_ptf_implied_preds = true
_optimizer_inmemory_use_stored_stats = AUTO
_cdb_special_old_xplan              = true
uniaud_internal_cursor              = 0
_kd_dbg_control                     = 0
_mv_access_compute_fresh_data       = on
_bloom_filter_ratio                 = 35
_optimizer_control_shard_qry_processing = 65528
containers_parallel_degree          = 65535
sql_from_coordinator                = 0
_xt_sampling_scan_granules_min_granules = 1
_in_memory_cdt                      = LIMITED
_in_memory_cdt_maxpx                = 4
_px_partition_load_dist_threshold   = 64
_px_adaptive_dist_bypass_optimization = 1
_optimizer_interleave_or_expansion  = true
optimizer_adaptive_plans            = true
optimizer_adaptive_statistics       = false
_optimizer_use_feedback_for_join    = false
_optimizer_ads_for_pq               = false
_px_join_skewed_values_count        = 0
optimizer_ignore_parallel_hints     = false
parallel_min_degree                 = 1
_px_nlj_bcast_rr_threshold          = 10
_optimizer_gather_stats_on_load_all = false
_optimizer_gather_stats_on_load_hist = false
_optimizer_allow_all_access_paths   = true
_key_vector_double_enabled          = true
_key_vector_timestamp_enabled       = true
_optimizer_answering_query_using_stats = false
_disable_dblink_optim               = true
_cell_offload_hybrid_processing     = true
_read_optimized_table_lookup        = true
_optimizer_key_vector_payload       = true
_optimizer_vector_fact_payload_ratio = 20
_bloom_pruning_setops_enabled       = true
_bloom_filter_setops_enabled        = true
_key_vector_shared_dgk_ht           = true
_px_pwise_wif_enabled               = true
_sqlexec_reorder_wif_enabled        = true
_px_partition_skew_threshold        = 80
_sqlexec_pwiseops_with_sqlfuncs_enabled = true
_sqlexec_pwiseops_with_binds_enabled = true
_px_shared_hash_join                = false
_px_reuse_server_groups             = multi
_px_join_skew_null_handling         = true
_px_join_skew_use_histogram         = true
_px_join_skew_sampling_time_limit   = 50
_px_join_skew_sampling_percent      = 0
_cdb_view_no_skip_restricted        = false
_inmemory_external_table            = true
_sqlexec_use_kgghash3               = true
_cell_offload_vector_groupby_force  = false
_hcs_enable_pred_push               = true
parallel_dop_doubled                = 0
_optimizer_gather_stats_on_load_index = true
_con_map_sql_enforcement            = true
_uniq_cons_sql_enforcement          = true
_ref_cons_sql_enforcement           = true
_is_lock_table_for_split_merge      = 0
_cell_offload_vector_groupby_fact_key = true
_px_scalable_gby_invdist            = true
_px_dynamic_granules                = true
_px_dynamic_granules_adjust         = 10
_px_hybrid_partition_execution_enabled = true
_px_hybrid_partition_skew_threshold = 10
_optimizer_key_vector_use_max_size  = 1048576
_cell_offload_vector_groupby_withnojoin = true
_key_vector_join_pushdown_enabled   = true
_cell_offload_grand_total           = true
_optimizer_key_vector_payload_dim_aggs = false
_optimizer_use_auto_indexes         = AUTO
_optimizer_use_stats_on_conventional_dml = true
_optimizer_gather_stats_on_conventional_dml = true
_optimizer_use_stats_on_conventional_config = 0
_skip_pset_col_chk                  = 0
_nls_binary                         = false
_optimizer_quarantine_sql           = true
_optimizer_gather_stats_on_conventional_config = 0
_nls_forced_binary                  = 0
_utl32k_mv_query                    = false
_optimizer_auto_index_allow         = AUTO
Bug Fix Control Environment
    fix  3834770 = 1       
    fix  3746511 = enabled
    fix  4519016 = enabled
    fix  3118776 = enabled
    fix  4488689 = enabled
    fix  2194204 = disabled
    fix  2660592 = enabled
    fix  2320291 = enabled
    fix  2324795 = enabled
    fix  4308414 = enabled
    fix  3499674 = disabled
    fix  4569940 = enabled
    fix  4631959 = enabled
    fix  4519340 = enabled
    fix  4550003 = enabled
    fix  1403283 = enabled
    fix  4554846 = enabled
    fix  4602374 = enabled
    fix  4584065 = enabled
    fix  4545833 = enabled
    fix  4611850 = enabled
    fix  4663698 = enabled
    fix  4663804 = enabled
    fix  4666174 = enabled
    fix  4567767 = enabled
    fix  4556762 = 15      
    fix  4728348 = enabled
    fix  4708389 = enabled
    fix  4175830 = enabled
    fix  4752814 = enabled
    fix  4583239 = enabled
    fix  4386734 = enabled
    fix  4887636 = enabled
    fix  4483240 = enabled
    fix  4872602 = disabled
    fix  4711525 = enabled
    fix  4545802 = enabled
    fix  4605810 = enabled
    fix  4704779 = enabled
    fix  4900129 = enabled
    fix  4924149 = enabled
    fix  4663702 = enabled
    fix  4878299 = enabled
    fix  4658342 = enabled
    fix  4881533 = enabled
    fix  4676955 = enabled
    fix  4273361 = enabled
    fix  4967068 = enabled
    fix  4969880 = disabled
    fix  5005866 = enabled
    fix  5015557 = enabled
    fix  4705343 = enabled
    fix  4904838 = enabled
    fix  4716096 = enabled
    fix  4483286 = disabled
    fix  4722900 = enabled
    fix  4615392 = enabled
    fix  5096560 = enabled
    fix  5029464 = enabled
    fix  4134994 = enabled
    fix  4904890 = enabled
    fix  5104624 = enabled
    fix  5014836 = enabled
    fix  4768040 = enabled
    fix  4600710 = enabled
    fix  5129233 = enabled
    fix  4595987 = enabled
    fix  4908162 = enabled
    fix  5139520 = enabled
    fix  5084239 = enabled
    fix  5143477 = disabled
    fix  2663857 = enabled
    fix  4717546 = enabled
    fix  5240264 = disabled
    fix  5099909 = enabled
    fix  5240607 = enabled
    fix  5195882 = enabled
    fix  5220356 = enabled
    fix  5263572 = enabled
    fix  5385629 = enabled
    fix  5302124 = enabled
    fix  5391942 = enabled
    fix  5384335 = enabled
    fix  5482831 = enabled
    fix  4158812 = enabled
    fix  5387148 = enabled
    fix  5383891 = enabled
    fix  5466973 = enabled
    fix  5396162 = enabled
    fix  5394888 = enabled
    fix  5395291 = enabled
    fix  5236908 = enabled
    fix  5509293 = enabled
    fix  5449488 = enabled
    fix  5567933 = enabled
    fix  5570494 = enabled
    fix  5288623 = enabled
    fix  5505995 = enabled
    fix  5505157 = enabled
    fix  5112460 = enabled
    fix  5554865 = enabled
    fix  5112260 = enabled
    fix  5112352 = enabled
    fix  5547058 = enabled
    fix  5618040 = enabled
    fix  5585313 = enabled
    fix  5547895 = enabled
    fix  5634346 = enabled
    fix  5620485 = enabled
    fix  5483301 = enabled
    fix  5657044 = enabled
    fix  5694984 = enabled
    fix  5868490 = enabled
    fix  5650477 = enabled
    fix  5611962 = enabled
    fix  4279274 = enabled
    fix  5741121 = enabled
    fix  5714944 = enabled
    fix  5391505 = enabled
    fix  5762598 = enabled
    fix  5578791 = enabled
    fix  5259048 = enabled
    fix  5882954 = enabled
    fix  2492766 = enabled
    fix  5707608 = enabled
    fix  5891471 = enabled
    fix  5884780 = enabled
    fix  5680702 = enabled
    fix  5371452 = enabled
    fix  5838613 = enabled
    fix  5949981 = enabled
    fix  5624216 = enabled
    fix  5741044 = enabled
    fix  5976822 = enabled
    fix  6006457 = enabled
    fix  5872956 = enabled
    fix  5923644 = enabled
    fix  5943234 = enabled
    fix  5844495 = enabled
    fix  4168080 = enabled
    fix  6020579 = enabled
    fix  5842686 = disabled
    fix  5996801 = enabled
    fix  5593639 = enabled
    fix  6133948 = enabled
    fix  3151991 = enabled
    fix  6146906 = enabled
    fix  6239909 = enabled
    fix  6267621 = enabled
    fix  5909305 = enabled
    fix  6279918 = enabled
    fix  6141818 = enabled
    fix  6151963 = enabled
    fix  6251917 = enabled
    fix  6282093 = enabled
    fix  6119510 = enabled
    fix  6119382 = enabled
    fix  3801750 = enabled
    fix  5705630 = disabled
    fix  5944076 = enabled
    fix  5406763 = enabled
    fix  6070954 = enabled
    fix  6282944 = enabled
    fix  6138746 = enabled
    fix  6082745 = enabled
    fix  3426050 = enabled
    fix   599680 = enabled
    fix  6062266 = enabled
    fix  6087237 = enabled
    fix  6122894 = enabled
    fix  6377505 = enabled
    fix  5893768 = enabled
    fix  6163564 = enabled
    fix  6073325 = enabled
    fix  6188881 = enabled
    fix  6007259 = enabled
    fix  6239971 = enabled
    fix  5284200 = disabled
    fix  6042205 = enabled
    fix  6051211 = enabled
    fix  6434668 = enabled
    fix  6438752 = enabled
    fix  5936366 = enabled
    fix  6439032 = enabled
    fix  6438892 = enabled
    fix  6006300 = enabled
    fix  5947231 = enabled
    fix  5416118 = 1       
    fix  6365442 = 1       
    fix  6239039 = enabled
    fix  6502845 = enabled
    fix  6913094 = enabled
    fix  6029469 = enabled
    fix  5919513 = enabled
    fix  6057611 = enabled
    fix  6469667 = enabled
    fix  6608941 = disabled
    fix  6368066 = enabled
    fix  6329318 = enabled
    fix  6656356 = enabled
    fix  4507997 = enabled
    fix  6671155 = enabled
    fix  6694548 = enabled
    fix  6688200 = enabled
    fix  6612471 = enabled
    fix  6708183 = disabled
    fix  6326934 = enabled
    fix  6520717 = disabled
    fix  6714199 = enabled
    fix  6681545 = enabled
    fix  6748058 = enabled
    fix  6167716 = enabled
    fix  6674254 = enabled
    fix  6468287 = enabled
    fix  6503543 = enabled
    fix  6808773 = disabled
    fix  6766962 = enabled
    fix  6120483 = enabled
    fix  6670551 = enabled
    fix  6771838 = enabled
    fix  6626018 = disabled
    fix  6530596 = enabled
    fix  6778642 = enabled
    fix  6699059 = enabled
    fix  6376551 = enabled
    fix  6429113 = enabled
    fix  6782437 = enabled
    fix  6776808 = enabled
    fix  6765823 = enabled
    fix  6768660 = enabled
    fix  6782665 = enabled
    fix  6610822 = enabled
    fix  6514189 = enabled
    fix  6818410 = enabled
    fix  6827696 = enabled
    fix  6773613 = enabled
    fix  5902962 = enabled
    fix  6956212 = enabled
    fix  3056297 = enabled
    fix  6440977 = disabled
    fix  6972291 = disabled
    fix  6904146 = enabled
    fix  6221403 = enabled
    fix  5475051 = enabled
    fix  6845871 = enabled
    fix  5468809 = enabled
    fix  6917633 = enabled
    fix  4444536 = disabled
    fix  6955210 = enabled
    fix  6994194 = enabled
    fix  6399597 = disabled
    fix  6951776 = enabled
    fix  5648287 = 3       
    fix  6987082 = disabled
    fix  7132036 = enabled
    fix  6980350 = enabled
    fix  5199213 = enabled
    fix  7138405 = enabled
    fix  7148689 = enabled
    fix  6820988 = enabled
    fix  7032684 = enabled
    fix  6617866 = enabled
    fix  7155968 = enabled
    fix  7127980 = enabled
    fix  6982954 = enabled
    fix  7241819 = enabled
    fix  6897034 = enabled
    fix  7236148 = enabled
    fix  7298570 = enabled
    fix  7249095 = enabled
    fix  7314499 = enabled
    fix  7324224 = enabled
    fix  7289023 = enabled
    fix  7237571 = enabled
    fix  7116357 = enabled
    fix  7345484 = enabled
    fix  7375179 = enabled
    fix  6430500 = disabled
    fix  5897486 = enabled
    fix  6774209 = enabled
    fix  7306637 = enabled
    fix  6451322 = enabled
    fix  7208131 = enabled
    fix  7388652 = enabled
    fix  7127530 = enabled
    fix  6751206 = enabled
    fix  6669103 = enabled
    fix  7430474 = enabled
    fix  6990305 = enabled
    fix  7043307 = enabled
    fix  3120429 = enabled
    fix  7452823 = disabled
    fix  6838105 = enabled
    fix  6769711 = enabled
    fix  7170213 = enabled
    fix  6528872 = enabled
    fix  7295298 = enabled
    fix  5922070 = enabled
    fix  7259468 = enabled
    fix  6418552 = enabled
    fix  4619997 = enabled
    fix  7524366 = enabled
    fix  6942476 = enabled
    fix  6418771 = enabled
    fix  7375077 = enabled
    fix  5400639 = enabled
    fix  4570921 = enabled
    fix  7426911 = enabled
    fix  5099019 = disabled
    fix  7528216 = enabled
    fix  7521266 = enabled
    fix  7385140 = enabled
    fix  7576516 = enabled
    fix  7573526 = enabled
    fix  7576476 = enabled
    fix  7165898 = enabled
    fix  7263214 = enabled
    fix  3320140 = enabled
    fix  7555510 = enabled
    fix  7613118 = enabled
    fix  7597059 = enabled
    fix  7558911 = enabled
    fix  5520732 = enabled
    fix  7679490 = disabled
    fix  7449971 = enabled
    fix  3628118 = enabled
    fix  4370840 = enabled
    fix  7281191 = enabled
    fix  7519687 = enabled
    fix  5029592 = 3       
    fix  6012093 = 1       
    fix  6053861 = disabled
    fix  6941515 = disabled
    fix  7696414 = enabled
    fix  7272039 = enabled
    fix  7834811 = enabled
    fix  7640597 = enabled
    fix  7341616 = enabled
    fix  7168184 = enabled
    fix   399198 = enabled
    fix  7831070 = enabled
    fix  7676897 = disabled
    fix  7414637 = enabled
    fix  7585456 = enabled
    fix  8202421 = enabled
    fix  7658097 = disabled
    fix  8251486 = enabled
    fix  7132684 = enabled
    fix  7512227 = enabled
    fix  6972987 = enabled
    fix  7199035 = enabled
    fix  8243446 = enabled
    fix  7650462 = enabled
    fix  6720701 = enabled
    fix  7592673 = enabled
    fix  7718694 = enabled
    fix  7534027 = enabled
    fix  7708267 = enabled
    fix  5716785 = enabled
    fix  7356191 = enabled
    fix  7679161 = enabled
    fix  7597159 = enabled
    fix  7499258 = enabled
    fix  8328363 = enabled
    fix  7452863 = enabled
    fix  8284930 = enabled
    fix  7298626 = enabled
    fix  7657126 = enabled
    fix  8371884 = enabled
    fix  8318020 = enabled
    fix  8255423 = enabled
    fix  7135745 = enabled
    fix  8356253 = enabled
    fix  7534257 = enabled
    fix  8323407 = enabled
    fix  7539815 = enabled
    fix  8289316 = enabled
    fix  8447850 = enabled
    fix  7675944 = enabled
    fix  8355120 = enabled
    fix  7176746 = enabled
    fix  8442891 = enabled
    fix  8373261 = enabled
    fix  7679164 = enabled
    fix  7670533 = enabled
    fix  8408665 = enabled
    fix  8491399 = enabled
    fix  8348392 = enabled
    fix  8348585 = enabled
    fix  8335178 = enabled
    fix  8247017 = enabled
    fix  7325597 = enabled
    fix  8531490 = enabled
    fix  6163600 = enabled
    fix  8589278 = disabled
    fix  8557992 = enabled
    fix  7556098 = enabled
    fix  8580883 = enabled
    fix  5892599 = disabled
    fix  8609714 = enabled
    fix  8619631 = disabled
    fix  8672915 = enabled
    fix  8514561 = enabled
    fix  8213977 = enabled
    fix  8560951 = disabled
    fix  8578587 = enabled
    fix  8287870 = enabled
    fix  8467123 = enabled
    fix  8602185 = enabled
    fix  8519457 = enabled
    fix  3335182 = enabled
    fix  8602840 = enabled
    fix  8725296 = enabled
    fix  8628970 = enabled
    fix  6754080 = enabled
    fix  8767442 = enabled
    fix  8760135 = enabled
    fix  8644935 = enabled
    fix  8352378 = enabled
    fix  8685327 = enabled
    fix  8763472 = enabled
    fix  8773324 = enabled
    fix  8813674 = enabled
    fix  8532236 = enabled
    fix  8629716 = enabled
    fix  7277732 = enabled
    fix  8692170 = enabled
    fix  8900973 = enabled
    fix  8919133 = enabled
    fix  8927050 = enabled
    fix  8551880 = enabled
    fix  8901237 = enabled
    fix  8812372 = enabled
    fix  6236862 = enabled
    fix  8528517 = enabled
    fix  7215982 = enabled
    fix  8214022 = enabled
    fix  8595392 = enabled
    fix  8890233 = enabled
    fix  8999317 = enabled
    fix  9004800 = enabled
    fix  8986163 = enabled
    fix  8855396 = enabled
    fix  8800514 = 20      
    fix  9007859 = enabled
    fix  8198783 = disabled
    fix  9053879 = enabled
    fix  6086930 = enabled
    fix  7641601 = enabled
    fix  9052506 = enabled
    fix  9103775 = enabled
    fix  9047975 = enabled
    fix  8893626 = enabled
    fix  9111170 = enabled
    fix  8971829 = enabled
    fix  7628358 = enabled
    fix  9125151 = enabled
    fix  9039715 = enabled
    fix  9106224 = enabled
    fix  9185228 = enabled
    fix  9206747 = enabled
    fix  9088510 = enabled
    fix  9143856 = enabled
    fix  8833381 = enabled
    fix  8949971 = enabled
    fix  8951812 = enabled
    fix  9148171 = enabled
    fix  8706652 = enabled
    fix  9245114 = enabled
    fix  8802198 = enabled
    fix  9011016 = enabled
    fix  9265681 = enabled
    fix  7284269 = enabled
    fix  9272549 = enabled
    fix  8917507 = 7       
    fix  8531463 = enabled
    fix  9263333 = enabled
    fix  8675087 = enabled
    fix  8896955 = enabled
    fix  9041934 = enabled
    fix  9344709 = enabled
    fix  9024933 = enabled
    fix  9033718 = enabled
    fix  9240455 = enabled
    fix  9081848 = enabled
    fix  5982893 = enabled
    fix  9287401 = enabled
    fix  8590021 = enabled
    fix  9340120 = enabled
    fix  9355794 = enabled
    fix  9356656 = enabled
    fix  9385634 = enabled
    fix  9069046 = enabled
    fix  9239337 = enabled
    fix  9300228 = enabled
    fix  9298010 = enabled
    fix  9384170 = enabled
    fix  9407929 = enabled
    fix  8836806 = enabled
    fix  9344055 = enabled
    fix  9274675 = enabled
    fix  9203723 = enabled
    fix  9443476 = enabled
    fix  9195582 = enabled
    fix  8226666 = enabled
    fix  9433490 = enabled
    fix  9065494 = enabled
    fix  9303766 = enabled
    fix  9437283 = enabled
    fix  9116214 = enabled
    fix  9456688 = enabled
    fix  9456746 = disabled
    fix  9342979 = enabled
    fix  9465425 = enabled
    fix  9092442 = enabled
    fix  4926618 = enabled
    fix  8792846 = enabled
    fix  9474259 = enabled
    fix  9495669 = disabled
    fix  6472966 = enabled
    fix  6408301 = enabled
    fix  9380298 = disabled
    fix  8500130 = enabled
    fix  9584723 = enabled
    fix  9270951 = enabled
    fix  9508254 = enabled
    fix  9593680 = enabled
    fix  9196440 = disabled
    fix  9309281 = enabled
    fix  8693158 = enabled
    fix  9381638 = enabled
    fix  9383967 = enabled
    fix  7711900 = enabled
    fix  9218587 = enabled
    fix  9728438 = enabled
    fix  9038395 = enabled
    fix  9577300 = enabled
    fix  9171113 = enabled
    fix  8973745 = enabled
    fix  9732434 = enabled
    fix  8937971 = disabled
    fix  9102474 = enabled
    fix  9243499 = enabled
    fix  9791810 = enabled
    fix  9785632 = enabled
    fix  9898249 = enabled
    fix  9153459 = enabled
    fix  9680430 = enabled
    fix  9841679 = enabled
    fix  9912503 = enabled
    fix  9850461 = enabled
    fix  9762592 = 3       
    fix  9716877 = enabled
    fix  9814067 = enabled
    fix  9776736 = enabled
    fix  8349119 = enabled
    fix  9958518 = enabled
    fix 10041074 = enabled
    fix 10004943 = enabled
    fix  9980661 = enabled
    fix  9554026 = enabled
    fix  9593547 = enabled
    fix  9833381 = enabled
    fix 10043801 = enabled
    fix  9940732 = enabled
    fix  9702850 = enabled
    fix  9659125 = 0       
    fix  9668086 = enabled
    fix  9476520 = enabled
    fix 10158107 = enabled
    fix 10148457 = enabled
    fix 10106423 = enabled
    fix  9721439 = disabled
    fix 10162430 = enabled
    fix 10134677 = enabled
    fix 10182051 = 3       
    fix 10175079 = enabled
    fix 10026972 = enabled
    fix 10192889 = enabled
    fix  3566843 = enabled
    fix  9550277 = disabled
    fix 10236566 = enabled
    fix 10227392 = enabled
    fix  8961143 = enabled
    fix  9721228 = enabled
    fix 10080014 = enabled
    fix 10101489 = enabled
    fix  9929609 = enabled
    fix 10015652 = enabled
    fix  9918661 = enabled
    fix 10333395 = enabled
    fix 10336499 = disabled
    fix 10182672 = enabled
    fix  9578670 = enabled
    fix 10232225 = enabled
    fix 10330090 = enabled
    fix 10232623 = enabled
    fix  9630092 = disabled
    fix 10271790 = enabled
    fix  9227576 = enabled
    fix 10197666 = enabled
    fix 10376744 = enabled
    fix  8274946 = enabled
    fix 10046368 = enabled
    fix  9569678 = enabled
    fix  9002661 = enabled
    fix 10038373 = enabled
    fix  9477688 = enabled
    fix 10013899 = enabled
    fix  9832338 = enabled
    fix 10623119 = enabled
    fix  9898066 = enabled
    fix 11699884 = enabled
    fix 10640430 = enabled
    fix 10428450 = enabled
    fix 10117760 = enabled
    fix 11720178 = enabled
    fix  9881812 = enabled
    fix 10428278 = enabled
    fix 11741436 = enabled
    fix 11668189 = enabled
    fix 10359631 = enabled
    fix  9829887 = enabled
    fix  8275054 = enabled
    fix 11814428 = enabled
    fix 11676888 = disabled
    fix 10348427 = enabled
    fix 11843512 = enabled
    fix 11657468 = enabled
    fix 11877160 = enabled
    fix 11738631 = enabled
    fix 11744086 = enabled
    fix 11830663 = enabled
    fix 11853331 = enabled
    fix  9748015 = enabled
    fix 11834739 = enabled
    fix  6055658 = enabled
    fix 11740670 = enabled
    fix 11940126 = enabled
    fix 12315002 = enabled
    fix  8275023 = enabled
    fix 12352373 = enabled
    fix 12390139 = enabled
    fix 11935589 = enabled
    fix 10226906 = enabled
    fix 12327548 = enabled
    fix 12388221 = enabled
    fix 11892888 = enabled
    fix 11814265 = enabled
    fix 10230017 = enabled
    fix 12341619 = enabled
    fix 11744016 = enabled
    fix 10216738 = enabled
    fix 10298302 = enabled
    fix 12563419 = enabled
    fix 12399886 = enabled
    fix 12584007 = enabled
    fix 11881047 = enabled
    fix 12534597 = enabled
    fix  8683604 = enabled
    fix 12410972 = enabled
    fix  7147087 = enabled
    fix 11846314 = enabled
    fix 12535474 = enabled
    fix 12561635 = enabled
    fix 12432426 = enabled
    fix  9913117 = enabled
    fix 12432089 = enabled
    fix 12587690 = enabled
    fix 11858963 = enabled
    fix 12569245 = enabled
    fix 12569300 = enabled
    fix  7308975 = disabled
    fix 12569316 = enabled
    fix 12569321 = enabled
    fix 12335617 = enabled
    fix  9002958 = enabled
    fix 12591120 = enabled
    fix 11876260 = enabled
    fix 12313574 = enabled
    fix 12569713 = enabled
    fix 12348584 = enabled
    fix 10420220 = enabled
    fix 12559453 = enabled
    fix 12727549 = enabled
    fix 12728203 = enabled
    fix 12828479 = enabled
    fix 10181153 = enabled
    fix  9971371 = disabled
    fix 12864791 = enabled
    fix 12810427 = enabled
    fix 12605402 = enabled
    fix 12861609 = enabled
    fix 12915337 = enabled
    fix 12942119 = enabled
    fix 12622441 = enabled
    fix 11072246 = enabled
    fix 12739252 = enabled
    fix 12953765 = enabled
    fix 12905116 = enabled
    fix 12978495 = enabled
    fix  9633142 = disabled
    fix  3639130 = enabled
    fix 12827166 = enabled
    fix 12944193 = enabled
    fix 13020272 = enabled
    fix 12673320 = enabled
    fix 12975771 = enabled
    fix 12882092 = enabled
    fix 12379334 = enabled
    fix 12723414 = enabled
    fix  9488694 = disabled
    fix 13255388 = 10      
    fix 11727871 = enabled
    fix 13110511 = enabled
    fix 13075297 = enabled
    fix 13345888 = enabled
    fix 11657903 = disabled
    fix 13396096 = enabled
    fix 12591379 = enabled
    fix 13398214 = enabled
    fix 13382280 = enabled
    fix 12869367 = enabled
    fix 12999577 = enabled
    fix 12433153 = enabled
    fix  9094254 = enabled
    fix 13104618 = enabled
    fix 13524237 = enabled
    fix 11813257 = enabled
    fix 13489017 = enabled
    fix 12954320 = enabled
    fix 13555551 = enabled
    fix 13499154 = enabled
    fix 13036910 = enabled
    fix 13545925 = enabled
    fix 13545956 = enabled
    fix 13545989 = enabled
    fix 12839247 = enabled
    fix  9858777 = enabled
    fix 13568366 = enabled
    fix 13393357 = enabled
    fix 13040171 = enabled
    fix 13406619 = enabled
    fix 13594757 = enabled
    fix 13543207 = enabled
    fix 13594712 = enabled
    fix 12648629 = enabled
    fix 13549808 = enabled
    fix 13634700 = enabled
    fix  8792821 = enabled
    fix 13454409 = enabled
    fix 13146487 = enabled
    fix 13592248 = enabled
    fix 11689541 = enabled
    fix 13527374 = enabled
    fix 13430622 = enabled
    fix 13704562 = enabled
    fix  9547706 = enabled
    fix 13497184 = enabled
    fix 13704977 = enabled
    fix 13734456 = enabled
    fix 13070532 = enabled
    fix  6520878 = enabled
    fix  2273284 = enabled
    fix 13786127 = enabled
    fix 13065064 = enabled
    fix 13972896 = enabled
    fix 11843466 = enabled
    fix 13777823 = enabled
    fix 13616573 = enabled
    fix 13831671 = enabled
    fix 13652216 = enabled
    fix 13912192 = enabled
    fix 13909909 = enabled
    fix 13849486 = enabled
    fix 13321547 = enabled
    fix 13886606 = disabled
    fix 14013502 = enabled
    fix 13850256 = enabled
    fix 13929275 = enabled
    fix 11732303 = enabled
    fix 13906168 = enabled
    fix 14055128 = enabled
    fix 12856200 = enabled
    fix 14008590 = enabled
    fix 13627489 = disabled
    fix 13961105 = enabled
    fix 13583722 = enabled
    fix 13076238 = enabled
    fix 13936229 = enabled
    fix  9852856 = enabled
    fix  3904125 = enabled
    fix  5910187 = enabled
    fix 10068316 = enabled
    fix 14029891 = enabled
    fix  4215125 = enabled
    fix 13711083 = enabled
    fix 13973691 = enabled
    fix 13486825 = enabled
    fix 13682550 = enabled
    fix 13826669 = enabled
    fix 14033181 = enabled
    fix 13836796 = enabled
    fix 12555499 = enabled
    fix 13568506 = enabled
    fix  9891396 = enabled
    fix 13699643 = enabled
    fix 13835788 = enabled
    fix  7271518 = enabled
    fix 14127824 = enabled
    fix 12557401 = enabled
    fix 13350470 = enabled
    fix 14095362 = enabled
    fix 13000118 = enabled
    fix 14254795 = enabled
    fix 14012261 = enabled
    fix 14241953 = enabled
    fix 14221012 = enabled
    fix 13329748 = enabled
    fix 13843964 = enabled
    fix 14254052 = enabled
    fix 13814866 = enabled
    fix 14255600 = disabled
    fix 13735304 = enabled
    fix 14142884 = disabled
    fix 12909121 = enabled
    fix 14464068 = enabled
    fix 14295250 = 45000   
    fix  6873091 = enabled
    fix 13448445 = enabled
    fix 14155722 = enabled
    fix 14098180 = enabled
    fix 11905801 = enabled
    fix 14467202 = enabled
    fix 14541122 = enabled
    fix 13905599 = disabled
    fix 14320077 = enabled
    fix 14243782 = enabled
    fix  9114915 = enabled
    fix 14516175 = enabled
    fix 12812697 = enabled
    fix 13109345 = enabled
    fix 14456124 = enabled
    fix 14605040 = enabled
    fix 14595273 = disabled
    fix 14176247 = enabled
    fix 11894476 = enabled
    fix 14256885 = enabled
    fix 14545269 = disabled
    fix 14668404 = disabled
    fix 14144611 = enabled
    fix 14346182 = enabled
    fix 13083139 = enabled
    fix 14726188 = enabled
    fix 14707009 = enabled
    fix 14703133 = enabled
    fix 14618560 = enabled
    fix 14170552 = enabled
    fix 13263174 = enabled
    fix 14669785 = enabled
    fix 14633570 = enabled
    fix 14755138 = enabled
    fix 14682092 = enabled
    fix 14712222 = enabled
    fix 14570575 = enabled
    fix 14707748 = disabled
    fix 14684079 = enabled
    fix 13245379 = enabled
    fix 13853916 = enabled
    fix 13699007 = enabled
    fix 14843189 = enabled
    fix 14147762 = enabled
    fix 14795969 = enabled
    fix 14746036 = 1       
    fix 14750501 = enabled
    fix 13891981 = enabled
    fix 15996520 = enabled
    fix 16026776 = enabled
    fix 13573073 = enabled
    fix 13263455 = enabled
    fix 16053273 = enabled
    fix 16029607 = enabled
    fix 14242833 = enabled
    fix 13362020 = enabled
    fix 13799389 = enabled
    fix 12693573 = enabled
    fix 15998585 = enabled
    fix 16166364 = enabled
    fix 14723910 = enabled
    fix 15873008 = enabled
    fix 14133928 = enabled
    fix 16085999 = enabled
    fix 14176203 = enabled
    fix 16226575 = enabled
    fix 16015637 = enabled
    fix 15968693 = disabled
    fix 16220895 = enabled
    fix 16178821 = enabled
    fix 11865196 = enabled
    fix 16237969 = enabled
    fix 16058481 = enabled
    fix 13361493 = enabled
    fix 16264537 = enabled
    fix 14401107 = enabled
    fix 13943459 = enabled
    fix 13994546 = enabled
    fix  7174435 = enabled
    fix 14750443 = enabled
    fix 14469756 = enabled
    fix 14552075 = enabled
    fix 16324844 = enabled
    fix 13583529 = enabled
    fix 14565911 = enabled
    fix 13526551 = enabled
    fix 16368002 = enabled
    fix 16077770 = enabled
    fix 16419357 = enabled
    fix 15889476 = disabled
    fix 16273483 = enabled
    fix 16496848 = disabled
    fix 14107333 = enabled
    fix 11814337 = enabled
    fix 15882436 = enabled
    fix 14764840 = enabled
    fix 16226660 = enabled
    fix 16555865 = enabled
    fix 16625151 = enabled
    fix 16092378 = enabled
    fix 16487030 = enabled
    fix  9552303 = enabled
    fix 16609749 = enabled
    fix 16751246 = enabled
    fix 13253977 = enabled
    fix 14058291 = disabled
    fix 16749025 = enabled
    fix 16750067 = enabled
    fix 16726844 = enabled
    fix 15899648 = enabled
    fix 16690013 = enabled
    fix 15996156 = enabled
    fix 16544878 = enabled
    fix  9413591 = disabled
    fix 16792882 = 0       
    fix 16725982 = enabled
    fix 14648222 = enabled
    fix 16799181 = enabled
    fix 16516883 = enabled
    fix 16507317 = enabled
    fix 16837274 = enabled
    fix 14085520 = enabled
    fix 16713081 = enabled
    fix 14703295 = enabled
    fix 16908409 = enabled
    fix 16212250 = enabled
    fix 13692395 = disabled
    fix 17087729 = enabled
    fix 17088819 = enabled
    fix 13848786 = enabled
    fix 13522189 = enabled
    fix 16400122 = enabled
    fix 16796185 = enabled
    fix 15950252 = enabled
    fix 17070464 = enabled
    fix 16976121 = enabled
    fix 14580303 = enabled
    fix 16554552 = enabled
    fix 16582322 = enabled
    fix 16712213 = enabled
    fix 17382690 = enabled
    fix 14846352 = enabled
    fix 16516751 = enabled
    fix  3174223 = enabled
    fix  8611462 = enabled
    fix 14851437 = 3       
    fix 17348895 = enabled
    fix 16515789 = enabled
    fix  5451645 = disabled
    fix 14062749 = enabled
    fix 16346018 = enabled
    fix 12977599 = enabled
    fix 14191778 = enabled
    fix 15939321 = enabled
    fix 16874299 = enabled
    fix 16470836 = enabled
    fix 16805362 = disabled
    fix 17442009 = disabled
    fix 16825679 = enabled
    fix 17543180 = enabled
    fix 17301564 = enabled
    fix 12373708 = enabled
    fix 17397506 = enabled
    fix 14558315 = enabled
    fix 16615686 = enabled
    fix 16622801 = enabled
    fix 10038517 = enabled
    fix 16954950 = enabled
    fix 17728161 = enabled
    fix 17760375 = enabled
    fix 14311185 = enabled
    fix 13077335 = disabled
    fix 13458979 = disabled
    fix 17485514 = enabled
    fix 17599514 = enabled
    fix 17640863 = enabled
    fix 17716301 = enabled
    fix 17368047 = disabled
    fix 17597748 = enabled
    fix 17303359 = enabled
    fix 17376322 = disabled
    fix 16391176 = disabled
    fix 16673868 = enabled
    fix 17800514 = enabled
    fix 14826303 = enabled
    fix 17663076 = enabled
    fix 17760755 = enabled
    fix 17793460 = enabled
    fix 17997159 = enabled
    fix 17938754 = enabled
    fix 14733442 = enabled
    fix 17727676 = enabled
    fix 17781659 = enabled
    fix 17526569 = enabled
    fix 17950612 = enabled
    fix 17760686 = enabled
    fix 17696414 = enabled
    fix 17799716 = enabled
    fix 18116777 = enabled
    fix 18159664 = disabled
    fix 16052625 = enabled
    fix 18091750 = enabled
    fix 17572606 = enabled
    fix 17971955 = enabled
    fix 17946915 = enabled
    fix 18196576 = enabled
    fix 10145667 = enabled
    fix 17736165 = enabled
    fix 16434021 = enabled
    fix 18035463 = enabled
    fix 18011820 = enabled
    fix 16405740 = enabled
    fix 14612201 = enabled
    fix 17491018 = enabled
    fix 18365267 = enabled
    fix 17986549 = enabled
    fix 18115594 = enabled
    fix 18182018 = enabled
    fix 18302923 = enabled
    fix 18377553 = enabled
    fix  5677419 = enabled
    fix 17896018 = disabled
    fix 13097308 = enabled
    fix 17863980 = enabled
    fix 17567154 = enabled
    fix 18398980 = enabled
    fix 17023040 = enabled
    fix 17991403 = 1       
    fix 16033838 = enabled
    fix 17908541 = enabled
    fix 18134680 = enabled
    fix 18405517 = 0       
    fix 18304693 = enabled
    fix 18456944 = enabled
    fix 18467455 = enabled
    fix 18425876 = enabled
    fix 18508675 = enabled
    fix 17473046 = disabled
    fix 18636079 = enabled
    fix 18388128 = enabled
    fix 18415557 = enabled
    fix 18385778 = enabled
    fix 18308329 = enabled
    fix 18461984 = enabled
    fix 17973658 = enabled
    fix 18558952 = enabled
    fix  9912950 = enabled
    fix 18751128 = enabled
    fix 16809786 = enabled
    fix 18795224 = enabled
    fix 14776289 = enabled
    fix 18823135 = enabled
    fix 18874242 = enabled
    fix 18770199 = disabled
    fix  4185270 = disabled
    fix 18765574 = enabled
    fix 18754357 = disabled
    fix 18959892 = enabled
    fix 17324379 = disabled
    fix 18952882 = enabled
    fix 18924221 = enabled
    fix 18422714 = enabled
    fix 18798414 = enabled
    fix 18969167 = enabled
    fix 16191689 = enabled
    fix 18907562 = enabled
    fix 19055664 = enabled
    fix 18898582 = enabled
    fix 18960760 = enabled
    fix 19070454 = enabled
    fix 19230097 = enabled
    fix 19063497 = enabled
    fix 19046459 = enabled
    fix 19269482 = enabled
    fix 18876528 = enabled
    fix 19227996 = enabled
    fix 18864613 = enabled
    fix 19239478 = enabled
    fix 19451895 = enabled
    fix 19450139 = enabled
    fix 18907390 = enabled
    fix 19025959 = enabled
    fix 19309574 = enabled
    fix 16774698 = enabled
    fix 16923858 = 6       
    fix 19546825 = enabled
    fix 19475484 = enabled
    fix 19498595 = enabled
    fix 16934526 = enabled
    fix 19287919 = enabled
    fix 19386746 = enabled
    fix 19774486 = enabled
    fix 19803410 = enabled
    fix 18671960 = enabled
    fix 19484911 = enabled
    fix 19731940 = enabled
    fix 19604408 = enabled
    fix 14402409 = enabled
    fix 16486095 = enabled
    fix 19563657 = enabled
    fix 19632232 = enabled
    fix 19889960 = enabled
    fix 17208933 = enabled
    fix 19710102 = enabled
    fix 18697515 = enabled
    fix 18318631 = enabled
    fix 19377983 = enabled
    fix 20078639 = enabled
    fix 19503668 = enabled
    fix 20124288 = enabled
    fix 19847091 = enabled
    fix 12989345 = enabled
    fix 12618642 = enabled
    fix 19779920 = enabled
    fix 20186282 = enabled
    fix 20186295 = enabled
    fix 19563433 = enabled
    fix 19848804 = enabled
    fix 20046257 = enabled
    fix 20265690 = enabled
    fix 16047938 = enabled
    fix 19507904 = enabled
    fix 18915345 = enabled
    fix 20173686 = disabled
    fix 20329321 = enabled
    fix 20225191 = enabled
    fix 18776755 = enabled
    fix 19882842 = enabled
    fix 20010996 = enabled
    fix 20445764 = disabled
    fix 19728543 = disabled
    fix 20379571 = enabled
    fix 20129763 = enabled
    fix 19899588 = enabled
    fix 10098852 = enabled
    fix 19663421 = disabled
    fix 20355502 = 0       
    fix 20526705 = enabled
    fix 20465582 = enabled
    fix 20581886 = disabled
    fix 16732417 = enabled
    fix 20732410 = enabled
    fix 20289688 = enabled
    fix 20543684 = enabled
    fix 20636003 = enabled
    fix 20506136 = enabled
    fix 20458598 = disabled
    fix 20830312 = enabled
    fix 19768896 = enabled
    fix 20321661 = enabled
    fix 19814541 = enabled
    fix 20933264 = enabled
    fix 17443547 = enabled
    fix 20602794 = enabled
    fix 19123152 = enabled
    fix 19899833 = enabled
    fix 20754928 = enabled
    fix 20808265 = enabled
    fix 20808192 = enabled
    fix 20340595 = enabled
    fix 14474264 = disabled
    fix 20508819 = enabled
    fix 21098866 = disabled
    fix 18949550 = enabled
    fix 14775297 = enabled
    fix 19568958 = disabled
    fix 20923950 = enabled
    fix 21283159 = enabled
    fix 17497847 = enabled
    fix 21211629 = enabled
    fix 20819668 = disabled
    fix 20232513 = enabled
    fix 20906782 = enabled
    fix 20587527 = enabled
    fix 20914534 = disabled
    fix 20830544 = enabled
    fix 16851194 = enabled
    fix 19186783 = enabled
    fix 19653920 = enabled
    fix 21211786 = enabled
    fix 21057343 = enabled
    fix 21503478 = enabled
    fix 19808939 = disabled
    fix 21476032 = enabled
    fix 20859246 = enabled
    fix 20838633 = 2       
    fix 21639419 = enabled
    fix 20951803 = enabled
    fix 21683982 = enabled
    fix 20216500 = enabled
    fix 21614112 = enabled
    fix 20906162 = enabled
    fix 20854798 = enabled
    fix 21509656 = enabled
    fix 21833220 = enabled
    fix 21802552 = enabled
    fix 21452843 = enabled
    fix 21553593 = enabled
    fix 21093805 = enabled
    fix 16220085 = disabled
    fix 21800590 = enabled
    fix 21273039 = enabled
    fix 16750133 = enabled
    fix 22013607 = enabled
    fix 22152372 = enabled
    fix 22077191 = enabled
    fix 22123025 = enabled
    fix 16913734 = enabled
    fix  8357294 = enabled
    fix 12670904 = enabled
    fix 21979983 = enabled
    fix 22158526 = enabled
    fix 21971099 = enabled
    fix 22090662 = enabled
    fix 22149010 = disabled
    fix 21300129 = enabled
    fix 21339278 = enabled
    fix 20270511 = enabled
    fix 21424812 = enabled
    fix 22114090 = enabled
    fix 22310074 = disabled
    fix 22159570 = enabled
    fix 22272439 = enabled
    fix 22372694 = enabled
    fix 22514195 = enabled
    fix 20413540 = enabled
    fix 22520315 = enabled
    fix 22649054 = enabled
    fix  8617254 = enabled
    fix 22020067 = enabled
    fix 22864730 = enabled
    fix 21099502 = enabled
    fix 22904304 = enabled
    fix 22967807 = enabled
    fix 22879002 = enabled
    fix 23019286 = enabled
    fix 22760704 = enabled
    fix 20853506 = enabled
    fix 22540411 = disabled
    fix 22513493 = enabled
    fix 22518491 = enabled
    fix 23103096 = enabled
    fix 22143411 = enabled
    fix 23180670 = enabled
    fix 23002609 = enabled
    fix 22928015 = 1       
    fix 23210039 = enabled
    fix 23102649 = enabled
    fix 23071621 = enabled
    fix 22822245 = enabled
    fix 23136865 = enabled
    fix 23176721 = enabled
    fix 23308385 = enabled
    fix 23223113 = enabled
    fix 22301868 = disabled
    fix 22258300 = enabled
    fix 22205301 = enabled
    fix 23514473 = 1       
    fix 23556483 = enabled
    fix 21305617 = enabled
    fix 22533539 = enabled
    fix 23596611 = enabled
    fix 20347374 = disabled
    fix 22937293 = enabled
    fix 20107874 = enabled
    fix 19582337 = enabled
    fix 22746853 = enabled
    fix 23537232 = enabled
    fix 23565188 = enabled
    fix 20228468 = enabled
    fix 22393169 = enabled
    fix 24426912 = enabled
    fix 24690046 = enabled
    fix 23732552 = enabled
    fix 20648883 = enabled
    fix 24654471 = enabled
    fix 23738304 = enabled
    fix 24010030 = enabled
    fix 22766607 = enabled
    fix 24600280 = enabled
    fix 24845754 = enabled
    fix 24533235 = enabled
    fix 22128803 = enabled
    fix 24926999 = enabled
    fix 24434608 = enabled
    fix 25094218 = enabled
    fix 24819957 = enabled
    fix 23478835 = enabled
    fix 24745366 = enabled
    fix 24920138 = disabled
    fix 24570810 = enabled
    fix 25058954 = enabled
    fix 24518392 = enabled
    fix 23738186 = enabled
    fix 25234139 = enabled
    fix 25108065 = enabled
    fix 22212124 = enabled
    fix 25123105 = enabled
    fix 25078728 = enabled
    fix 23719498 = 0       
    fix 25090203 = enabled
    fix 23197730 = enabled
    fix 23738553 = enabled
    fix 22070473 = enabled
    fix 19956351 = enabled
    fix 25393617 = enabled
    fix 21130817 = enabled
    fix 25342352 = enabled
    fix 25167306 = disabled
    fix 23473108 = enabled
    fix 25501716 = enabled
    fix 22973474 = enabled
    fix 22153026 = enabled
    fix 25367727 = enabled
    fix 25477783 = enabled
    fix 25493582 = enabled
    fix 22205362 = enabled
    fix 23249829 = enabled
    fix 25120742 = enabled
    fix 23853877 = disabled
    fix 25796244 = enabled
    fix 25575369 = enabled
    fix 25643889 = disabled
    fix 25436615 = enabled
    fix 25478095 = enabled
    fix 25405100 = enabled
    fix 24952618 = enabled
    fix 25809211 = enabled
    fix 26094674 = enabled
    fix 21183079 = enabled
    fix 25948370 = enabled
    fix 24545933 = enabled
    fix 25926263 = enabled
    fix 26019148 = enabled
    fix 25995431 = enabled
    fix 21870589 = enabled
    fix 24584046 = enabled
    fix 26374214 = enabled
    fix 25476149 = enabled
    fix 25345279 = enabled
    fix 24478915 = enabled
    fix 26541991 = enabled
    fix 26338880 = enabled
    fix 26270685 = disabled
    fix 26560136 = enabled
    fix 26671842 = enabled
    fix 26712343 = enabled
    fix 26585420 = enabled
    fix 26677151 = enabled
    fix 26367868 = enabled
    fix 25323193 = enabled
    fix 26552730 = disabled
    fix 26177646 = enabled
    fix 23643560 = enabled
    fix 25792706 = enabled
    fix 27057772 = disabled
    fix 26986173 = enabled
    fix 26423085 = enabled
    fix 27077069 = enabled
    fix 26536320 = enabled
    fix 25138211 = enabled
    fix 27321179 = enabled
    fix 27343844 = enabled
    fix 26790514 = enabled
    fix 27282295 = enabled
    fix 27432718 = enabled
    fix 27268249 = enabled
    fix 25507796 = enabled
    fix 25507810 = enabled
    fix 25507823 = disabled
    fix 25507828 = enabled
    fix 25660695 = enabled
    fix 27311177 = enabled
    fix 24841671 = enabled
    fix 26842212 = enabled
    fix 27559630 = enabled
    fix 27436816 = enabled
    fix 23098284 = enabled
    fix 26660568 = enabled
    fix 27693205 = enabled
    fix 27096140 = disabled
    fix 27174324 = enabled
    fix 27000158 = enabled
    fix 27208525 = enabled
    fix 27745220 = enabled
    fix 26527656 = enabled
    fix 27675947 = disabled
    fix 26566785 = enabled
    fix 27175987 = enabled
    fix  8932139 = enabled
    fix 18816560 = enabled
    fix 27466597 = enabled
    fix 27210659 = enabled
    fix 27643128 = enabled
    fix 27782339 = enabled
    fix 24761824 = enabled
    fix 27634227 = enabled
    fix 26733841 = enabled
    fix 27971253 = enabled
    fix 22174392 = enabled
    fix 27730925 = enabled
    fix 22559379 = enabled
    fix 27622097 = enabled
    fix 20424684 = enabled
    fix 27593424 = enabled
    fix 28096482 = enabled
    fix 24573561 = enabled
    fix 22582700 = enabled
    fix 28201419 = enabled
    fix 26836964 = disabled
    fix 27991474 = enabled
    fix 28210382 = enabled
    fix 27500916 = enabled
    fix 28012754 = 7       
    fix 28071742 = enabled
    fix 27836278 = enabled
    fix 28256899 = enabled
    fix 28345522 = 0       
    fix 28084251 = enabled
    fix 23058521 = enabled
    fix 28242450 = enabled
    fix 28135957 = enabled
    fix 27680422 = 1       
    fix 28378804 = enabled
    fix 28660798 = enabled
    fix 28606162 = disabled
    fix 28816113 = enabled
    fix 27541468 = enabled
    fix 28725660 = enabled
    fix 28072567 = enabled
    fix 28835937 = enabled


Query Block Registry:
SEL$1 0x657ca0e8 (PARSER) [FINAL]
  SEL$1_3 0x657ca0e8 (OR EXPANSION SEL$1) [FINAL]
  SEL$1_2 0x657ca0e8 (OR EXPANSION SEL$1) [FINAL]
  SEL$1_1 0x657ca0e8 (OR EXPANSION SEL$1; SEL$1; 8 LIST) [FINAL]
  SEL$1_1 0x657ca0e8 (OR EXPANSION SEL$1; SEL$1; 8 LIST) [FINAL]

:
    call(in-use=301056, alloc=1367928), compile(in-use=606808, alloc=706144), execution(in-use=852376, alloc=855104)

End of Optimizer State Dump
Dumping Hints
=============
  atom_hint=(@=0x65b623d8 err=0 resol=0 used=1 token=1087 org=1 lvl=1 txt=OPT_PARAM ())
====================== END SQL Statement Dump ======================
